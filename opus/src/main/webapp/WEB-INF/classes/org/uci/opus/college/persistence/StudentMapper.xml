<?xml version="1.0" encoding="UTF-8"?><!--
  ***** BEGIN LICENSE BLOCK *****
  Version: MPL 1.1/GPL 2.0/LGPL 2.1
  
  The contents of this file are subject to the Mozilla Public License Version
  1.1 (the "License"); you may not use this file except in compliance with
  the License. You may obtain a copy of the License at
  http://www.mozilla.org/MPL/
  
  Software distributed under the License is distributed on an "AS IS" basis,
  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
  for the specific language governing rights and limitations under the
  License.
  
  The Original Code is Opus-College college module code.
  
  The Initial Developer of the Original Code is
  Center for Information Services, Radboud University Nijmegen.
  Portions created by the Initial Developer are Copyright (C) 2008
  the Initial Developer. All Rights Reserved.
  
  Contributor(s):
    For Java files, see Javadoc @author tags.
  
  Alternatively, the contents of this file may be used under the terms of
  either the GNU General Public License Version 2 or later (the "GPL"), or
  the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
  in which case the provisions of the GPL or the LGPL are applicable instead
  of those above. If you wish to allow use of your version of this file only
  under the terms of either the GPL or the LGPL, and not to allow others to
  use your version of this file under the terms of the MPL, indicate your
  decision by deleting the provisions above and replace them with the notice
  and other provisions required by the GPL or the LGPL. If you do not delete
  the provisions above, a recipient may use your version of this file under
  the terms of any one of the MPL, the GPL or the LGPL.
  
  ***** END LICENSE BLOCK *****
--><!--Converted at: Mon Dec 21 11:08:57 CET 2015-->
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="org.uci.opus.college.persistence.StudentMapper"> 

    <!--  RESULTMAPS -->

    <!-- resultmap with only the basic student properties (no collections) -->
    <resultMap id="BasicStudentResultMap" type="Student">
        <id property="studentId" column="studentId"/>
        <result property="id" column="id"/>
        <result property="personId" column="personId"/>
        <result property="personCode" column="personCode"/>
        <result property="studentCode" column="studentCode"/>
        <result property="registrationDate" column="registrationDate" javaType="java.util.Date"/>
        <result property="surnameFull" column="surnameFull"/>
        <result property="surnameAlias" column="surnameAlias"/>
        <result property="firstnamesFull" column="firstnamesFull"/>
        <result property="firstnamesAlias" column="firstnamesAlias"/>
        <result property="nationalRegistrationNumber" column="nationalRegistrationNumber"/>
        <result property="civilTitleCode" column="civilTitleCode"/>
        <result property="gradeTypeCode" column="gradeTypeCode"/> 
        <result property="genderCode" column="genderCode"/>
        <result property="birthdate" column="birthdate" javaType="java.util.Date"/>
        <result property="nationalityCode" column="nationalityCode"/>
        <result property="placeOfBirth" column="placeOfBirth"/>
        <result property="districtOfBirthCode" column="districtOfBirthCode"/>
        <result property="provinceOfBirthCode" column="provinceOfBirthCode"/>
        <result property="countryOfBirthCode" column="countryOfBirthCode"/>
        <result property="cityOfOrigin" column="cityOfOrigin"/>
        <result property="administrativePostOfOriginCode" column="administrativePostOfOriginCode"/>
        <result property="districtOfOriginCode" column="districtOfOriginCode"/>
        <result property="provinceOfOriginCode" column="provinceOfOriginCode"/>
        <result property="countryOfOriginCode" column="countryOfOriginCode"/>
        <result property="civilStatusCode" column="civilStatusCode"/>
        <result property="housingOnCampus" column="housingOnCampus"/>
        <result property="identificationTypeCode" column="identificationTypeCode"/>
        <result property="identificationNumber" column="identificationNumber"/>
        <result property="identificationPlaceOfIssue" column="identificationPlaceOfIssue"/>
        <result property="identificationDateOfIssue" column="identificationDateOfIssue" javaType="java.util.Date"/>
        <result property="identificationDateOfExpiration" column="identificationDateOfExpiration" javaType="java.util.Date"/>
        <result property="professionCode" column="professionCode"/>
        <result property="professionDescription" column="professionDescription"/>
        <result property="languageFirstCode" column="languageFirstCode"/>
        <result property="languageFirstMasteringLevelCode" column="languageFirstMasteringLevelCode"/>
        <result property="languageSecondCode" column="languageSecondCode"/>
        <result property="languageSecondMasteringLevelCode" column="languageSecondMasteringLevelCode"/>
        <result property="languageThirdCode" column="languageThirdCode"/>
        <result property="languageThirdMasteringLevelCode" column="languageThirdMasteringLevelCode"/>
        <result property="contactPersonEmergenciesName" column="contactPersonEmergenciesName"/>
        <result property="contactPersonEmergenciesTelephoneNumber" column="contactPersonEmergenciesTelephoneNumber"/>
        <result property="bloodTypeCode" column="bloodTypeCode"/>
        <result property="healthIssues" column="healthIssues"/>
        <result property="motivation" column="motivation"/>  
        <result property="publicHomepage" column="publicHomepage"/>
        <result property="socialNetworks" column="socialNetworks"/>
        <result property="hobbies" column="hobbies"/>
        <result property="active" column="active"/>
        <result property="photograph" column="photograph"/>
        <result property="photographName" column="photographName"/>
        <result property="photographMimeType" column="photographMimeType"/>      
        <result property="remarks" column="remarks"/>
        <result property="dateOfEnrolment" column="dateOfEnrolment" javaType="java.util.Date"/>
        <result property="primaryStudyId" column="primaryStudyId"/>
        <result property="expellationDate" column="expellationDate" javaType="java.util.Date"/>
        <result property="expellationEndDate" column="expellationEndDate" javaType="java.util.Date"/>
        <result property="expellationTypeCode" column="expellationTypeCode"/>
        <result property="reasonForExpellation" column="reasonForExpellation"/>
        <result property="previousInstitutionId" column="previousInstitutionId"/>
        <result property="previousInstitutionName" column="previousInstitutionName"/>
        <result property="previousInstitutionDistrictCode" column="previousInstitutionDistrictCode"/>
        <result property="previousInstitutionProvinceCode" column="previousInstitutionProvinceCode"/>
        <result property="previousInstitutionCountryCode" column="previousInstitutionCountryCode"/>
        <result property="previousInstitutionTypeCode" column="previousInstitutionTypeCode"/>
        <result property="previousInstitutionFinalGradeTypeCode" column="previousInstitutionFinalGradeTypeCode"/>
        <result property="previousInstitutionFinalMark" column="previousInstitutionFinalMark"/>
        <result property="previousInstitutionDiplomaPhotograph" column="previousInstitutionDiplomaPhotograph"/>
        <result property="previousInstitutionDiplomaPhotographName" column="previousInstitutionDiplomaPhotographName"/>
        <result property="previousInstitutionDiplomaPhotographMimeType" column="previousInstitutionDiplomaPhotographMimeType"/>
        <result property="previousInstitutionDiplomaPhotographRemarks" column="previousInstitutionDiplomaPhotographRemarks"/>
        <result property="scholarship" column="scholarship"/>
        <result property="fatherFullName" column="fatherFullName"/>
        <result property="fatherEducationCode" column="fatherEducationCode"/>
        <result property="fatherProfessionCode" column="fatherProfessionCode"/>
        <result property="fatherProfessionDescription" column="fatherProfessionDescription"/>
        <result property="fatherTelephone" column="fatherTelephone"/>
        <result property="motherFullName" column="motherFullName"/>
        <result property="motherEducationCode" column="motherEducationCode"/>
        <result property="motherProfessionCode" column="motherProfessionCode"/>
        <result property="motherProfessionDescription" column="motherProfessionDescription"/>
        <result property="motherTelephone" column="motherTelephone"/>
        <result property="financialGuardianFullName" column="financialGuardianFullName"/>
        <result property="financialGuardianRelation" column="financialGuardianRelation"/>
        <result property="financialGuardianProfession" column="financialGuardianProfession"/>
        <result property="missingDocuments" column="missingDocuments"/>
        <result property="sourceOfFunding" column="sourceOfFunding"/>
        <result property="subscriptionRequirementsFulfilled" column="subscriptionRequirementsFulfilled"/>
        <result property="secondaryStudyId" column="secondaryStudyId"/>
        <result property="foreignStudent" column="foreignStudent"/>
        <result property="nationalityGroupCode" column="nationalityGroupCode"/>
        <result property="relativeOfStaffMember" column="relativeOfStaffMember"/>
        <result property="employeeNumberOfRelative" column="employeeNumberOfRelative"/>
        <result property="ruralAreaOrigin" column="ruralAreaOrigin"/>
    </resultMap>


    <!-- resultmap to define complete student (including functions, contracts and addresses) -->
    <resultMap id="StudentResultMap" type="Student" extends="BasicStudentResultMap">
        <collection property="studyPlans" select="org.uci.opus.college.persistence.StudyplanMapper.findStudyPlansForStudent" column="studentId"/>
        <collection property="addresses" select="org.uci.opus.college.persistence.AddressMapper.findAddressesForStudent" column="personId"/>
        <collection property="studentAbsences" select="org.uci.opus.college.persistence.StudentAbsenceMapper.findStudentAbsencesForStudent" column="studentId"/>
        <collection property="studentStudentStatuses" select="org.uci.opus.college.persistence.StudentStudentStatusMapper.findStudentStudentStatusesForStudent" column="studentId"/>
        <collection property="studentActivities" select="org.uci.opus.college.persistence.NoteMapper.findStudentActivities" column="studentId"/>
        <collection property="studentCareers" select="org.uci.opus.college.persistence.NoteMapper.findStudentCareers" column="studentId"/>
        <collection property="studentPlacements" select="org.uci.opus.college.persistence.NoteMapper.findStudentPlacements" column="studentId"/>
        <collection property="studentCounselings" select="org.uci.opus.college.persistence.NoteMapper.findStudentCounselings" column="studentId"/>
        <collection property="classgroups" select="org.uci.opus.college.persistence.ClassgroupMapper.findClassgroupsForStudent" column="studentId"/>
    </resultMap>

    <!-- resultmap to define complete student, without sub-selects, but with inner result maps -->
    <resultMap id="StudentResultMap_WithCTUAndSubjectResults" type="Student" extends="BasicStudentResultMap">
        <collection property="studyPlans" resultMap="org.uci.opus.college.persistence.StudyplanMapper.StudyPlanResultMap_WithCTUAndSubjectResults"/>
    </resultMap>

    <!-- FRAGMENTS -->
    <sql id="findStudentsStudyAndAbove_fragment">
        <if test="institutionTypeCode != null">
	        and institution.institutionTypeCode = #{institutionTypeCode}
        </if>
        <if test='institutionId != null and institutionId != "0"'>
            and institution.id = #{institutionId}
        </if>
        <if test='branchId != null and branchId != "0"'>
            and   branch.id = #{branchId}
        </if>
        <if test='organizationalUnitId != null and organizationalUnitId != "0"'>
            and organizationalunit.id in (select id from opuscollege.crawl_tree(#{organizationalUnitId}, 0)) 
        </if>
        <if test='organizationalUnitIds != null and organizationalUnitIds.size() > 0'>
            and organizationalunit.id in 
            <foreach collection="organizationalUnitIds" item="item" separator="," close=")" open="(">
                #{item}
            </foreach>
        </if>
        <if test='studyId != null and studyId != "0"'>
            and study.id = #{studyId} 
        </if>
        <if test='studyIds != null and studyIds.size() > 0'>
            and opuscollege.study.id in
            <foreach collection="studyIds" item="item" separator="," close=")" open="(">
                #{item}
            </foreach>
        </if>
    </sql>

    <sql id="findStudents_fragment">
        from opuscollege.student
        INNER JOIN opuscollege.person ON student.personId = person.id
        <if test='studentStatusCode != null and studentStatusCode != "" and studentStatusCode != "0"'>
           	INNER JOIN opuscollege.studentStudentStatus on student.studentId = studentStudentStatus.studentId
        </if>
        <if test='studyPlanStatusCode != null and studyPlanStatusCode != "" and studyPlanStatusCode != "0"'>
	       	INNER JOIN opuscollege.studyplan on student.studentId = studyplan.studentId
            <if test='cardinalTimeUnitStatusCode != null and cardinalTimeUnitStatusCode != "" and cardinalTimeUnitStatusCode != "0"'>
	    	    INNER JOIN opuscollege.studyPlanCardinalTimeUnit on studyPlan.id = studyplanCardinalTimeUnit.studyPlanId
    	    </if>
   	    </if>
        <if test="classgroupId != null">
            INNER JOIN opuscollege.studygradetype ON studyPlanCardinalTimeUnit.studyGradeTypeId = studyGradeType.id
            INNER JOIN opuscollege.classgroup ON classgroup.studygradetypeid = studygradetype.id
            INNER JOIN opuscollege.studentclassgroup ON studentclassgroup.classgroupid = classgroup.id AND studentclassgroup.studentid = student.studentid
        </if>
        <!-- EXISTS is quicker than joins in this case, has been tried out 
             NB: brackets needed because of OR-combination of two EXISTS clauses -->
        WHERE (
            EXISTS (
                <!-- path 1: via studyplan -->
                SELECT 1 FROM opuscollege.studyplan 
                INNER JOIN opuscollege.studyPlanCardinalTimeUnit on studyPlan.id = studyplanCardinalTimeUnit.studyPlanId         
                INNER JOIN opuscollege.studygradetype ON studyPlanCardinalTimeUnit.studyGradeTypeId = studyGradeType.id                   
                INNER JOIN opuscollege.study on studygradetype.studyid = study.id         
                <!-- if studygradetyepeid not given -->
                INNER JOIN opuscollege.organizationalunit on study.organizationalUnitId = organizationalunit.id         
                INNER JOIN opuscollege.branch on branch.id = organizationalunit.branchId         
                INNER JOIN opuscollege.institution on institution.id = branch.institutionId         
                WHERE student.studentId = studyplan.studentId
                <include refid="findStudentsStudyAndAbove_fragment"/>
                <if test='studyGradeTypeId != null and studyGradeTypeId != "0"'>
                    and opuscollege.studyPlanCardinalTimeUnit.studyGradeTypeId = #{studyGradeTypeId} 
                </if>
                <if test='studyGradeTypeIds != null and studyGradeTypeIds.size() > 0'>
                    and studyPlanCardinalTimeUnit.studyGradeTypeId in
                    <foreach collection="studyGradeTypeIds" item="item" separator=","  open="(" close=")">
                        #{item}
                    </foreach>
                </if>
                <if test="cardinalTimeUnitNumber != null">
                        and opuscollege.studyPlanCardinalTimeUnit.cardinalTimeUnitNumber = #{cardinalTimeUnitNumber} 
                </if>
                <if test="classgroupId != null">
                    and classgroup.id = #{classgroupId}
                </if>
                <if test='studyPlanStatusCode != null and studyPlanStatusCode != "" and studyPlanStatusCode != "0"'>
                    and studyPlan.studyPlanStatusCode = #{studyPlanStatusCode}
                </if>
                <if test='cardinalTimeUnitStatusCode != null and cardinalTimeUnitStatusCode != "" and cardinalTimeUnitStatusCode != "0"'>
                    and studyPlanCardinalTimeUnit.cardinalTimeUnitStatusCode = #{cardinalTimeUnitStatusCode}
                </if>
            )
            <if test='(studyGradeTypeId == null or studyGradeTypeId == "0") and (studyGradeTypeIds == null or studyGradeTypeIds.size() == 0) and (cardinalTimeUnitNumber == null) and (classgroupId == null)'>
                <!-- path 2: via primaryStudyId - this only makes sense if no properties like studygradetype, cardinaltimeunitnumer are selected, which are not reachable via this route -->
                or exists (
                    SELECT 1 FROM opuscollege.study
                    INNER JOIN opuscollege.organizationalunit on study.organizationalunitid = organizationalunit.id
                    INNER JOIN opuscollege.branch on branch.id = organizationalunit.branchId         
                    INNER JOIN opuscollege.institution on institution.id = branch.institutionId         
                    WHERE student.primaryStudyId = study.id 
                    <include refid="findStudentsStudyAndAbove_fragment"/>
                )
            </if>
        )
        
        <if test='studentStatusCode != null and studentStatusCode != "" and studentStatusCode != "0"'>
            and studentStudentStatus.studentStatusCode = #{studentStatusCode}
        </if>
        <if test='genderCode != null and genderCode != "" and genderCode != "0"'>
            and person.genderCode = #{genderCode} 
        </if>
        <if test='relativeOfStaffMember != null and relativeOfStaffMember != ""'>
            and student.relativeOfStaffMember = #{relativeOfStaffMember}
        </if>
        <if test='ruralAreaOrigin != null and ruralAreaOrigin != ""'>
            and student.ruralAreaOrigin = #{ruralAreaOrigin}
        </if>
        <if test='foreignStudent != null and foreignStudent != ""'>
            and student.foreignStudent = #{foreignStudent}
        </if>
        <if test='searchValue != null and searchValue != ""'>
            and (
                opuscollege.remove_diacritics(
                    lower(studentcode) || ' ' || 
                    lower(person.firstnamesfull) || ' ' ||
                    lower(person.surnamefull)
                ) like opuscollege.remove_diacritics(lower('%' || #{searchValue} || '%'))
            )
        </if>
    </sql>

    <!-- find all Students -->
    <select id="findAllStudents" parameterType="map" resultType="Student"> 
        select * from opuscollege.student
        INNER JOIN opuscollege.person ON opuscollege.student.personId = opuscollege.person.id
        ORDER BY lower(person.surnameFull)
    </select>
    
    <select id="findStudents" parameterType="map" resultMap="StudentResultMap"> 
        select distinct person.*, student.*,
        lower(person.surnameFull),
        lower(person.firstnamesfull)
        <if test="offset == null">
            <include refid="findStudents_fragment"/>
        </if>
        <if test="offset != null">
            from opuscollege.student
            INNER JOIN opuscollege.person ON student.personId = person.id
            where trim(person.surnameFull || student.studentid) IN (
                select distinct (trim(person.surnameFull || student.studentid)) as col
                <include refid="findStudents_fragment"/>
                ORDER BY col
                offset ${offset}
                <if test="limit != null">
                    limit ${limit}
                </if>
            )
        </if>
        ORDER BY lower(person.surnameFull), lower(person.firstnamesfull)
    </select>

    <select id="findStudentCount" parameterType="map" resultType="int">
        SELECT COUNT(DISTINCT student.studentid) AS total
        <include refid="findStudents_fragment"/>
    </select>


    <select id="findStudents_WithCTUAndSubjectResults" parameterType="map" resultMap="StudentResultMap_WithCTUAndSubjectResults">
        select
                person.*
                , student.*
                , studyplan.id AS studyPlan_id
                , studyplan.studentid AS studyPlan_studentId
                , studyplan.studyid AS studyPlan_studyId
                , studyplan.minor1id AS studyPlan_minor1Id
                , studyplan.gradetypecode AS studyPlan_gradeTypeCode
                , studyplan.studyplandescription AS studyPlan_studyPlanDescription
                , studyplan.brspassingexam AS studyPlan_BRsPassingExam
                , studyPlan.missingDocuments AS studyPlan_missingDocuments
                , student.sourceOfFunding AS student_sourceOfFunding
                , studyplan.active AS studyPlan_active
                , studyplan.studyplanstatuscode AS studyPlan_studyPlanStatusCode
                , studyplan.applicantCategoryCode AS studyPlan_applicantCategoryCode
                , studyplan.applicationnumber AS studyPlan_applicationNumber
                , studyPlan.firstChoiceOnwardStudyId AS studyPlan_firstChoiceOnwardStudyId
                , studyPlan.firstChoiceOnwardGradeTypeCode AS studyPlan_firstChoiceOnwardGradeTypeCode
                , studyPlan.secondChoiceOnwardStudyId AS studyPlan_secondChoiceOnwardStudyId
                , studyPlan.secondChoiceOnwardGradeTypeCode AS studyPlan_secondChoiceOnwardGradeTypeCode
                , studyPlan.thirdChoiceOnwardStudyId AS studyPlan_thirdChoiceOnwardStudyId
                , studyPlan.thirdChoiceOnwardGradeTypeCode AS studyPlan_thirdChoiceOnwardGradeTypeCode
                , studyPlan.previousDisciplineCode AS studyPlan_previousDisciplineCode
                , studyPlan.previousDisciplineGrade AS studyplan_previousDisciplineGrade
                , studyplancardinaltimeunit.id AS studyPlanCardinalTimeUnit_id
                , studyplancardinaltimeunit.studyPlanId AS studyPlanCardinalTimeUnit_studyPlanId
                , studyplancardinaltimeunit.studyGradeTypeId AS studyPlanCardinalTimeUnit_studyGradeTypeId
                , studyplancardinaltimeunit.cardinalTimeUnitNumber AS studyPlanCardinalTimeUnit_cardinalTimeUnitNumber
                , studyplancardinaltimeunit.progressStatusCode AS studyPlanCardinalTimeUnit_progressStatusCode
                , studyplancardinaltimeunit.cardinalTimeUnitStatusCode AS studyPlanCardinalTimeUnit_cardinalTimeUnitStatusCode
                , studyplancardinaltimeunit.active AS studyPlanCardinalTimeUnit_active
                , studyplancardinaltimeunit.tuitionWaiver AS studyPlanCardinalTimeUnit_tuitionWaiver
                , studyplancardinaltimeunit.studyIntensityCode AS studyPlanCardinalTimeUnit_studyIntensityCode
                , cardinaltimeunitresult.id AS cardinalTimeUnitResult_id
                , cardinaltimeunitresult.studyPlanId AS cardinalTimeUnitResult_studyPlanId
                , cardinaltimeunitresult.studyPlanCardinalTimeUnitId AS cardinalTimeUnitResult_studyPlanCardinalTimeUnitId
                , cardinaltimeunitresult.cardinalTimeUnitResultDate AS cardinalTimeUnitResult_cardinalTimeUnitResultDate
                , cardinaltimeunitresult.mark AS cardinalTimeUnitResult_mark
                , cardinaltimeunitresult.endGradeComment AS cardinalTimeUnitResult_endGradeComment
                , cardinaltimeunitresult.active AS cardinalTimeUnitResult_active
                , cardinaltimeunitresult.passed AS cardinalTimeUnitResult_passed
                , studyplandetail.id AS studyPlanDetail_id
                , studyplandetail.studyPlanId AS studyPlanDetail_studyPlanId
                , studyplandetail.studyPlanCardinalTimeUnitId AS studyPlanDetail_studyPlanCardinalTimeUnitId
                , studyplandetail.subjectBlockId AS studyPlanDetail_subjectBlockId
                , studyplandetail.subjectId AS studyPlanDetail_subjectId
                , studyplandetail.studyGradeTypeId AS studyPlanDetail_studyGradeTypeId
                , studyplandetail.active AS studyPlanDetail_active
                , studyplandetail.exempted AS studyPlanDetail_exempted
                , requestforchange.id AS requestForChange_id
                , requestforchange.requestingUserId AS requestForChange_requestingUserId
                , requestforchange.respondingUserId AS requestForChange_respondingUserId
                , requestforchange.rfc AS requestForChange_text
                , requestforchange.comments AS requestForChange_comments
                , requestforchange.entityId AS requestForChange_entityId
                , requestforchange.entitytypecode AS requestForChange_entityType
                , requestforchange.rfcstatuscode AS requestForChange_statusCode
                , requestforchange.expirationDate AS requestForChange_expirationDate
                , requestforchange.active AS requestForChange_active
                , requestforchange.writeWho AS requestForChange_writeWho
                , requestforchange.writeWhen AS requestForChange_writeWhen
                , subjectresult.id AS subjectResult_id
                , subjectresult.subjectId AS subjectResult_subjectId
                , subjectresult.studyPlanDetailId AS subjectResult_studyPlanDetailId
                , subjectresult.subjectResultDate AS subjectResult_subjectResultDate
                , subjectresult.mark AS subjectResult_mark
                , subjectResult.subjectResultCommentId AS subjectResult_subjectResultCommentId
                , subjectresult.endGradeComment AS subjectResult_endGradeComment
                , subjectresult.staffMemberId AS subjectResult_staffMemberId
                , subjectresult.active AS subjectResult_active
                , subjectresult.passed AS subjectResult_passed
                , subject.id AS subject_id
                , subject.subjectCode AS subject_subjectCode
                , subject.subjectDescription AS subject_subjectDescription
                , subject.subjectContentDescription AS subject_subjectContentDescription
                , subject.primaryStudyId AS subject_primaryStudyId
                , subject.active AS subject_active
                , subject.targetGroupCode AS subject_targetGroupCode
                , subject.freeChoiceOption AS subject_freeChoiceOption
                , subject.creditAmount AS subject_creditAmount
                , subject.hoursToInvest AS subject_hoursToInvest
                , subject.frequencyCode AS subject_frequencyCode
                , subject.studyTimeCode AS subject_studyTimeCode
                , subject.examTypeCode AS subject_examTypeCode
                , subject.maximumParticipants AS subject_maximumParticipants
                , subject.brsPassingSubject AS subject_brsPassingSubject
                , subject.currentAcademicYearId AS subject_currentAcademicYearId
                , subject.resultType AS subject_resultType
        FROM opuscollege.student
        INNER JOIN opuscollege.person ON student.personId = person.id
        INNER JOIN opuscollege.studyplan on student.studentId = studyplan.studentId
        INNER JOIN opuscollege.studyPlanCardinalTimeUnit on studyPlan.id = studyplanCardinalTimeUnit.studyPlanId
        LEFT OUTER JOIN opuscollege.cardinaltimeunitresult on cardinaltimeunitresult.studyplancardinaltimeunitid = studyPlanCardinalTimeUnit.id
        LEFT OUTER JOIN opuscollege.studyplandetail on studyplandetail.studyplancardinaltimeunitid = studyplanCardinalTimeUnit.id
        LEFT OUTER JOIN opuscollege.requestforchange on requestforchange.entitytypecode = 'studyplancardinaltimeunit' 
                                                    and requestforchange.entityId = studyplanCardinalTimeUnit.id
                                                    and (requestforchange.expirationDate is null or requestforchange.expirationDate &gt;= now()::date)
        LEFT OUTER JOIN opuscollege.subjectblock on studyplandetail.subjectblockid = subjectblock.id
        LEFT OUTER JOIN opuscollege.subjectsubjectblock ON subjectsubjectblock.subjectblockid = subjectblock.id
        LEFT OUTER JOIN opuscollege.subject ON (subjectsubjectblock.subjectid = subject.id OR subject.id = studyplandetail.subjectid)
        LEFT OUTER JOIN opuscollege.subjectresult on subjectresult.studyplandetailid = studyplandetail.id AND subjectresult.subjectid = subject.id
        INNER JOIN opuscollege.studyGradeType on studyPlanCardinalTimeUnit.studygradetypeid = studyGradeType.id
        INNER JOIN opuscollege.study on studyGradeType.studyId = study.id
        INNER JOIN opuscollege.organizationalunit on study.organizationalUnitId = organizationalunit.id
        INNER JOIN opuscollege.branch on branch.id = organizationalunit.branchId
        INNER JOIN opuscollege.institution on institution.id = branch.institutionId
        WHERE true
        <if test='studyplanStatusCode != null and studyplanStatusCode != ""'>
            and studyplan.studyplanstatuscode = #{studyplanStatusCode}
        </if>
        <if test='studyplanStatusCodes != null and studyplanStatusCodes.size() > 0'>
            and studyplan.studyplanstatuscode in
             <foreach collection="studyplanStatusCodes" item="item" separator="," close=")" open="(">
                #{item}
            </foreach>
        </if>
        <if test='cardinalTimeUnitStatusCode != null and cardinalTimeUnitStatusCode != ""'>
            and studyPlanCardinalTimeUnit.cardinalTimeUnitStatusCode = #{cardinalTimeUnitStatusCode}
        </if>
        <if test='cardinalTimeUnitStatusCodes != null and cardinalTimeUnitStatusCodes.size() > 0'>
            and studyPlanCardinalTimeUnit.cardinalTimeUnitStatusCode in
             <foreach collection="cardinalTimeUnitStatusCodes" item="item" separator="," close=")" open="(">
                #{item}
            </foreach>
        </if>
        <if test='institutionId != null and institutionId != "0"'>
            and institution.id = #{institutionId}
        </if>
        <if test='branchId != null and branchId != "0"'>
            and   branch.id = #{branchId}
        </if>
        <if test='organizationalUnitId != null and organizationalUnitId != "0"'>
            and organizationalunit.id in (select id from opuscollege.crawl_tree(#{organizationalUnitId}, 0))
        </if>
        <if test='studyId != null and studyId != "0"'>
            and opuscollege.study.id = #{studyId} 
        </if>
        <if test='studyGradeTypeId != null and studyGradeTypeId != "0"'>
            and opuscollege.studyPlanCardinalTimeUnit.studyGradeTypeId = #{studyGradeTypeId} 
        </if>
        <if test="cardinalTimeUnitNumber != null">
            and studyPlanCardinalTimeUnit.cardinalTimeUnitNumber = #{cardinalTimeUnitNumber} 
        </if>
        <if test="noHigherCardinalTimeUnitNumbers == &quot;Y&quot;">
            and not exists (
                select * from opuscollege.studyPlanCardinalTimeUnit innerSPCTU
                where innerSPCTU.studyplanid = studyplan.id
                and   innerSPCTU.cardinalTimeUnitNumber &gt; #{cardinalTimeUnitNumber}
            )
        </if>
        <if test='nonExistingAcademicYearIds != null and nonExistingAcademicYearIds.size() > 0'>
            and not exists (
                select * from opuscollege.studyPlan innerStudyPlan
                inner join opuscollege.studyPlanCardinalTimeUnit innerSPCTU on innerSPCTU.studyplanid = innerStudyPlan.id
                inner join opuscollege.studyGradeType innerSGT on innerSPCTU.studygradetypeid = innerSGT.id
                inner join opuscollege.progressstatus innerProgStat on studyPlanCardinalTimeUnit.progressStatusCode = innerProgStat.code
                            and innerProgStat.lang = #{preferredLanguage}
                where innerProgStat.graduating = 'Y'
                and   innerStudyPlan.studentid = studyplan.studentid
                and   innerSGT.currentacademicyearid in
                <foreach collection="nonExistingAcademicYearIds" item="item" separator="," close=")" open="(">
                  #{item}
                </foreach>
            )
            and not exists (
                select * from opuscollege.studyPlanCardinalTimeUnit innerSPCTU
                inner join opuscollege.studyGradeType innerSGT on innerSPCTU.studygradetypeid = innerSGT.id
                inner join opuscollege.progressstatus innerProgStat on studyPlanCardinalTimeUnit.progressStatusCode = innerProgStat.code
                            and innerProgStat.lang = #{preferredLanguage}
                where innerProgStat.graduating = 'N'
                and   innerSPCTU.studyplanid = studyplan.id
                and   innerSGT.currentacademicyearid in
                <foreach collection="nonExistingAcademicYearIds" item="item" separator="," close=")" open="(">
                  #{item}
                </foreach>
            )
        </if>
        <if test="personId != null">
            and person.id = #{personId} 
        </if>
        <if test="rfcStatusCodeOrNull != null">
            and (requestforchange.rfcstatuscode is null or requestforchange.rfcstatuscode = #{rfcStatusCodeOrNull})
        </if>
        <if test='searchValue != null and searchValue != ""'>
            and ( opuscollege.remove_diacritics(lower(studentcode))
                || ' ' || opuscollege.remove_diacritics(lower(person.firstnamesfull))
                || ' ' || opuscollege.remove_diacritics(lower(person.surnamefull))
                like opuscollege.remove_diacritics(lower('%' || #{searchValue} || '%'))
                )
        </if>
        ORDER BY person.${preferredPersonSorting}, subjectResult_subjectResultDate, requestForChange.writeWhen DESC
    </select>

    <!-- find one Student by id-->
    <select id="findStudent" parameterType="map" resultMap="StudentResultMap">
        select  opuscollege.student.*,
                opuscollege.person.*
        from opuscollege.student
        INNER JOIN opuscollege.person ON opuscollege.student.personId = opuscollege.person.id
        WHERE opuscollege.student.studentId = #{studentId}
    </select>

    <!-- Return a plain Student object, so that no preferrredLanguage parameter is necessary -->
    <select id="findPlainStudent" parameterType="int" resultMap="BasicStudentResultMap">
        select  opuscollege.student.*,
                opuscollege.person.*
        from opuscollege.student
        INNER JOIN opuscollege.person ON opuscollege.student.personId = opuscollege.person.id
        WHERE opuscollege.student.studentId = #{studentId}
    </select>

    <select id="findPlainStudentByStudyPlanCtuId" parameterType="int" resultMap="BasicStudentResultMap">
        select  student.*,
                person.*
        from opuscollege.student
        INNER JOIN opuscollege.person ON student.personId = person.id
        INNER JOIN opuscollege.studyPlan ON student.studentId = studyPlan.studentId
        INNER JOIN opuscollege.studyPlanCardinalTimeUnit ON studyPlan.id = studyPlanCardinalTimeUnit.studyPlanId
        WHERE studyPlanCardinalTimeUnit.id = #{value}
    </select>

    <!-- find one Student by code-->
    <select id="findStudentByCode" parameterType="map" resultMap="StudentResultMap">
        select  opuscollege.student.*,
                opuscollege.person.*
        from opuscollege.student
        INNER JOIN opuscollege.person ON opuscollege.student.personId = opuscollege.person.id
        WHERE opuscollege.student.studentCode = #{studentCode}
    </select>

	<select id="alreadyExistsStudentCode" parameterType="map" resultType="boolean">
		SELECT EXISTS (
			SELECT 1 FROM opuscollege.student
			WHERE studentCode = #{studentCode} AND studentId != #{studentId}
		)
    </select>

    <!-- find one Student with a personId -->
    <select id="findStudentByPersonId" parameterType="int" resultMap="StudentResultMap">
        select  opuscollege.student.*,
                opuscollege.person.*
        from opuscollege.student
        INNER JOIN opuscollege.person ON opuscollege.student.personId = opuscollege.person.id
        WHERE opuscollege.student.personId = #{personId}
    </select>

    <!-- find one Student with a studentId -->
    <select id="findStudentByStudentId" parameterType="int" resultMap="StudentResultMap">
        select  opuscollege.student.*,
                opuscollege.person.*
        from opuscollege.student
        INNER JOIN opuscollege.person ON opuscollege.student.personId = opuscollege.person.id
        WHERE opuscollege.student.studentId = #{value}
    </select>

    <!-- find one Student by several parameters -->
    <select id="findStudentByParams" parameterType="map" resultMap="StudentResultMap">
        SELECT  opuscollege.student.*,
                opuscollege.person.*
        FROM    opuscollege.student
        INNER JOIN opuscollege.person ON opuscollege.student.personId = opuscollege.person.id
        WHERE   surnameFull = #{surnameFull}
        AND     firstNamesFull = #{firstNamesFull}
        AND     birthdate = #{birthdate} 
        AND     primaryStudyId = #{primaryStudyId}
        <if test='nationalRegistrationNumber != null and nationalRegistrationNumber != ""'>
            AND nationalRegistrationNumber = #{nationalRegistrationNumber}
        </if>
        <if test='studentCode != null and studentCode != ""'>
            AND  studentCode = #{studentCode}
        </if>
    </select>

    <select id="findStudentByParams2" parameterType="map" resultMap="StudentResultMap">
        SELECT  opuscollege.student.*,
                opuscollege.person.*
        FROM    opuscollege.student
        INNER JOIN opuscollege.person ON opuscollege.student.personId = opuscollege.person.id
        WHERE   true
        <if test='studentCode != null and studentCode != ""'>
            AND  studentCode = #{studentCode}
        </if>
        <if test='surnameFull != null and surnameFull != ""'>
            AND surnameFull = #{surnameFull}
        </if>
        <if test='firstNamesFull != null and firstNamesFull != ""'>
            AND firstNamesFull = #{firstNamesFull}
        </if>
        <if test='birthdate != null'>
            AND birthdate = #{birthdate}
        </if>
        <if test='primaryStudyId != null'>
            AND primaryStudyId = #{primaryStudyId}
        </if>
        <if test='studentId != null'>
            AND student.studentId = #{studentId}
        </if>
    </select>

    <select id="findStudentsByStudyGradeAcademicYear" parameterType="map" resultMap="StudentResultMap"> 
        SELECT  person.*,
                student.*,
                institution.institutionDescription,
                branch.branchDescription,
                organizationalUnit.organizationalUnitDescription,
                study.id,
                study.studyDescription   
        FROM
	     "opuscollege"."person" person INNER JOIN "opuscollege"."student" student ON person."id" = student."personid"
	     LEFT OUTER JOIN "opuscollege"."studyplan" studyplan ON student."studentid" = studyplan."studentid"
	     LEFT OUTER JOIN "opuscollege"."studyplancardinaltimeunit" studyplancardinaltimeunit ON studyplan."id" = studyplancardinaltimeunit."studyplanid"
	     LEFT OUTER JOIN "opuscollege"."studygradetype" studygradetype ON studyplancardinaltimeunit."studygradetypeid" = studygradetype."id"
	     LEFT OUTER JOIN "opuscollege"."studyplandetail" studyplandetail ON studyplan."id" = studyplandetail."studyplanid"
	    <!--   LEFT OUTER JOIN "opuscollege"."studyyear" studyyear ON studyplandetail."studyyearid" = studyyear."id"
	     AND studyyear."studygradetypeid" = studygradetype."id" -->
	     LEFT OUTER JOIN "opuscollege"."study" study ON studygradetype."studyid" = study."id"
	     OR study."id" = student."primarystudyid"
	     LEFT OUTER JOIN opuscollege.organizationalunit ON study.organizationalunitid = organizationalunit.id
	     LEFT OUTER JOIN "opuscollege"."branch" branch ON organizationalunit."branchid" = branch."id"
	     LEFT OUTER JOIN "opuscollege"."institution" institution ON branch."institutionid" = institution."id"
	    WHERE true
        <if test="institutionTypeCode != null">
		    AND institution.institutionTypeCode = #{institutionTypeCode}
	    </if>
        <if test='institutionId != null'>
            AND institution."id" = #{institutionId}
        </if>
        <if test='branchId != null'>
            AND branch."id" = #{branchId}
        </if>
        <if test='organizationalUnitId != null'>
            AND organizationalunit.id in (SELECT id FROM opuscollege.crawl_tree(#{organizationalUnitId}, 0))
        </if>
        <if test='studyId != null'>
            AND study."id" = #{studyId}
        </if>
        <if test='academicYearId != null'>
            AND studygradetype.currentAcademicYearId = #{academicYearId} 
        </if>
        <if test='studyGradeTypeId != null'>
            AND studygradetype."id" = #{studyGradeTypeId}
        </if>
        <if test='searchValue != null and searchValue != ""'>
            AND   
            ( 
            opuscollege.remove_diacritics(${searchField}) ILIKE opuscollege.remove_diacritics('%' || #{searchValue} || '%')
            )
       </if>
       
<!--TODO: implement on studentStudentStatus table
       <isNotEmpty  property='studentStatusCode' >
        AND student.statusCode = #{statusCode}
       </isNotEmpty>-->

        <if test='orderBy != null and orderBy != ""'>
            ORDER BY lower(${orderBy})
        </if>
        <if test='orderBy == null or orderBy == ""'>
            ORDER BY lower(person.surnameFull)
        </if>

    </select>

    <!-- find one Student by id-->
    <select id="findIdentificationNumberByStudyPlanId" parameterType="int" resultType="String">
        select  person.identificationNumber
        from opuscollege.student
        INNER JOIN opuscollege.person ON student.personId = person.id
        INNER JOIN opuscollege.studyPlan ON studyPlan.studentId = student.studentId
        WHERE studyPlan.id = #{studyPlanId}
    </select>


    <insert id="addStudent" parameterType="Student">
        INSERT INTO opuscollege.student (
                personId
        ,       studentCode 
        ,       dateOfEnrolment
        ,       primaryStudyId
<!--        ,       statusCode-->
        ,       expellationDate
        ,       expellationEndDate
        ,       expellationTypeCode
        ,       reasonForExpellation
        ,       previousInstitutionId
        ,       previousInstitutionName
        ,       previousInstitutionDistrictCode
        ,       previousInstitutionProvinceCode
        ,       previousInstitutionCountryCode
        ,       previousInstitutionTypeCode
        ,       previousInstitutionFinalGradeTypeCode
        ,       previousInstitutionFinalMark
        ,       previousInstitutionDiplomaPhotograph 
        ,       previousInstitutionDiplomaPhotographName 
        ,       previousInstitutionDiplomaPhotographMimeType
        ,       previousInstitutionDiplomaPhotographRemarks
        ,       scholarship
        ,       fatherFullName
        ,       fatherEducationCode
        ,       fatherProfessionCode
        ,       fatherProfessionDescription
        ,       motherFullName
        ,       motherEducationCode
        ,       motherProfessionCode
        ,       motherProfessionDescription
        ,       financialGuardianFullName
        ,       financialGuardianRelation
        ,       financialGuardianProfession
        ,       missingDocuments
        ,		sourceOfFunding                        
        ,       subscriptionRequirementsFulfilled
        ,       secondaryStudyId
        ,       foreignStudent
        ,       nationalityGroupCode
        ,       relativeOfStaffMember
        ,       employeeNumberOfRelative
        ,       ruralAreaOrigin
        ) VALUES (
                #{personId}
        ,       #{studentCode}
        ,       #{dateOfEnrolment}
        ,       #{primaryStudyId}
<!--        ,       #{statusCode}-->
        ,       #{expellationDate}
        ,       #{expellationEndDate}
        ,       #{expellationTypeCode}
        ,       #{reasonForExpellation}
        ,       #{previousInstitutionId}
        ,       #{previousInstitutionName}
        ,       #{previousInstitutionDistrictCode}
        ,       #{previousInstitutionProvinceCode}
        ,       #{previousInstitutionCountryCode}
        ,       #{previousInstitutionTypeCode}
        ,       #{previousInstitutionFinalGradeTypeCode}
        ,       #{previousInstitutionFinalMark}
        ,       #{previousInstitutionDiplomaPhotograph} 
        ,       #{previousInstitutionDiplomaPhotographName} 
        ,       #{previousInstitutionDiplomaPhotographMimeType}
        ,       #{previousInstitutionDiplomaPhotographRemarks}
        ,       #{scholarship}
        ,       #{fatherFullName}
        ,       #{fatherEducationCode}
        ,       #{fatherProfessionCode}
        ,       #{fatherProfessionDescription}
        ,       #{motherFullName}
        ,       #{motherEducationCode}
        ,       #{motherProfessionCode}
        ,       #{motherProfessionDescription}
        ,       #{financialGuardianFullName}
        ,       #{financialGuardianRelation}
        ,       #{financialGuardianProfession}
        ,       #{missingDocuments}
        ,		#{sourceOfFunding}
        ,       #{subscriptionRequirementsFulfilled}
        ,       #{secondaryStudyId}
        ,       #{foreignStudent}
        ,       #{nationalityGroupCode}
        ,       #{relativeOfStaffMember}
        ,       #{employeeNumberOfRelative}
        ,       #{ruralAreaOrigin}
        )
        <selectKey keyProperty="studentId" resultType="int">
            SELECT currVal('opuscollege.studentseq')
        </selectKey>
    </insert>

<insert id="addStudentHistory" parameterType="map">
        INSERT INTO audit.student_hist (
        		operation
        , 		writeWho
        ,		studentId        
        ,        personId
        ,       studentCode 
        ,       dateOfEnrolment
        ,       primaryStudyId
<!--        ,       statusCode-->
        ,       expellationDate
        ,       expellationEndDate
        ,       expellationTypeCode
        ,       reasonForExpellation
        ,       previousInstitutionId
        ,       previousInstitutionName
        ,       previousInstitutionDistrictCode
        ,       previousInstitutionProvinceCode
        ,       previousInstitutionCountryCode
        ,       previousInstitutionTypeCode
        ,       previousInstitutionFinalGradeTypeCode
        ,       previousInstitutionFinalMark
        ,       previousInstitutionDiplomaPhotograph 
        ,       previousInstitutionDiplomaPhotographName 
        ,       previousInstitutionDiplomaPhotographMimeType
        ,       previousInstitutionDiplomaPhotographRemarks
        ,       scholarship
        ,       fatherFullName
        ,       fatherEducationCode
        ,       fatherProfessionCode
        ,       fatherProfessionDescription
        ,       motherFullName
        ,       motherEducationCode
        ,       motherProfessionCode
        ,       motherProfessionDescription
        ,       financialGuardianFullName
        ,       financialGuardianRelation
        ,       financialGuardianProfession
        ,       subscriptionRequirementsFulfilled
        ,       secondaryStudyId
        ,       foreignStudent
        ,       nationalityGroupCode
        ,       relativeOfStaffMember
        ,       employeeNumberOfRelative
        ,       ruralAreaOrigin
        
        <!-- person fields -->
        ,   id
        ,   personCode
        ,   surnameFull
        ,   surnameAlias
        ,   firstnamesFull
        ,   firstnamesAlias
        ,   nationalRegistrationNumber
        ,   civilTitleCode
        ,   gradeTypeCode
        ,   genderCode
        ,   birthdate
        ,   nationalityCode
        ,   placeOfBirth
        ,   districtOfBirthCode
        ,   provinceOfBirthCode
        ,   countryOfBirthCode
        ,   cityOfOrigin
        ,   administrativePostOfOriginCode
        ,   districtOfOriginCode           
        ,   provinceOfOriginCode      
        ,   countryOfOriginCode     
        ,   civilStatusCode    
        ,   housingOnCampus   
        ,   identificationTypeCode  
        ,   identificationNumber   
        ,   identificationPlaceOfIssue 
        ,   identificationDateOfIssue   
        ,   identificationDateOfExpiration   
        ,   professionCode   
        ,   professionDescription   
        ,   languageFirstCode   
        ,   languageFirstMasteringLevelCode  
        ,   languageSecondCode   
        ,   languageSecondMasteringLevelCode  
        ,   languageThirdCode   
        ,   languageThirdMasteringLevelCode  
        ,   contactPersonEmergenciesName 
        ,   contactPersonEmergenciesTelephoneNumber 
        ,   bloodTypeCode
        ,   healthIssues 
        ,   motivation
        ,   publicHomepage
        ,   socialNetworks
        ,   hobbies
        ,   active       
       ,	remarks
        
        
        ) VALUES (
         		#{operation}
        ,		#{Student.writeWho}		
        ,		#{Student.studentId}
        ,       #{Student.personId}
        ,       #{Student.studentCode}
        ,       #{Student.dateOfEnrolment}
        ,       #{Student.primaryStudyId}
<!--        ,       #{Student.statusCode}-->
        ,       #{Student.expellationDate}
        ,       #{Student.expellationEndDate}
        ,       #{Student.expellationTypeCode}
        ,       #{Student.reasonForExpellation}
        ,       #{Student.previousInstitutionId}
        ,       #{Student.previousInstitutionName}
        ,       #{Student.previousInstitutionDistrictCode}
        ,       #{Student.previousInstitutionProvinceCode}
        ,       #{Student.previousInstitutionCountryCode}
        ,       #{Student.previousInstitutionTypeCode}
        ,       #{Student.previousInstitutionFinalGradeTypeCode}
        ,       #{Student.previousInstitutionFinalMark}
        ,       #{Student.previousInstitutionDiplomaPhotograph} 
        ,       #{Student.previousInstitutionDiplomaPhotographName} 
        ,       #{Student.previousInstitutionDiplomaPhotographMimeType}
        ,       #{Student.previousInstitutionDiplomaPhotographRemarks}
        ,       #{Student.scholarship}
        ,       #{Student.fatherFullName}
        ,       #{Student.fatherEducationCode}
        ,       #{Student.fatherProfessionCode}
        ,       #{Student.fatherProfessionDescription}
        ,       #{Student.motherFullName}
        ,       #{Student.motherEducationCode}
        ,       #{Student.motherProfessionCode}
        ,       #{Student.motherProfessionDescription}
        ,       #{Student.financialGuardianFullName}
        ,       #{Student.financialGuardianRelation}
        ,       #{Student.financialGuardianProfession}
        ,       #{Student.subscriptionRequirementsFulfilled}
        ,       #{Student.secondaryStudyId}
        ,       #{Student.foreignStudent}
        ,       #{Student.nationalityGroupCode}
        ,       #{Student.relativeOfStaffMember}
        ,       #{Student.employeeNumberOfRelative}
        ,       #{Student.ruralAreaOrigin}
        
        <!-- person fields -->
        ,	#{Student.id}        
        ,   #{Student.personCode}
        ,   #{Student.surnameFull}
        ,   #{Student.surnameAlias}
        ,   #{Student.firstnamesFull}
        ,   #{Student.firstnamesAlias}
        ,   #{Student.nationalRegistrationNumber}
        ,   #{Student.civilTitleCode}
        ,   #{Student.gradeTypeCode}
        ,   #{Student.genderCode}
        ,   #{Student.birthdate}
        ,   #{Student.nationalityCode}
        ,   #{Student.placeOfBirth}
        ,   #{Student.districtOfBirthCode}
        ,   #{Student.provinceOfBirthCode}
        ,   #{Student.countryOfBirthCode}
        ,   #{Student.cityOfOrigin}
        ,   #{Student.administrativePostOfOriginCode}
        ,   #{Student.districtOfOriginCode}
        ,   #{Student.provinceOfOriginCode}
        ,   #{Student.countryOfOriginCode}
        ,   #{Student.civilStatusCode}
        ,   #{Student.housingOnCampus}
        ,   #{Student.identificationTypeCode}
        ,   #{Student.identificationNumber}
        ,   #{Student.identificationPlaceOfIssue}
        ,   #{Student.identificationDateOfIssue}
        ,   #{Student.identificationDateOfExpiration}
        ,   #{Student.professionCode}
        ,   #{Student.professionDescription}  
        ,   #{Student.languageFirstCode}   
        ,   #{Student.languageFirstMasteringLevelCode} 
        ,   #{Student.languageSecondCode}
        ,   #{Student.languageSecondMasteringLevelCode}
        ,   #{Student.languageThirdCode}
        ,   #{Student.languageThirdMasteringLevelCode}
        ,   #{Student.contactPersonEmergenciesName}
        ,   #{Student.contactPersonEmergenciesTelephoneNumber}
        ,   #{Student.bloodTypeCode}
        ,   #{Student.healthIssues}
        ,   #{Student.motivation}
        ,   #{Student.publicHomepage}
        ,   #{Student.socialNetworks}
        ,   #{Student.hobbies}
        ,   #{Student.active}       
       ,	#{Student.remarks}
        )
    </insert>


    <!-- apparently unused, commented during MyBatis migration:   retrieves academic years from table academicyear -->
<!--      <select id="findAcademicYears" parameterType="String" resultType="Lookup"> -->
<!--         SELECT id -->
<!--                ,description -->
<!--                ,active -->
<!--                FROM  opuscollege.academicYear -->
<!--         WHERE true -->
        
<!--         <if test="active != null"> -->
<!--             AND academicyear.active=#{active} -->
<!--         </if> -->
<!--     </select> -->
    


    <update id="updateStudent" parameterType="Student">
        UPDATE  opuscollege.student
        SET     studentCode                             = #{studentCode}
        ,       dateOfEnrolment                         = #{dateOfEnrolment}
        ,       primaryStudyId                          = #{primaryStudyId}
        ,       expellationDate                         = #{expellationDate}
        ,       expellationEndDate                      = #{expellationEndDate}
        ,       expellationTypeCode                     = #{expellationTypeCode}
        ,       reasonForExpellation                    = #{reasonForExpellation}
        ,       previousInstitutionId                   = #{previousInstitutionId}
        ,       previousInstitutionName                 = #{previousInstitutionName}
        ,       previousInstitutionDistrictCode         = #{previousInstitutionDistrictCode}
        ,       previousInstitutionProvinceCode         = #{previousInstitutionProvinceCode}
        ,       previousInstitutionCountryCode          = #{previousInstitutionCountryCode}
        ,       previousInstitutionTypeCode             = #{previousInstitutionTypeCode}
        ,       previousInstitutionFinalGradeTypeCode   = #{previousInstitutionFinalGradeTypeCode}
        ,       previousInstitutionFinalMark            = #{previousInstitutionFinalMark}
       <!--  ,  previousInstitutionDiplomaPhotograph    = #{previousInstitutionDiplomaPhotograph} -->
       <!--  ,  previousInstitutionDiplomaPhotographName = #{previousInstitutionDiplomaPhotographName} -->
       <!--  ,  previousInstitutionDiplomaPhotographMimeType = #{previousInstitutionDiplomaPhotographMimeType} -->
        ,       previousInstitutionDiplomaPhotographRemarks = #{previousInstitutionDiplomaPhotographRemarks}
        ,       scholarship                             = #{scholarship}
        ,       fatherFullName                          = #{fatherFullName}
        ,       fatherEducationCode                     = #{fatherEducationCode}
        ,       fatherProfessionCode                    = #{fatherProfessionCode}
        ,       fatherProfessionDescription             = #{fatherProfessionDescription}
        ,       fatherTelephone                         = #{fatherTelephone}
        ,       motherFullName                          = #{motherFullName}
        ,       motherEducationCode                     = #{motherEducationCode}
        ,       motherProfessionCode                    = #{motherProfessionCode}
        ,       motherProfessionDescription             = #{motherProfessionDescription}
        ,       motherTelephone                         = #{motherTelephone}
        ,       financialGuardianFullName               = #{financialGuardianFullName}
        ,       financialGuardianRelation               = #{financialGuardianRelation}
        ,       financialGuardianProfession             = #{financialGuardianProfession}
        ,       missingDocuments                        = #{missingDocuments}
        ,		sourceOfFunding							= #{sourceOfFunding}
        ,       subscriptionRequirementsFulfilled       = #{subscriptionRequirementsFulfilled}
        ,       secondaryStudyId                        = #{secondaryStudyId}
        ,       foreignStudent	                        = #{foreignStudent}
        ,       nationalityGroupCode                    = #{nationalityGroupCode}
        ,       relativeOfStaffMember                   = #{relativeOfStaffMember}
        ,       employeeNumberOfRelative                = #{employeeNumberOfRelative}
        ,       ruralAreaOrigin                         = #{ruralAreaOrigin}
        WHERE   studentId = #{studentId}
    </update>

    <delete id="deleteStudent" parameterType="int">
        DELETE FROM opuscollege.student
        WHERE   studentId   = #{value}
    </delete>


    <update id="updatePreviousInstitutionDiplomaPhotograph" parameterType="Student">
        UPDATE  opuscollege.student
        SET previousInstitutionDiplomaPhotograph = #{previousInstitutionDiplomaPhotograph}
            ,previousInstitutionDiplomaPhotographName = #{previousInstitutionDiplomaPhotographName}
            ,previousInstitutionDiplomaPhotographMimeType = #{previousInstitutionDiplomaPhotographMimeType}
        WHERE   personId     = #{personId}
    </update>       
    

    <select id="findPersonId" parameterType="int" resultType="int">
        SELECT  student.personid
        FROM    opuscollege.student
        WHERE   studentid = #{value}
    </select>



    <!-- select id="findDisciplineForStudyPlan" parameterClass="int" resultClass="Lookup">
        select  *
        from    opusCollege.discipline
        inner   join opusCollege.studyPlan on studyPlan.previousdisciplineCode = discipline.code 
        where   lang = #{preferredLanguage}
        and     studyPlan.id = #{value}
    </select -->
    


    <select id="findStudentIdForStudyPlanDetailId" parameterType="int" resultType="int">
        select studentid 
        from opuscollege.studyplandetail
        inner join opuscollege.studyplancardinaltimeunit on studyplandetail.studyplancardinaltimeunitid = studyplancardinaltimeunit.id
        inner join opuscollege.studyplan on studyplancardinaltimeunit.studyplanid = studyplan.id
        where studyplandetail.id = #{value}
    </select>    


    <select id="findStudentIdForStudyPlanCardinalTimeUnitId" parameterType="int" resultType="int">
        select studentid 
        from opuscollege.studyplancardinaltimeunit
        inner join opuscollege.studyplan on studyplancardinaltimeunit.studyplanid = studyplan.id
        where studyplancardinaltimeunit.id = #{value}
    </select>    

    <select id="findStudentIdForStudentCode" parameterType="String" resultType="int">
        select studentId 
        from opuscollege.student
        where studentCode = #{value}
    </select>    

    <select id="findStudentCodeForStudentId" parameterType="int" resultType="String">
        select studentCode
        from opuscollege.student
        where studentId = #{value}
    </select>    

    <select id="hasStudentCode" parameterType="int" resultType="boolean">
        select studentCode is not null
        from opuscollege.student
        where studentId = #{studentId}
    </select>

</mapper>