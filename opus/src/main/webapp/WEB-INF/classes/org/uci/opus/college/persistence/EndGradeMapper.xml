<?xml version="1.0" encoding="UTF-8"?><!--
  ***** BEGIN LICENSE BLOCK *****
  Version: MPL 1.1/GPL 2.0/LGPL 2.1
  
  The contents of this file are subject to the Mozilla Public License Version
  1.1 (the "License"); you may not use this file except in compliance with
  the License. You may obtain a copy of the License at
  http://www.mozilla.org/MPL/
  
  Software distributed under the License is distributed on an "AS IS" basis,
  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
  for the specific language governing rights and limitations under the
  License.
  
  The Original Code is Opus-College college module code.
  
  The Initial Developer of the Original Code is
  Center for Information Services, Radboud University Nijmegen.
  Portions created by the Initial Developer are Copyright (C) 2008
  the Initial Developer. All Rights Reserved.
  
  Contributor(s):
    For Java files, see Javadoc @author tags.
  
  Alternatively, the contents of this file may be used under the terms of
  either the GNU General Public License Version 2 or later (the "GPL"), or
  the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
  in which case the provisions of the GPL or the LGPL are applicable instead
  of those above. If you wish to allow use of your version of this file only
  under the terms of either the GPL or the LGPL, and not to allow others to
  use your version of this file under the terms of the MPL, indicate your
  decision by deleting the provisions above and replace them with the notice
  and other provisions required by the GPL or the LGPL. If you do not delete
  the provisions above, a recipient may use your version of this file under
  the terms of any one of the MPL, the GPL or the LGPL.
  
  ***** END LICENSE BLOCK *****
--><!--Converted at: Mon Dec 08 20:25:41 CAT 2014-->
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="org.uci.opus.college.persistence.EndGradeMapper">

	<select id="findEndGrades" parameterType="map" resultType="EndGrade">		
		SELECT
			  id
			, code
			, lang
			, active
			, endgradetypecode
			, gradepoint
			, percentagemin
			, percentagemax
			, "comment"
			, description
			, temporarygrade
			, writewho
			, passed
			, academicyearid

        FROM opuscollege.endgrade

		WHERE true
            <if test="lang != null">
				AND lower(EndGrade.lang) = lower(#{lang})
			</if>
            <if test="endGradeTypeCode != null">
				AND endgradeTypeCode  = #{endGradeTypeCode}
            </if>
            <if test="code != null">
				AND EndGrade.code  = #{code}
            </if>
            <if test="id != null">
				AND EndGrade.id = #{id}
            </if>
            <if test="active != null">
				AND EndGrade.active = #{active}
            </if>
            <if test="passed != null">
				AND EndGrade.passed = #{passed}
            </if>
            <if test="academicYearId != null">
				AND EndGrade.academicYearId = #{academicYearId}
            </if>
    	ORDER BY code
	</select>

	<!-- 
		Return as HashMaps , this will avoid having to iterate through a list of academic years
		in JSP files to find the corresponding academicYear to each end grade
	 -->
	<select id="findEndGradesAsMaps" parameterType="map" resultType="java.util.HashMap">		
		SELECT EndGrade.id
			, EndGrade.code
			, EndGrade.lang
			, EndGrade.active
			, EndGrade.endgradeTypeCode AS "endGradeTypeCode"
			, EndGrade.gradepoint AS "gradePoint"
			, EndGrade.percentagemin AS "percentageMin"
			, EndGrade.percentagemax AS "percentageMax"
			, EndGrade."comment"
			, EndGrade.description
			, EndGrade.temporarygrade AS "temporaryGrade"
			, EndGrade.passed
			, EndGrade.academicyearid AS "academicYearId"
			, AcademicYear.description AS "academicYear"
			, endGradeType.description AS "type"
			
			  FROM opuscollege.endgrade
			  INNER JOIN opuscollege.AcademicYear ON EndGrade.academicYearId = academicYear.id
			  INNER JOIN opuscollege.EndGradeType ON endgrade.endGradeTypeCode = EndGradeType.code 
		
		WHERE true
        <if test="lang != null">
			AND lower(EndGrade.lang) = lower(#{lang})
			AND lower(EndGradeType.lang) = lower(#{lang})
        </if>
        <if test="endGradeTypeCode != null">
			AND endgradeTypeCode  = #{endGradeTypeCode}
        </if>
        <if test="code != null">
			AND EndGrade.code  = #{code}
        </if>
        <if test="codes != null">
            AND EndGrade.code IN
             <foreach collection="codes" item="item" separator="," close=")" open="(">
                #{item}
            </foreach>
        </if>
        <if test="id != null">
			AND EndGrade.id = #{id}
        </if>
        <if test="active != null">
			AND LOWER(EndGrade.active) = LOWER(#{active})
        </if>
        <if test="passed != null">
			AND EndGrade.passed = #{passed}
        </if>
        <if test="academicYearId != null">
			AND EndGrade.academicYearId = #{academicYearId}
        </if>
        <if test="searchValue != null">
			AND (
				opuscollege.remove_diacritics(lower(comment)) like opuscollege.remove_diacritics(lower('%' || #{searchValue} || '%'))
	            OR opuscollege.remove_diacritics(lower(academicYear.description)) like opuscollege.remove_diacritics(lower('%' || #{searchValue} || '%'))
	            OR opuscollege.remove_diacritics(lower(CAST(gradePoint AS VARCHAR))) like opuscollege.remove_diacritics(lower('%' || #{searchValue} || '%'))
	            OR opuscollege.remove_diacritics(lower(passed)) like opuscollege.remove_diacritics(lower('%' || #{searchValue} || '%'))
	            OR opuscollege.remove_diacritics(lower(EndGrade.description)) like opuscollege.remove_diacritics(lower('%' || #{searchValue} || '%'))
	            OR opuscollege.remove_diacritics(lower(EndGradeType.description)) like opuscollege.remove_diacritics(lower('%' || #{searchValue} || '%'))
	        )
        </if>
    	ORDER BY academicYear.description DESC , EndGrade.code ASC
	</select>

	<update id="updateEndGrade" parameterType="EndGrade">
		
		UPDATE opuscollege.endgrade
   			SET 
   			 code=#{code}
   			 , lang=#{lang}
   			 , active=#{active}
   			 , endgradetypecode=#{endGradeTypeCode}
   			 , gradepoint=#{gradePoint}
   			 , percentagemin=#{percentageMin}
   			 , percentagemax=#{percentageMax}
   			 , "comment"=#{comment}
   			 , description=#{description}
   			 , temporarygrade=#{temporaryGrade}
   			 , writewho=#{writeWho}
   			 , passed=#{passed}
   			 , academicyearid=#{academicYearId}
 
 		WHERE id = #{id}

	</update>
	
	<insert id="addEndGrade" parameterType="EndGrade">
	
	   INSERT INTO opuscollege.endgrade(
            code
            , lang
            , active
            , endgradetypecode
            , gradepoint
            , percentagemin
            , percentagemax
            , "comment"
            , description
            , temporarygrade
            , writewho
            , passed
            , academicyearid
            )
        VALUES (
    		  #{code}
            , #{lang}
            , #{active}
            , #{endGradeTypeCode}
            , #{gradePoint}
            , #{percentageMin}
            , #{percentageMax}
            , #{comment}
            , #{description}
            , #{temporaryGrade}
            , #{writeWho}
            , #{passed}
            , #{academicYearId}
            )

		<selectKey keyProperty="id" resultType="int">
            SELECT currVal('opuscollege.endgradeseq')
        </selectKey>	
	</insert>

    <!-- Delete end grade in all languages -->
	<delete id="deleteEndGradeSet" parameterType="map">
		DELETE FROM opuscollege.EndGrade 
		WHERE code = #{code} 
        AND academicYearId = #{academicYearId}
        AND endGradeTypeCode = #{endGradeTypeCode}
	</delete>

	<select id="isEndGradeExists" parameterType="EndGrade" resultType="boolean">
		SELECT EXISTS (
		SELECT 1
        FROM   opusCollege.EndGrade 
		WHERE  id != #{id}
		AND    lang = #{lang}		
		AND    code = #{code}		
		AND    academicYearId = #{academicYearId}
        AND    endGradeTypeCode = #{endGradeTypeCode}
        )
	</select>
	
	
	<insert id="updateEndGradeHistory" parameterType="map">
	
	   INSERT INTO audit.EndGrade_hist(
            operation
            , id
            , code
            , lang
            , active
            , endgradetypecode
            , gradepoint
            , percentagemin
            , percentagemax
            , comment
            , description
            , temporarygrade
            , writewho
            , passed
            , academicyearid
            )
        VALUES (
    
    		  #{operation}
            , #{EndGrade.id}
            , #{EndGrade.code}
            , #{EndGrade.lang}
            , #{EndGrade.active}
            , #{EndGrade.endGradeTypeCode}
            , #{EndGrade.gradePoint}
            , #{EndGrade.percentageMin}
            , #{EndGrade.percentageMax}
            , #{EndGrade.comment}
            , #{EndGrade.description}
            , #{EndGrade.temporaryGrade}
            , #{EndGrade.writeWho}
            , #{EndGrade.passed}
            , #{EndGrade.academicYearId}
        );

	</insert>

    <select id="findEndGradeHistory" parameterType="map" resultType="EndGradeHistory">
        select * from audit.endgrade_hist
        <where>
            <if test="id != null">
                AND endgrade_hist.id = #{id}
            </if>
        </where>
    </select>

<!-- 2014-12-22 MP: findEndGradeForStudyPlanDetail apparently not used - there was no method in the EndGradeDao -->
    <select id="findEndGradeForStudyPlanDetail" parameterType="int" resultType="EndGrade">      
        SELECT endGrade.*            
        FROM opuscollege.studyPlanDetail
        INNER JOIN opuscollege.studyGradeType ON studyPlanDetail.studyGradeTypeId = studyGradeType.id
        INNER JOIN opuscollege.endGrade ON studyGradeType.gradeTypeCode = endGrade.endGradeTypeCode AND studyGradeType.currentAcademicYearId = endGrade.academicYearId AND lang = 'en'
        WHERE studyPlanDetail.id = #{studyPlanDetailId}
    </select>
	
</mapper>