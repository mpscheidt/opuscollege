<?xml version="1.0" encoding="UTF-8"?>
<!--
  ***** BEGIN LICENSE BLOCK *****
  Version: MPL 1.1/GPL 2.0/LGPL 2.1
  
  The contents of this file are subject to the Mozilla Public License Version
  1.1 (the "License"); you may not use this file except in compliance with
  the License. You may obtain a copy of the License at
  http://www.mozilla.org/MPL/
  
  Software distributed under the License is distributed on an "AS IS" basis,
  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
  for the specific language governing rights and limitations under the
  License.
  
  The Original Code is Opus-College college module code.
  
  The Initial Developer of the Original Code is
  Center for Information Services, Radboud University Nijmegen.
  Portions created by the Initial Developer are Copyright (C) 2008
  the Initial Developer. All Rights Reserved.
  
  Contributor(s):
    For Java files, see Javadoc @author tags.
  
  Alternatively, the contents of this file may be used under the terms of
  either the GNU General Public License Version 2 or later (the "GPL"), or
  the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
  in which case the provisions of the GPL or the LGPL are applicable instead
  of those above. If you wish to allow use of your version of this file only
  under the terms of either the GPL or the LGPL, and not to allow others to
  use your version of this file under the terms of the MPL, indicate your
  decision by deleting the provisions above and replace them with the notice
  and other provisions required by the GPL or the LGPL. If you do not delete
  the provisions above, a recipient may use your version of this file under
  the terms of any one of the MPL, the GPL or the LGPL.
  
  ***** END LICENSE BLOCK *****
-->

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="org.uci.opus.college.persistence.StudyplanCardinaltimeunitMapper"> 


    <!-- basic resultmap to define StudyPlanCardinalTimeUnit, without collections of other objects such as studyPlanDetails -->
    <resultMap id="BasicStudyPlanCardinalTimeUnitResultMap" type="StudyPlanCardinalTimeUnit">
        <id property="id" column="id"/>
        <result property="studyPlanId" column="studyPlanId"/>
        <result property="studyGradeTypeId" column="studyGradeTypeId"/>
        <result property="cardinalTimeUnitNumber" column="cardinalTimeUnitNumber"/>
        <result property="progressStatusCode" column="progressStatusCode"/>
        <result property="cardinalTimeUnitStatusCode" column="cardinalTimeUnitStatusCode"/>
        <result property="active" column="active"/>
        <result property="tuitionWaiver" column="tuitionWaiver"/>
        <result property="studyIntensityCode" column="studyIntensityCode"/>
    </resultMap>

    <!-- basic result map with 'full qualified' column names: <table_name>_<column_name> as needed to distinguish column names in selects with joins -->
    <!-- FQ result maps have no reason to use automapping, on the contrary unneeded objects with false id values may be created for non-existing records.
         For more info on  autoMapping="false" see the SubjectResultMapper and http://www.mybatis.org/mybatis-3/sqlmap-xml.html#Auto-mapping -->
    <resultMap id="BasicFQStudyPlanCardinalTimeUnitResultMap" type="StudyPlanCardinalTimeUnit" autoMapping="false">
        <id property="id" column="studyPlanCardinalTimeUnit_id"/>
        <result property="studyPlanId" column="studyPlanCardinalTimeUnit_studyPlanId"/>
        <result property="studyGradeTypeId" column="studyPlanCardinalTimeUnit_studyGradeTypeId"/>
        <result property="cardinalTimeUnitNumber" column="studyPlanCardinalTimeUnit_cardinalTimeUnitNumber"/>
        <result property="progressStatusCode" column="studyPlanCardinalTimeUnit_progressStatusCode"/>
        <result property="cardinalTimeUnitStatusCode" column="studyPlanCardinalTimeUnit_cardinalTimeUnitStatusCode"/>
        <result property="active" column="studyPlanCardinalTimeUnit_active"/>
        <result property="tuitionWaiver" column="studyPlanCardinalTimeUnit_tuitionWaiver"/>
        <result property="studyIntensityCode" column="studyPlanCardinalTimeUnit_studyIntensityCode"/>
    </resultMap>

    <!-- resultmap to define complete StudyPlanCardinalTimeUnit, using sub-selects -->
    <resultMap id="StudyPlanCardinalTimeUnitResultMap" type="StudyPlanCardinalTimeUnit" extends="BasicStudyPlanCardinalTimeUnitResultMap">
        <association property="cardinalTimeUnitResult" select="org.uci.opus.college.persistence.CardinaltimeunitResultMapper.findCardinalTimeUnitResultForStudyPlanCardinalTimeUnit" column="id"/>
        <association property="studyPlan" select="org.uci.opus.college.persistence.StudyplanMapper.findStudyPlan" column="studyPlanId"/>
        <collection property="studyPlanDetails" select="org.uci.opus.college.persistence.StudyplanDetailMapper.findStudyPlanDetailsForStudyPlanCardinalTimeUnit" column="id"/>
    </resultMap>

    <!-- resultmap to define StudyPlanCardinalTimeUnit, using inner resultMaps, but no sub-selects -->
    <!-- For more info on  autoMapping="false" see the SubjectResultMapper -->
    <resultMap id="StudyPlanCardinalTimeUnitResultMap_WithCTUAndSubjectResults" type="StudyPlanCardinalTimeUnit" extends="BasicFQStudyPlanCardinalTimeUnitResultMap" autoMapping="false">
        <collection property="cardinalTimeUnitResult" resultMap="org.uci.opus.college.persistence.CardinaltimeunitResultMapper.BasicFQCardinalTimeUnitResultResultMap"/>
        <collection property="studyPlanDetails" resultMap="org.uci.opus.college.persistence.StudyplanDetailMapper.StudyPlanDetailResultMap_WithSubjectResults"/>
        <collection property="rfcs" resultMap="org.uci.opus.college.persistence.RfcMapper.BasicFQRfcResultMap"/>
    </resultMap>


    <update id="updateCardinalTimeUnitStatusCode" parameterType="StudyPlanCardinalTimeUnit">
        UPDATE  opuscollege.studyPlanCardinalTimeUnit
        SET  cardinalTimeUnitStatusCode = #{cardinalTimeUnitStatusCode}
        WHERE   id = #{id}
    </update>    


    <select id="findStudyPlanCardinalTimeUnitsByParams" parameterType="map" resultMap="StudyPlanCardinalTimeUnitResultMap">
        SELECT  studyPlanCardinalTimeUnit.*
        FROM    opuscollege.studyPlanCardinalTimeUnit
        INNER JOIN opuscollege.studyGradeType ON studyPlanCardinalTimeUnit.studyGradeTypeId = studyGradeType.id
        INNER JOIN opuscollege.studyPlan on studyPlanCardinalTimeUnit.studyPlanId = studyPlan.id
        INNER JOIN opuscollege.student on studyPlan.studentId = student.studentId
        WHERE   1=1
        <if test='studentId != null and studentId != "0"'>
            AND studyPlan.studentId = #{studentId}
        </if>
        <if test='studentCode != null and studentCode != "0"'>
            AND student.studentCode = #{studentCode}
        </if>
        <if test='studyPlanId != null and studyPlanId != "0"'>
            AND studyPlanCardinalTimeUnit.studyPlanId = #{studyPlanId}
        </if>
        <if test="cardinalTimeUnitNumber != null">
            AND     cardinalTimeUnitNumber = #{cardinalTimeUnitNumber}
        </if>
        <if test='currentAcademicYearId != null and currentAcademicYearId != "0"'>
            AND studyGradeType.currentAcademicYearId = #{currentAcademicYearId}
        </if>
        <if test='cardinalTimeUnitStatusCode != null and cardinalTimeUnitStatusCode != "" and cardinalTimeUnitStatusCode != "0"'>
            AND cardinaltimeunitstatuscode = #{cardinalTimeUnitStatusCode}
        </if>
        <if test='studyPlanCardinalTimeUnitIds != null and studyPlanCardinalTimeUnitIds.size() > 0'>
            AND studyPlanCardinalTimeUnit.id IN
             <foreach collection="studyPlanCardinalTimeUnitIds" item="item" separator="," close=")" open="(">
                #{item}
            </foreach>
        </if>
        <if test="orderBy != null">
            ORDER BY ${orderBy}
        </if>
        <if test='orderBy == null or orderBy == ""'>
            ORDER BY cardinalTimeUnitNumber ASC, progressStatusCode ASC
        </if>
        <if test="limit != null">
            limit ${limit}
        </if>
    </select>

    <!-- used in the fee overview per student -->
    <select id="findStudyPlanCtuForStudyPlanDetail" parameterType="int" resultType="StudyPlanCardinalTimeUnit">
        SELECT  studyPlanCardinalTimeUnit.*
        FROM    opuscollege.studyPlanCardinalTimeUnit
        INNER JOIN opuscollege.studyPlanDetail ON studyPlanCardinalTimeUnit.id = studyPlanDetail.studyPlanCardinalTimeUnitId
        WHERE   studyPlanDetail.id = #{studyPlanDetailId}
    </select>

    <select id="findStudyPlanCardinalTimeUnitIds" parameterType="map" resultType="int">
        SELECT  studyPlanCardinalTimeUnit.id
        FROM    opuscollege.studyPlanCardinalTimeUnit
        INNER JOIN opuscollege.studyGradeType ON studyPlanCardinalTimeUnit.studyGradeTypeId = studyGradeType.id
        WHERE 1=1
        <if test='studyPlanId != null and studyPlanId != "0"'>
            AND studyPlanId = #{studyPlanId}
        </if>
        <if test="cardinalTimeUnitNumber != null">
            AND     cardinalTimeUnitNumber = #{cardinalTimeUnitNumber}
        </if>
        <if test='currentAcademicYearId != null and currentAcademicYearId != "0"'>
            AND studyGradeType.currentAcademicYearId = #{currentAcademicYearId}
        </if>
        <if test='cardinalTimeUnitStatusCode != null and cardinalTimeUnitStatusCode != "" and cardinalTimeUnitStatusCode != "0"'>
            AND cardinaltimeunitstatuscode = #{cardinalTimeUnitStatusCode}
        </if>
    </select>

    <!-- Get the highest timeUnitNumber (exactly one number even if time unit has been repeated) -->
    <select id="findMaxCardinalTimeUnitNumberForStudyPlan" parameterType="int" resultType="int">
        select  distinct cardinalTimeUnitNumber
        from    opuscollege.studyPlanCardinalTimeUnit
        where   studyPlanId = #{value}
        and     cardinalTimeUnitNumber = 
                ( select  max(cardinalTimeUnitNumber)
                  from    opuscollege.studyPlanCardinalTimeUnit
                  where   studyPlanId = #{value}
                )
    </select>

    <!-- Note that more than one time unit may exist for the highest timeUnitNumber
         In this case the latest one is taken -->
    <select id="findMaxCardinalTimeUnitForStudyPlan" parameterType="int" resultMap="StudyPlanCardinalTimeUnitResultMap">
        select  studyPlanCardinalTimeUnit.*
        from    opuscollege.studyPlanCardinalTimeUnit
        inner join opuscollege.studyGradeType on studyPlanCardinalTimeUnit.studyGradeTypeId = studyGradeType.id
        inner join opuscollege.academicYear on studyGradeType.currentAcademicYearId = academicYear.id
        where   studyPlanId = #{value}
        and     cardinalTimeUnitNumber = 
                ( select  max(cardinalTimeUnitNumber)
                  from    opuscollege.studyPlanCardinalTimeUnit
                  where   studyPlanId = #{value}
                )
        order by academicYear.startDate DESC
        limit 1
    </select>

    <!-- Get the lowest timeUnitNumber (usually 1) (exactly one number even if time unit has been repeated) -->
    <select id="findMinCardinalTimeUnitNumberForStudyPlan" parameterType="int" resultType="int">
        select  distinct cardinalTimeUnitNumber
        from    opuscollege.studyPlanCardinalTimeUnit
        where   studyPlanId = #{value}
        and     cardinalTimeUnitNumber =
                ( select  min(cardinalTimeUnitNumber)
                  from    opuscollege.studyPlanCardinalTimeUnit
                  where   studyPlanId = #{value}
                )
    </select>

    <!-- Note that more than one time unit may exist for the lowest timeUnitNumber
         In this case the earliest one is taken -->
    <select id="findMinCardinalTimeUnitForStudyPlan" parameterType="int" resultMap="StudyPlanCardinalTimeUnitResultMap">
        select  studyPlanCardinalTimeUnit.*
        from    opuscollege.studyPlanCardinalTimeUnit
        inner join opuscollege.studyGradeType on studyPlanCardinalTimeUnit.studyGradeTypeId = studyGradeType.id
        inner join opuscollege.academicYear on studyGradeType.currentAcademicYearId = academicYear.id
        where   studyPlanId = #{value}
        and     cardinalTimeUnitNumber =
                ( select  min(cardinalTimeUnitNumber)
                  from    opuscollege.studyPlanCardinalTimeUnit
                  where   studyPlanId = #{value}
                )
        order by academicYear.startDate
        limit 1
    </select>

    <select id="findMaxCardinalTimeUnitNumberForStudyPlanCTU" parameterType="map" resultType="int">
        SELECT  max(cardinalTimeUnitNumber)
        FROM    opuscollege.studyPlanCardinalTimeUnit
        WHERE   studyPlanId = #{studyPlanId}
        and     studyGradeTypeId = #{studyGradeTypeId}
    </select>
    
    <select id="findStudyPlanCardinalTimeUnitsForStudyPlan" parameterType="int" resultMap="StudyPlanCardinalTimeUnitResultMap">
        SELECT  studyplancardinaltimeunit.*

        FROM    opuscollege.studyplancardinaltimeunit
        INNER JOIN opuscollege.studyPlan on studyplancardinaltimeunit.studyPlanId = studyplan.id
        INNER JOIN opuscollege.studygradetype on studyplancardinaltimeunit.studygradetypeid = studygradetype.id
        INNER JOIN opuscollege.academicyear on academicyear.id = studygradetype.currentacademicyearid
             
        WHERE   studyplanid = #{value}
        ORDER BY  academicyear.description ASC, cardinalTimeUnitNumber ASC
    </select>

    <select id="findDescendingStudyPlanCardinalTimeUnitsForStudyPlan" parameterType="int" resultMap="StudyPlanCardinalTimeUnitResultMap">
        SELECT  opuscollege.studyPlanCardinalTimeUnit.*
        FROM    opuscollege.studyPlanCardinalTimeUnit
        WHERE   studyPlanId = #{value}
        ORDER BY cardinalTimeUnitNumber DESC, progressStatusCode DESC
    </select>

    <select id="findStudyPlanCardinalTimeUnitsForStudent" parameterType="int" resultMap="StudyPlanCardinalTimeUnitResultMap">
        SELECT  studyPlanCardinalTimeUnit.*
        FROM    opuscollege.studyPlanCardinalTimeUnit
        INNER   JOIN opuscollege.studyPlan on studyPlan.id = studyPlanCardinalTimeUnit.studyPlanId
        WHERE   studyPlan.studentId = #{value}
        ORDER   BY cardinalTimeUnitNumber ASC, progressStatusCode DESC
    </select>
    <select id="findLowestStudyPlanCardinalTimeUnitsForStudyPlan" parameterType="int" resultMap="StudyPlanCardinalTimeUnitResultMap">
        SELECT  opuscollege.studyPlanCardinalTimeUnit.*
        FROM    opuscollege.studyPlanCardinalTimeUnit
        WHERE   studyPlanId = #{value}
        AND studyPlanCardinalTimeUnit.cardinalTimeUnitNumber = (
            select min(cardinalTimeUnitNumber) 
            from opuscollege.studyPlanCardinalTimeUnit 
            where studyPlanId = #{studyPlanId}
        )
        ORDER BY progressStatusCode ASC
    </select>

    <select id="findStudyPlanCardinalTimeUnit" parameterType="int" resultMap="StudyPlanCardinalTimeUnitResultMap">
        SELECT  opuscollege.studyPlanCardinalTimeUnit.*
        FROM    opuscollege.studyPlanCardinalTimeUnit
        WHERE   id = #{value}
    </select>

    <select id="findStudyPlanCardinalTimeUnitByParams" parameterType="map" resultMap="StudyPlanCardinalTimeUnitResultMap">
        SELECT  studyPlanCardinalTimeUnit.*
        FROM    opuscollege.studyPlanCardinalTimeUnit
        INNER JOIN opuscollege.studyGradeType ON studyPlanCardinalTimeUnit.studyGradeTypeId = studyGradeType.id
        WHERE   studyPlanId = #{studyPlanId}
        <if test='studyGradeTypeId != null and studyGradeTypeId != "0"'>
            AND studyGradeTypeId = #{studyGradeTypeId}
        </if>
        <if test='currentAcademicYearId != null and currentAcademicYearId != "0"'>
            AND studyGradeType.currentAcademicYearId = #{currentAcademicYearId}
        </if>
        <if test="cardinalTimeUnitNumber != null">
            AND     cardinalTimeUnitNumber = #{cardinalTimeUnitNumber}
        </if>
        <if test="progressStatusCode != null">
            AND     progressStatusCode = #{progressStatusCode}
        </if>
        <if test="continuing != null">
            AND     progressStatusCode IN (select code from opuscollege.progressStatus where continuing = #{continuing})
        </if>
        <if test="increment != null">
            AND     progressStatusCode IN (select code from opuscollege.progressStatus where increment = #{increment})
        </if>
    </select>

    <insert id="addStudyPlanCardinalTimeUnit" parameterType="StudyPlanCardinalTimeUnit">
        INSERT into opuscollege.studyPlanCardinalTimeUnit
        (
            studyPlanId
            ,studyGradeTypeId
            ,cardinalTimeUnitNumber
            ,progressStatusCode
            ,cardinalTimeUnitStatusCode
            ,active
            ,tuitionWaiver
            ,studyIntensityCode
        ) values (
            #{studyPlanId}
            ,#{studyGradeTypeId}
            ,#{cardinalTimeUnitNumber}
            ,#{progressStatusCode}
            ,#{cardinalTimeUnitStatusCode}
            ,#{active}
            ,#{tuitionWaiver}
            ,#{studyIntensityCode}
        )
        <selectKey keyProperty="id" resultType="int">
            SELECT currVal('opuscollege.studyplancardinaltimeunitseq')
        </selectKey>
    </insert>
    <update id="updateStudyPlanCardinalTimeUnit" parameterType="StudyPlanCardinalTimeUnit">
        UPDATE opuscollege.studyPlanCardinalTimeUnit
        SET  studyPlanId                = #{studyPlanId}
            ,studyGradeTypeId           = #{studyGradeTypeId}
            ,cardinalTimeUnitNumber     = #{cardinalTimeUnitNumber}
            ,progressStatusCode         = #{progressStatusCode}
            ,cardinalTimeUnitStatusCode = #{cardinalTimeUnitStatusCode}
            ,active                     = #{active}
            ,tuitionWaiver              = #{tuitionWaiver}
            ,studyIntensityCode         = #{studyIntensityCode}
        WHERE   id = #{id}
    </update>

    <delete id="deleteStudyPlanCardinalTimeUnit" parameterType="int">
        DELETE FROM opuscollege.studyPlanCardinalTimeUnit
        WHERE   id   = #{value}
    </delete>


    <select id="findNumberOfSubjectsForStudyPlanCTU" parameterType="int" resultType="int">
        select count(*)
        from opuscollege.subject
        left outer join opuscollege.subjectSubjectBlock on subjectSubjectBlock.subjectId = subject.id
        inner join opuscollege.studyplandetail on studyplandetail.subjectId = subject.id or studyplandetail.subjectBlockId = subjectSubjectBlock.subjectBlockId
        where studyPlanCardinalTimeUnitId = #{value}
    </select>
    


</mapper>