<?xml version="1.0" encoding="UTF-8"?><!--
  ***** BEGIN LICENSE BLOCK *****
  Version: MPL 1.1/GPL 2.0/LGPL 2.1
  
  The contents of this file are subject to the Mozilla Public License Version
  1.1 (the "License"); you may not use this file except in compliance with
  the License. You may obtain a copy of the License at
  http://www.mozilla.org/MPL/
  
  Software distributed under the License is distributed on an "AS IS" basis,
  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
  for the specific language governing rights and limitations under the
  License.
  
  The Original Code is Opus-College college module code.
  
  The Initial Developer of the Original Code is
  Center for Information Services, Radboud University Nijmegen.
  Portions created by the Initial Developer are Copyright (C) 2008
  the Initial Developer. All Rights Reserved.
  
  Contributor(s):
    For Java files, see Javadoc @author tags.
  
  Alternatively, the contents of this file may be used under the terms of
  either the GNU General Public License Version 2 or later (the "GPL"), or
  the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
  in which case the provisions of the GPL or the LGPL are applicable instead
  of those above. If you wish to allow use of your version of this file only
  under the terms of either the GPL or the LGPL, and not to allow others to
  use your version of this file under the terms of the MPL, indicate your
  decision by deleting the provisions above and replace them with the notice
  and other provisions required by the GPL or the LGPL. If you do not delete
  the provisions above, a recipient may use your version of this file under
  the terms of any one of the MPL, the GPL or the LGPL.
  
  ***** END LICENSE BLOCK *****
--><!--Converted at: Wed Sep 16 20:51:31 CEST 2015-->
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="org.uci.opus.college.persistence.TestMapper">

    <!-- resultmap to define complete examination(including teachers for examination) -->
    <resultMap id="TestResultMap" type="Test">
        <result property="id" column="id"/>
        <result property="testCode" column="testCode"/>
        <result property="testDescription" column="testDescription"/>
        <result property="examinationId" column="examinationId"/>
        <result property="examinationTypeCode" column="examinationTypeCode"/>
        <result property="numberOfAttempts" column="numberOfAttempts"/>
        <result property="weighingFactor" column="weighingFactor"/>
        <result property="BRsPassingTest" column="BRsPassingTest"/>
        <result property="testDate" column="testDate"/>
        <result property="active" column="active"/>
        <association property="teachersForTest" select="findTeachersForTest" column="id"/>
        <association property="examination" select="org.uci.opus.college.persistence.ExaminationMapper.findExamination" column="examinationId"/>
    </resultMap>

    <resultMap id="TestTeacherResultMap" type="TestTeacher">
        <result property="id" column="id"/>
        <result property="staffMemberId" column="staffMemberId"/>
        <result property="testId" column="testId"/>
        <result property="classgroupId" column="classgroupId"/>
        <result property="active" column="active"/>
        <result property="writeWho" column="writeWho"/>
        <association property="staffMember" select="org.uci.opus.college.persistence.StaffMemberMapper.findStaffMemberByStaffMemberId" column="staffMemberId"/>
        <association property="classgroup" select="org.uci.opus.college.persistence.StudyMapper.findClassgroupById" column="classgroupId"/>
    </resultMap>

    <select id="findAllTests" parameterType="map" resultType="Test">
        select  *
        from    opuscollege.test
        order   by lower(testCode)
    </select>

    <select id="findTestsNotForTeacher" parameterType="map" resultType="Test">
      select  opuscollege.test.*
        from    opuscollege.test
        INNER JOIN opuscollege.examination on test.examinationId = examination.id
        INNER JOIN opuscollege.subject on examination.subjectId = subject.id
        INNER JOIN opuscollege.study on subject.primaryStudyId = study.id
        INNER JOIN opuscollege.organizationalUnit on study.organizationalUnitId = organizationalUnit.id
        INNER JOIN opuscollege.branch on organizationalUnit.branchId = branch.id
        INNER JOIN opuscollege.institution on branch.institutionId = institution.id
        WHERE opuscollege.institution.institutionTypeCode = #{institutionTypeCode}
        <if test='institutionId != null and institutionId != "0"'>
            and opuscollege.institution.id = #{institutionId}
        </if>
        <if test='branchId != null and branchId != "0"'>
            and   opuscollege.branch.id = #{branchId}
        </if>
        <if test='organizationalUnitId != null and organizationalUnitId != "0"'>
            and opuscollege.organizationalunit.id in (select id from opuscollege.crawl_tree(#{organizationalUnitId}, 0))
        </if>
        <if test='studyId != null and studyId != "0"'>
            and   opuscollege.study.id = #{studyId}
        </if>
        <if test='subjectId != null and subjectId != "0"'>
            and   opuscollege.subject.id = #{subjectId}
        </if>
        <if test='examinationId != null and examinationId != "0"'>
            and   opuscollege.examination.id = #{examinationId}
        </if>
        AND opuscollege.test.id NOT IN (
        SELECT testId from opuscollege.testTeacher WHERE 
        opuscollege.testTeacher.staffMemberId = #{staffMemberId})
        order   by lower(testCode)
    </select>

     <select id="findTests" parameterType="map" resultMap="TestResultMap">
        select opuscollege.test.* 
        from opuscollege.test
        INNER JOIN opuscollege.examination on test.examinationId = examination.id
        INNER JOIN opuscollege.subject on opuscollege.examination.subjectId = subject.id
        INNER JOIN opuscollege.study on opuscollege.subject.primaryStudyId = study.id
        INNER JOIN opuscollege.organizationalunit on opuscollege.study.organizationalUnitId = organizationalunit.id
        INNER JOIN opuscollege.branch on opuscollege.branch.id = organizationalunit.branchId
        INNER JOIN opuscollege.institution on opuscollege.institution.id = branch.institutionId
        WHERE true
        <if test='institutionTypeCode != null and institutionTypeCode != ""'>
            and institution.institutionTypeCode = #{institutionTypeCode}
        </if>
        <if test='institutionId != null and institutionId != "0"'>
            and institution.id = #{institutionId}
        </if>
        <if test='branchId != null and branchId != "0"'>
            and   branch.id = #{branchId}
        </if>
        <if test='organizationalUnitId != null and organizationalUnitId != "0"'>
            and organizationalunit.id in (select id from opuscollege.crawl_tree(#{organizationalUnitId}, 0))
        </if>
        <if test='studyId != null and studyId != "0"'>
            and   study.id = #{studyId}
        </if>
        <if test='subjectId != null and subjectId != "0"'>
            and   subject.id = #{subjectId}
        </if>
        <if test='examinationId != null and examinationId != "0"'>
            and   examination.id = #{examinationId}
        </if>
        <if test='testIds != null and testIds.size() > 0'>
            and test.id IN
             <foreach collection="testIds" item="item" separator="," close=")" open="(">
              #{item}
            </foreach>
        </if>
        order   by lower(testCode)
    </select>
    
    <!-- find one test -->
    <select id="findTest" parameterType="int" resultMap="TestResultMap"> 
        select *
        from   opuscollege.test
        where  id = #{value}
    </select>


    <!-- find one Test by its name -->
    <select id="findTestByName" parameterType="String" resultMap="TestResultMap"> 
        select *
        from   opuscollege.test
        where  testDescription = #{value}
    </select>

    <!-- find all teachers for a Test -->
    <select id="findAllTeachersForTest" parameterType="int" resultType="StaffMember">
        select  opuscollege.staffMember.*,
                opuscollege.person.*
        from opuscollege.staffmember
        INNER JOIN opuscollege.person ON opuscollege.staffMember.personId = opuscollege.person.id
        INNER JOIN opuscollege.testTeacher ON opuscollege.testTeacher.staffMemberId = opuscollege.staffmember.staffMemberId
        WHERE opuscollege.testTeacher.testId = #{value}
        order   by lower(person.surnameFull)
    </select>
    
    <!-- find all teachers for a test -->
    <select id="findTeachersForTest" parameterType="int" resultMap="TestTeacherResultMap">
        select  opuscollege.testTeacher.*
        from opuscollege.testTeacher
        WHERE opuscollege.testTeacher.testId = #{value}
        order  BY testTeacher.staffmemberid, testTeacher.testid, testTeacher.classgroupid
    </select>
  
    <!-- find all tests for one examination -->
    <select id="findTestsForExamination" parameterType="int" resultMap="TestResultMap"> 
        select opuscollege.test.* 
        from opuscollege.test
        WHERE opuscollege.test.examinationId = #{value}
        order   by lower(testCode)
    </select>

    <!-- find all active tests for one examination -->
    <select id="findActiveTestsForExamination" parameterType="int" resultMap="TestResultMap"> 
        select opuscollege.test.* 
        from opuscollege.test
        WHERE opuscollege.test.examinationId = #{value}
        AND     active = 'Y'
        order   by lower(testCode)
    </select>

    <!-- find one Test by its required params -->
    <select id="findTestByParams" parameterType="map" resultMap="TestResultMap"> 
        select opuscollege.test.*
        from   opuscollege.test
        WHERE   testCode = #{testCode} 
        AND     testDescription = #{testDescription}
        AND     examinationId = #{examinationId}
        AND     examinationTypeCode = #{examinationTypeCode}
        <if test='id != null and id != "0"'>
            AND     id != #{id}
        </if>
    </select>

    <insert id="addTest" parameterType="Test">
        insert into  opuscollege.test (
        		testCode
        ,       testDescription
        ,       examinationId
        ,       examinationTypeCode
        ,       numberOfAttempts
        ,       weighingFactor
        ,       BRsPassingTest
        ,       active
        ,       testDate
		) VALUES (
       			#{testCode}
        ,       #{testDescription}
        ,       #{examinationId}
        ,       #{examinationTypeCode}
        ,       #{numberOfAttempts}
        ,       #{weighingFactor}
        ,       #{BRsPassingTest}
        ,       #{active}
        ,       #{testDate}
		)	
       <selectKey keyProperty="id" resultType="int">
            SELECT currVal('opuscollege.testSeq')
        </selectKey>
    </insert>

    <update id="updateTest" parameterType="Test">
        update  opuscollege.test
        set     testCode				= #{testCode}
        ,       testDescription	    	= #{testDescription}
        ,       examinationId      		= #{examinationId}
        ,       examinationTypeCode 	= #{examinationTypeCode}
        ,       numberOfAttempts    	= #{numberOfAttempts}
        ,       weighingFactor     		= #{weighingFactor}
        ,       BRsPassingTest      	= #{BRsPassingTest}
        ,       active     				= #{active}
        ,       testDate                = #{testDate}
        where   id = #{id}
    </update>
    
    <delete id="deleteTest" parameterType="int">
        delete from opuscollege.test
        where  id = #{value}
    </delete>

   	<select id="findTestTeacher" parameterType="int" resultMap="TestTeacherResultMap">
		select *
		from   	opuscollege.testTeacher
		where  	id = #{value}
   	</select>
   	
   	<insert id="addTestTeacher" parameterType="TestTeacher">
        insert into opuscollege.testTeacher
        ( testId
        , staffMemberId
        , classgroupId 
        , active
        ) values
        ( #{testId}
        , #{staffMemberId}
        , #{classgroupId}
        , #{active}
        )
    </insert> 
    
    <update id="updateTestTeacher" parameterType="TestTeacher">
        update  opuscollege.testTeacher
        set     testId       	= #{testId}
        ,		staffMemberId	= #{staffMemberId}
        ,		classgroupId	= #{classgroupId}	
        ,       active        	= #{active}
        where   id = #{id}
    </update>
    
    <delete id="deleteTestTeacher" parameterType="int">
        delete from opuscollege.testTeacher
        where  id = #{value}
    </delete>

    <delete id="deleteAllTestsForExamination" parameterType="int">
        delete from opuscollege.test
        where  examinationId = #{value}
    </delete>

    <insert id="transferTests" parameterType="map">
        insert into  opuscollege.test (
                testCode
        ,       testDescription
        ,       examinationId
        ,       examinationTypeCode
        ,       numberOfAttempts
        ,       weighingFactor
        ,       BRsPassingTest
        ,       active
        ,       testDate
        ) select
                testCode
        ,       testDescription
        ,       #{newExaminationId}
        ,       examinationTypeCode
        ,       numberOfAttempts
        ,       weighingFactor
        ,       BRsPassingTest
        ,       active
        ,       testDate
        from opuscollege.test
        where examinationId = #{originalExaminationId}
        order by test.id
    </insert>

    <insert id="transferTest" parameterType="map">
        insert into opuscollege.test (
                testCode
        ,       testDescription
        ,       examinationId
        ,       examinationTypeCode
        ,       numberOfAttempts
        ,       weighingFactor
        ,       minimumMark
        ,       maximumMark
        ,       BRsPassingTest
        ,       active
        ,       testDate
        ) select 
                testCode
        ,       testDescription
        ,       #{newExaminationId}
        ,       examinationTypeCode
        ,       numberOfAttempts
        ,       weighingFactor
        ,       minimumMark
        ,       maximumMark
        ,       BRsPassingTest
        ,       active
        ,       testDate
        from opuscollege.test
        where id = #{originalTestId}
        <selectKey keyProperty="newId" resultType="int">
            SELECT currVal('opuscollege.testseq')
        </selectKey>
    </insert> 

    <insert id="transferTestTeachers" parameterType="map">
        insert into  opuscollege.testTeacher
        (       testId
        ,       staffMemberId 
        ,       classgroupId
        ,       active
        ) select
                #{newTestId}
        ,       sourceTestTeacher.staffMemberId
        ,       targetClassgroup.id
        ,       sourceTestTeacher.active
        from opuscollege.testTeacher sourceTestTeacher

        left outer join opuscollege.classgroup sourceClassgroup
            on  sourceTestTeacher.classgroupid = sourceClassgroup.id
        left outer join opuscollege.studygradetype sourceStudygradetype
            on sourceClassgroup.studygradetypeid = sourceStudygradetype.id
        left outer join opuscollege.studygradetype targetStudygradetype
            on  targetstudygradetype.studyId = sourcestudygradetype.studyId
            and targetstudygradetype.gradeTypeCode = sourcestudygradetype.gradeTypeCode
            and targetstudygradetype.studyTimeCode = sourcestudygradetype.studyTimeCode
            and targetstudygradetype.studyFormCode = sourcestudygradetype.studyFormCode
            and targetstudygradetype.currentAcademicYearId = #{targetAcademicYearId}
        left outer join opuscollege.classgroup targetClassgroup
            on  targetClassgroup.description = sourceClassgroup.description
            and targetClassgroup.studygradetypeid = targetStudygradetype.id

        where sourceTestTeacher.testId = #{originalTestId}
        order by sourceTestTeacher.id
    </insert>

    <select id="findTotalWeighingFactor" parameterType="map" resultType="int"> 
        SELECT  SUM(weighingFactor)
        FROM    opuscollege.test
        WHERE   active = 'Y'

        <if test="examinationId != null">
            AND examinationId = #{examinationId}
        </if>
        <if test="testIdToIgnore != null">
            AND test.id != #{testIdToIgnore}
        </if>
    </select>

</mapper>