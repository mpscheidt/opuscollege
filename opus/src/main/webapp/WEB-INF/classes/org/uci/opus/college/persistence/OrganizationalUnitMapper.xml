<?xml version="1.0" encoding="UTF-8"?><!--
  ***** BEGIN LICENSE BLOCK *****
  Version: MPL 1.1/GPL 2.0/LGPL 2.1
  
  The contents of this file are subject to the Mozilla Public License Version
  1.1 (the "License"); you may not use this file except in compliance with
  the License. You may obtain a copy of the License at
  http://www.mozilla.org/MPL/
  
  Software distributed under the License is distributed on an "AS IS" basis,
  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
  for the specific language governing rights and limitations under the
  License.
  
  The Original Code is Opus-College college module code.
  
  The Initial Developer of the Original Code is
  Center for Information Services, Radboud University Nijmegen.
  Portions created by the Initial Developer are Copyright (C) 2008
  the Initial Developer. All Rights Reserved.
  
  Contributor(s):
    For Java files, see Javadoc @author tags.
  
  Alternatively, the contents of this file may be used under the terms of
  either the GNU General Public License Version 2 or later (the "GPL"), or
  the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
  in which case the provisions of the GPL or the LGPL are applicable instead
  of those above. If you wish to allow use of your version of this file only
  under the terms of either the GPL or the LGPL, and not to allow others to
  use your version of this file under the terms of the MPL, indicate your
  decision by deleting the provisions above and replace them with the notice
  and other provisions required by the GPL or the LGPL. If you do not delete
  the provisions above, a recipient may use your version of this file under
  the terms of any one of the MPL, the GPL or the LGPL.
  
  ***** END LICENSE BLOCK *****
-->
<!--Converted at: Mon Dec 08 20:25:36 CAT 2014-->
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="org.uci.opus.college.persistence.OrganizationalUnitMapper">

    <!-- resultmap to define complete organizationalUnit (including addresses and admissionRegistrationConfigs) -->
    <resultMap id="OrganizationalUnitResult" type="OrganizationalUnit">
        <id property="id" column="id"/>
        <result property="organizationalUnitCode" column="organizationalUnitCode"/>
        <result property="organizationalUnitDescription" column="organizationalUnitDescription"/>
        <result property="academicFieldCode" column="academicFieldCode"/>
        <result property="branchId" column="branchId"/>
        <result property="directorId" column="directorId"/>
        <result property="registrationDate" column="registrationDate"/>
        <result property="unitAreaCode" column="unitAreaCode"/>
        <result property="unitLevel" column="unitLevel"/>
        <result property="parentOrganizationalUnitId" column="parentOrganizationalUnitId"/>
        <result property="unitTypeCode" column="unitTypeCode"/>
        <result property="active" column="active"/>
        <collection property="addresses" select="findAddressesForOrganizationalUnit" column="id" ofType="Address"/>
        <collection property="admissionRegistrationConfigs" select="findAdmissionRegistrationConfigsForOrgUnit" column="id" ofType="AdmissionRegistrationConfig"/>
    </resultMap>

    <resultMap id="AdmissionRegistrationConfigResultMap" type="AdmissionRegistrationConfig">
        <id property="id" column="admissionRegistrationConfig_id"/>
        <result property="organizationalUnitId" column="admissionRegistrationConfig_organizationalUnitId"/>
        <result property="academicYearId" column="admissionRegistrationConfig_academicYearId"/>
        <result property="startOfRegistration" column="admissionRegistrationConfig_startOfRegistration"/>
        <result property="endOfRegistration" column="admissionRegistrationConfig_endOfRegistration"/>
        <result property="startOfAdmission" column="admissionRegistrationConfig_startOfAdmission"/>
        <result property="endOfAdmission" column="admissionRegistrationConfig_endOfAdmission"/>
        <result property="startOfRefundPeriod" column="admissionRegistrationConfig_startOfRefundPeriod"/>
        <result property="endOfRefundPeriod" column="admissionRegistrationConfig_endOfRefundPeriod"/>
        <result property="active" column="admissionRegistrationConfig_active"/>
    </resultMap>

    <select id="findOrganizationalUnits" parameterType="map" resultType="OrganizationalUnit">
        select opuscollege.organizationalUnit.*
        from   opuscollege.organizationalUnit 
        inner  join opuscollege.branch on branch.id = organizationalUnit.branchId
        inner  join opuscollege.institution on institution.id = branch.institutionId
        where  true
        <if test="institutionTypeCode != null">
            and institutionTypeCode = #{institutionTypeCode}
        </if>
        <if test='institutionId != null and institutionId != "" and institutionId != "0"'>
            and institution.id = #{institutionId}
        </if>
        <if test='branchId != null and branchId != "" and branchId != "0"'>
            and branch.id = #{branchId}
        </if>
        <if test='organizationalUnitId != null and organizationalUnitId != "" and organizationalUnitId != "0"'>
            and organizationalunit.id in 
                    (select id from opuscollege.crawl_tree(#{organizationalUnitId}, 0))
        </if>
        <if test='organizationalUnitIds != null and organizationalUnitIds.size() > 0'>
            and organizationalunit.id in
             <foreach item="item" collection="organizationalUnitIds" open="(" separator="," close=")" >
                #{item}
            </foreach>
        </if>
        order by branchId, unitLevel, parentOrganizationalUnitId
               , lower(organizationalUnitDescription)
    </select>

	<!-- find one OrganizationalUnit -->
	<select id="findOrganizationalUnit" parameterType="int" resultMap="OrganizationalUnitResult">
		select * 
        from   opuscollege.organizationalUnit
        where  id = #{organizationalUnitId}
	</select>

	<!-- check that a duplicate of does not exist that would violate the unique key -->
	<select id="existsDuplicate" parameterType="map" resultMap="OrganizationalUnitResult">
		select *
		from    opuscollege.organizationalUnit
        WHERE   id != #{id}
		and     organizationalUnitDescription = #{organizationalUnitDescription}
		and	    organizationalUnitCode = #{organizationalUnitCode}
	</select>

	<!-- find all addresses for one OrganizationalUnit -->
	<select id="findAddressesForOrganizationalUnit" parameterType="int" resultMap="org.uci.opus.college.persistence.AddressMapper.AddressResultMap">
		select  id                     AS address_id
		,       addressTypeCode        AS address_addressTypeCode
		,       organizationalUnitId   AS address_organizationalUnitId
        ,       personId               AS address_personId
        ,       studyId                AS address_studyId
        ,       street                 AS address_street
		,       number                 AS address_number
		,       numberExtension        AS address_numberExtension
		,       zipCode                AS address_zipCode
		,       POBOx                  AS address_POBox
		,       city                   AS address_city
		,       administrativePostCode AS address_administrativePostCode
        ,       districtCode 		   AS address_districtCode
        ,       provinceCode           AS	address_provinceCode
        ,       countryCode            AS address_countryCode
        ,       telephone              AS	address_telephone
        ,       faxNumber              AS address_faxNumber
        ,       mobilePhone            AS address_mobilePhone
        ,       emailAddress           AS address_emailAddress 
        from    opuscollege.address 
        where   organizationalUnitId = #{value}
	</select>
    
    <!-- find all admissionRegistrationConfigs for one OrganizationalUnit -->
    <select id="findAdmissionRegistrationConfigsForOrgUnit" parameterType="int" resultMap="AdmissionRegistrationConfigResultMap">
        select  id                     AS admissionRegistrationConfig_id
        ,       organizationalUnitId   AS admissionRegistrationConfig_organizationalUnitId
        ,       academicYearId         AS admissionRegistrationConfig_academicYearId
        ,       startOfRegistration    AS admissionRegistrationConfig_startOfRegistration
        ,       endOfRegistration      AS admissionRegistrationConfig_endOfRegistration
        ,       startOfAdmission       AS admissionRegistrationConfig_startOfAdmission
        ,       endOfAdmission         AS admissionRegistrationConfig_endOfAdmission
        ,       startOfRefundPeriod    AS admissionRegistrationConfig_startOfRefundPeriod
        ,       endOfRefundPeriod      AS admissionRegistrationConfig_endOfRefundPeriod
        ,       active                 AS admissionRegistrationConfig_active
        ,       writeWho               AS admissionRegistrationConfig_writeWho
        ,       writeWhen              AS admissionRegistrationConfig_writeWhen
        from    opuscollege.admissionRegistrationConfig
        where   organizationalUnitId = #{value}
    </select>

	<!-- find the organizational unit to which the study belongs -->
	<select id="findOrganizationalUnitOfStudy" parameterType="int" resultType="OrganizationalUnit">
		select organizationalunit.* 
		from   opuscollege.organizationalunit
		inner  join opuscollege.study on study.organizationalUnitId = organizationalUnit.id
		where  study.id = #{studyId}
	</select>

	<!-- find all Parents of one OrganizationalUnit -->
	<select id="findAllOrganizationalUnitAtLevel" parameterType="map" resultType="OrganizationalUnit">
		select *
        from   opuscollege.organizationalUnit
        where  branchId = #{branchId}
        and    unitLevel = #{unitLevel}
		order  by lower(organizationalUnitDescription)
	</select>

	<!-- find all Children of one OrganizationalUnit -->
	<select id="findAllChildrenForOrganizationalUnit" parameterType="int" resultType="OrganizationalUnit">
		select * 
        from   opuscollege.organizationalUnit
		where  parentOrganizationalUnitid = #{organizationalUnitId}
		order  by lower(organizationalUnitDescription)
	</select>

	<insert id="addOrganizationalUnit" parameterType="OrganizationalUnit">
		insert into opuscollege.organizationalUnit 
        ( academicFieldCode
		, branchId
		, directorId
		, organizationalUnitCode
		, organizationalUnitDescription
		, unitAreaCode
		, unitLevel
		, parentOrganizationalUnitId
		, unitTypeCode
		, active
	    ) values
        ( #{academicFieldCode}
		, #{branchId}
		, #{directorId}
		, #{organizationalUnitCode}
		, #{organizationalUnitDescription}
		, #{unitAreaCode}
		, #{unitLevel}
		, #{parentOrganizationalUnitId}
		, #{unitTypeCode}
		, #{active}
        )
        <selectKey keyProperty="id" resultType="int">
            SELECT currVal('opuscollege.organizationalunitseq')
        </selectKey>
	</insert>

	<update id="updateOrganizationalUnit" parameterType="OrganizationalUnit">
		update opuscollege.organizationalUnit
		set    organizationalUnitCode = #{organizationalUnitCode}
	 	,      organizationalUnitDescription = #{organizationalUnitDescription}
	  	,      branchId = #{branchId}
	   	,      unitLevel = #{unitLevel}
	    ,      parentOrganizationalUnitId =#{parentOrganizationalUnitId}
	   	,      academicFieldCode = #{academicFieldCode} 
	    ,      directorId = #{directorId} 
	    ,      unitTypeCode = #{unitTypeCode}
	    ,      unitAreaCode = #{unitAreaCode}
	    ,      active = #{active} 
	    ,      writeWhen = now() 
		where  id = #{id}
	</update>

	<delete id="deleteOrganizationalUnit" parameterType="int">
		delete from opuscollege.organizationalunit where id = #{value}
	</delete>
    
    <!-- used when deleting an organizationalUnit -->
    <delete id="deleteAdmissionRegistrationConfigByOrgId" parameterType="int">
        delete from opuscollege.admissionRegistrationConfig 
        where   organizationalUnitId = #{id}
    </delete>

    <delete id="deleteAdmissionRegistrationConfig" parameterType="map">
        delete from opuscollege.admissionRegistrationConfig 
        where   id = #{id}
    </delete>

    <select id="findAdmissionRegistrationConfig" parameterType="map" resultMap="AdmissionRegistrationConfigResultMap">
        select  id                     AS admissionRegistrationConfig_id
        ,       organizationalUnitId   AS admissionRegistrationConfig_organizationalUnitId
        ,       academicYearId         AS admissionRegistrationConfig_academicYearId
        ,       startOfRegistration    AS admissionRegistrationConfig_startOfRegistration
        ,       endOfRegistration      AS admissionRegistrationConfig_endOfRegistration
        ,       startOfAdmission       AS admissionRegistrationConfig_startOfAdmission
        ,       endOfAdmission         AS admissionRegistrationConfig_endOfAdmission
        ,       startOfRefundPeriod    AS admissionRegistrationConfig_startOfRefundPeriod
        ,       endOfRefundPeriod      AS admissionRegistrationConfig_endOfRefundPeriod
        ,       active                 AS admissionRegistrationConfig_active
        ,       writeWho               AS admissionRegistrationConfig_writeWho
        ,       writeWhen              AS admissionRegistrationConfig_writeWhen
        from    opuscollege.admissionRegistrationConfig
        where   true
        <if test="id != null">
            and id = #{id}
        </if>
        <if test="organizationalUnitId != null">
            and organizationalUnitId = #{organizationalUnitId}
        </if>
        <if test="academicYearId != null">
            and academicYearId = #{academicYearId}
        </if>
    </select>

    <update id="updateAdmissionRegistrationConfig" parameterType="AdmissionRegistrationConfig">
        update opuscollege.admissionRegistrationConfig
        set    organizationalUnitId = #{organizationalUnitId}
        ,      academicYearId = #{academicYearId}
        ,      startOfRegistration = #{startOfRegistration}
        ,      endOfRegistration = #{endOfRegistration}
        ,      startOfAdmission = #{startOfAdmission}
        ,      endOfAdmission = #{endOfAdmission}
        ,      startOfRefundPeriod  = #{startOfRefundPeriod}
        ,      endOfRefundPeriod = #{endOfRefundPeriod}
        ,      active = #{active}
        ,      writeWhen = now()
        ,      writeWho = #{writeWho}
        where  id = #{id}
    </update>

    <insert id="addAdmissionRegistrationConfig" parameterType="AdmissionRegistrationConfig">
        insert into opuscollege.admissionRegistrationConfig
        ( organizationalUnitId
        , academicYearId
        , startOfRegistration
        , endOfRegistration
        , startOfAdmission
        , endOfAdmission
        , startOfRefundPeriod
        , endOfRefundPeriod
        , active
        , writeWho
        ) values
        ( #{organizationalUnitId}
        , #{academicYearId}
        , #{startOfRegistration}
        , #{endOfRegistration}
        , #{startOfAdmission}
        , #{endOfAdmission}
        , #{startOfRefundPeriod}
        , #{endOfRefundPeriod}
        , #{active}
        , #{writeWho}
        )
    </insert>

    <select id="findOrganizationalUnitForStudent" parameterType="int" resultType="OrganizationalUnit"> 
        select opuscollege.organizationalUnit.*
        from   opuscollege.organizationalUnit
        INNER JOIN opuscollege.study on opuscollege.study.organizationalUnitId = organizationalunit.id
        INNER JOIN opuscollege.student ON opuscollege.student.primaryStudyId = opuscollege.study.id
        where  opuscollege.student.personId = #{value}
    </select>

    <select id="findTreeOfOrganizationalUnitIds" parameterType="int" resultType="int">
        select id from opuscollege.crawl_tree(#{organizationalUnitId}, 0)
    </select>

</mapper>
