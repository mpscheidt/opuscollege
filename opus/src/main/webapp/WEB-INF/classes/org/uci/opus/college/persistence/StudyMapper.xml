<?xml version="1.0" encoding="UTF-8"?><!--
  ***** BEGIN LICENSE BLOCK *****
  Version: MPL 1.1/GPL 2.0/LGPL 2.1
  
  The contents of this file are subject to the Mozilla Public License Version
  1.1 (the "License"); you may not use this file except in compliance with
  the License. You may obtain a copy of the License at
  http://www.mozilla.org/MPL/
  
  Software distributed under the License is distributed on an "AS IS" basis,
  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
  for the specific language governing rights and limitations under the
  License.
  
  The Original Code is Opus-College college module code.
  
  The Initial Developer of the Original Code is
  Center for Information Services, Radboud University Nijmegen.
  Portions created by the Initial Developer are Copyright (C) 2008
  the Initial Developer. All Rights Reserved.
  
  Contributor(s):
    For Java files, see Javadoc @author tags.
  
  Alternatively, the contents of this file may be used under the terms of
  either the GNU General Public License Version 2 or later (the "GPL"), or
  the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
  in which case the provisions of the GPL or the LGPL are applicable instead
  of those above. If you wish to allow use of your version of this file only
  under the terms of either the GPL or the LGPL, and not to allow others to
  use your version of this file under the terms of the MPL, indicate your
  decision by deleting the provisions above and replace them with the notice
  and other provisions required by the GPL or the LGPL. If you do not delete
  the provisions above, a recipient may use your version of this file under
  the terms of any one of the MPL, the GPL or the LGPL.
  
  ***** END LICENSE BLOCK *****
--><!--Converted at: Mon Dec 08 20:25:35 CAT 2014-->
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="org.uci.opus.college.persistence.StudyMapper">

    <!-- resultmap to define complete study (including gradetypes and addresses) -->
    <resultMap id="StudyResultMap" type="Study">
        <id property="id" column="id"/>
        <result property="studyDescription" column="studyDescription"/>
        <result property="organizationalUnitId" column="organizationalUnitId"/>
        <result property="academicFieldCode" column="academicFieldCode"/>
        <result property="dateOfEstablishment" column="dateOfEstablishment" javaType="java.util.Date"/>
        <result property="startDate" column="startDate" javaType="java.util.Date"/>
        <result property="minimumMarkSubject" column="minimumMarkSubject"/>
        <result property="maximumMarkSubject" column="maximumMarkSubject"/>
        <result property="BRsPassingSubject" column="BRsPassingSubject"/>
        <result property="active" column="active"/>
        <collection property="studyGradeTypes" fetchType="lazy" select="findStudyGradeTypesForStudy" column="id"/>
        <collection property="subjectBlocks" fetchType="lazy" select="org.uci.opus.college.persistence.SubjectBlockMapper.findAllSubjectBlocksForStudy" column="id"/>
        <collection property="addresses" fetchType="lazy" select="findAllAddressesForStudy" column="id"/>
    </resultMap>

    <!-- resultmap to define complete StudyGradeType -->
    <resultMap id="StudyGradeTypeResultMap" type="StudyGradeType">
        <id property="id" column="id"/>
        <result property="studyId" column="studyId"/>
        <result property="studyGradeTypeCode" column="studyGradeTypeCode"/>
        <result property="gradeTypeCode" column="gradeTypeCode"/>
        <result property="currentAcademicYearId" column="currentAcademicYearId"/>
        <result property="cardinalTimeUnitCode" column="cardinalTimeUnitCode"/>
        <result property="numberOfCardinalTimeUnits" column="numberOfCardinalTimeUnits"/>
        <result property="maxNumberOfCardinalTimeUnits" column="maxNumberOfCardinalTimeUnits"/>
        <result property="numberOfSubjectsPerCardinalTimeUnit" column="numberOfSubjectsPerCardinalTimeUnit"/>
        <result property="maxNumberOfSubjectsPerCardinalTimeUnit" column="maxNumberOfSubjectsPerCardinalTimeUnit"/>
        <result property="maxNumberOfFailedSubjectsPerCardinalTimeUnit" column="maxNumberOfFailedSubjectsPerCardinalTimeUnit"/>
        <result property="BRsPassingSubject" column="BRsPassingSubject"/>
        <result property="studyTimeCode" column="studyTimeCode"/>
        <result property="studyFormCode" column="studyFormCode"/>
        <result property="studyIntensityCode" column="studyIntensityCode"/>
        <result property="maxNumberOfStudents" column="maxNumberOfStudents"/>
        <result property="contactId" column="contactId"/>
        <result property="disciplineGroupCode" column="disciplineGroupCode"/>
        <result property="active" column="active"/>
        <result property="studyDescription" column="studyDescription"/>
        <result property="gradeTypeDescription" column="gradeTypeDescription"/>
        <association property="study" select="findStudy" column="studyId"/>
        <association property="subjectsStudyGradeType" select="org.uci.opus.college.persistence.SubjectMapper.findSubjectsForStudyGradeType" column="id"/>
        <association property="subjectBlocksStudyGradeType" select="org.uci.opus.college.persistence.SubjectBlockMapper.findAllSubjectBlockStudyGradeTypes" column="id"/>
        <association property="studyGradeTypePrerequisites" select="findStudyGradeTypePrerequisites" column="id"/>        
        <association property="cardinalTimeUnitStudyGradeTypes" select="findCardinalTimeUnitStudyGradeTypes" column="id"/>
        <association property="classgroups" select="findClassgroupsByStudygradetypeId" column="id"/>
    </resultMap>

    <resultMap id="SecondarySchoolSubjectResultMap" type="SecondarySchoolSubject">
        <result property="id" column="id"/>
        <result property="description" column="description"/>
        <result property="secondarySchoolSubjectGroupId" column="secondarySchoolSubjectGroupId"/>
        <result property="minimumGradePoint" column="minimumGradePoint"/>
        <result property="maximumGradePoint" column="maximumGradePoint"/>
        <result property="weight" column="weight"/>
        <result property="grade" column="grade"/>
        <result property="gradedSecondarySchoolSubjectId" column="gradedSecondarySchoolSubjectId"/>
    </resultMap> 
    
    <resultMap id="ClassgroupResultMap" type="Classgroup">
        <result property="id" column="id"/>
        <result property="description" column="description"/>
        <result property="studyGradeTypeId" column="studyGradeTypeId"/>
        <result property="writeWho" column="writewho"/>
        <association property="subjectClassgroups" select="findSubjectClassgroupsForClassgroup" column="id"/>
    </resultMap>

    <resultMap id="SubjectClassgroupResultMap" type="SubjectClassgroup">
        <result property="id" column="id"/>
        <result property="subjectId" column="subjectId"/>
        <result property="classgroupId" column="classgroupId"/>
        <association property="subject" select="org.uci.opus.college.persistence.SubjectMapper.findSubject" column="subjectId"/>
    </resultMap>

    <select id="findAllStudies" parameterType="int" resultType="Study">
        select  *
        from    opuscollege.study
        order   by lower(studyDescription)
    </select>

    <!-- find one study -->
    <select id="findStudy" parameterType="int" resultMap="StudyResultMap"> 
        select *
        from   opuscollege.study
        where  id = #{studyId}
    </select>

    <!-- find one study by its name -->
    <select id="findStudyByNameUnit" parameterType="map" resultMap="StudyResultMap"> 
        select  *
        from    opuscollege.study
        where   studyDescription = #{studyDescription}
        AND     organizationalUnitId = #{organizationalUnitId}
        
    </select>

    <!-- find one study by its name -->
    <select id="findStudyByNameUnitAcademicField" parameterType="map" resultMap="StudyResultMap"> 
        select  *
        from    opuscollege.study
        where   studyDescription = #{studyDescription}
        AND     organizationalUnitId = #{organizationalUnitId}
        AND     academicFieldCode = #{academicFieldCode}
    </select>

    <!-- find all addresses for one Study -->
    <select id="findAllAddressesForStudy" parameterType="int" resultMap="org.uci.opus.college.persistence.AddressMapper.AddressResultMap">
        select opuscollege.address.id AS address_id, 
                opuscollege.address.addressTypeCode AS address_addressTypeCode, 
                opuscollege.address.organizationalUnitId AS address_organizationalUnitId, 
                opuscollege.address.personId AS address_personId, 
                opuscollege.address.studyId AS address_studyId, 
                opuscollege.address.street AS address_street, 
                opuscollege.address.number AS address_number, 
                opuscollege.address.numberExtension AS address_numberExtension, 
                opuscollege.address.zipCode AS address_zipCode, 
                opuscollege.address.POBOx AS address_POBox, 
                opuscollege.address.city AS address_city, 
                opuscollege.address.administrativePostCode AS address_administrativePostCode, 
                opuscollege.address.districtCode AS address_districtCode, 
                opuscollege.address.provinceCode AS address_provinceCode, 
                opuscollege.address.countryCode AS address_countryCode, 
                opuscollege.address.telephone AS address_telephone, 
                opuscollege.address.faxNumber AS address_faxNumber, 
                opuscollege.address.mobilePhone AS address_mobilePhone, 
                opuscollege.address.emailAddress AS address_emailAddress
        from opuscollege.address
        WHERE opuscollege.address.studyId = #{value}
    </select>

    <select id="findStudies" parameterType="map" resultType="Study">
        select study.* 
        from  opuscollege.study
        INNER JOIN opuscollege.organizationalunit on study.organizationalUnitId = organizationalunit.id
        INNER JOIN opuscollege.branch on branch.id = organizationalunit.branchId
        INNER JOIN opuscollege.institution on institution.id = branch.institutionId
        WHERE 1=1
        <if test='institutionTypeCode != null and institutionTypeCode != ""'>
            and institution.institutionTypeCode = #{institutionTypeCode}
        </if>
        <if test='institutionId != null and institutionId != "0"'>
            and institution.id = #{institutionId}
        </if>
        <if test='branchId != null and branchId != "0"'>
            and   branch.id = #{branchId}
        </if>
        <if test='organizationalUnitId != null and organizationalUnitId != "0"'>
            and organizationalunit.id in (select id from opuscollege.crawl_tree(#{organizationalUnitId}, 0))
        </if>
        <if test='organizationalUnitIds != null and organizationalUnitIds.size() > 0'>
            and organizationalunit.id in 
            <foreach collection="organizationalUnitIds" item="item" separator="," close=")" open="(">
                #{item}
            </foreach>
        </if>
        <if test='searchValue != null and searchValue != ""'>
            and opuscollege.remove_diacritics(lower(study.studyDescription)) like opuscollege.remove_diacritics(lower('%' || #{searchValue} || '%'))
        </if>
        <if test='studyIds != null and studyIds.size() > 0'>
            and study.id in
             <foreach item="item" collection="studyIds" open="(" separator="," close=")">
              #{item}
            </foreach>
        </if>
        <if test="existStudents != null">
            AND EXISTS
            (SELECT * from opuscollege.student
            INNER JOIN opuscollege.studyplan ON student.studentid = studyplan.studentid
            INNER JOIN opuscollege.studygradetype ON studyplan.studygradetypeid = studygradetype.id
            WHERE studygradetype.studyid = study.id)
        </if>
        <if test="personId != null">   <!-- limit to those studies that the student with given personId is subscribed to -->
            AND EXISTS
            (SELECT * from opuscollege.student
            INNER JOIN opuscollege.studyplan ON student.studentid = studyplan.studentid
            WHERE studyplan.studyid = study.id
            AND student.personid = #{personId})
        </if>
        ORDER BY lower(study.studyDescription)
    </select>
   
    <!-- find all Studies for universities -->
    <select id="findAllStudiesForUniversities" parameterType="map" resultType="Study"> 
        select opuscollege.study.* 
        from opuscollege.study
        INNER JOIN opuscollege.organizationalunit on opuscollege.study.organizationalUnitId = organizationalunit.id
        WHERE opuscollege.organizationalunit.branchId IN 
            (SELECT id from opuscollege.branch where institutionId IN 
                (SELECT id from opuscollege.institution where institutionTypeCode = '3') 
            )
        ORDER BY lower(study.studyDescription)
    </select>

    <!-- find all Studies for one institution -->
    <select id="findAllStudiesForInstitution" parameterType="map" resultType="Study"> 
        select opuscollege.study.* 
        from opuscollege.study
        INNER JOIN opuscollege.organizationalunit on opuscollege.study.organizationalUnitId = organizationalunit.id
        WHERE opuscollege.organizationalunit.branchId IN 
            (SELECT id from opuscollege.branch where institutionId = #{institutionId})
        ORDER BY lower(study.studyDescription)
    </select>

    <!-- find all Studies for one branch -->
    <select id="findAllStudiesForBranch" parameterType="map" resultType="Study"> 
        select opuscollege.study.* 
        from opuscollege.study
        INNER JOIN opuscollege.organizationalunit on opuscollege.study.organizationalUnitId = organizationalunit.id
        WHERE opuscollege.organizationalunit.branchId = #{branchId}
        ORDER BY lower(study.studyDescription)
    </select>

    <!-- find all Studies for one organizational unit -->
    <select id="findAllStudiesForOrganizationalUnit" parameterType="map" resultType="Study"> 
        select opuscollege.study.* 
        from opuscollege.study
        INNER JOIN opuscollege.organizationalunit on opuscollege.study.organizationalUnitId = organizationalunit.id
        WHERE opuscollege.organizationalunit.id in (select id from opuscollege.crawl_tree(#{organizationalUnitId}, 0))
        ORDER BY lower(study.studyDescription)
    </select>

    <!-- 
        find studyGradeTypes of a study, organizational unit, branch or
        institution, depending on the value of the given parameters
    -->        
<!--     <parameterMap id="findGradeTypesForSubjectStudiesParam" type="map"> -->
<!--         <parameter property="studyId"/> -->
<!--         <parameter property="preferredLanguage"/> -->
<!--         <parameter property="studyGradeTypeId"/> -->
<!--         <parameter property="subjectId"/> -->
<!--     </parameterMap> -->

    <!-- TODO: move to subject.xml -->
    <select id="findGradeTypesForSubjectStudies" parameterType="map" resultType="StudyGradeType">
        select  gradetype.code  as gradeTypeCode
        ,       gradetype.description as gradeTypeDescription
        ,       studyGradeType.id
        ,       studyGradeType.studyGradeTypeCode
        ,       studyGradeType.studyTimeCode
        ,       studyGradeType.studyFormCode
        ,       studyGradeType.studyIntensityCode
        ,       studyGradeType.currentAcademicYearId
        ,       studyGradeType.cardinalTimeUnitCode
        ,       studyGradeType.numberOfCardinalTimeUnits
        ,       studyGradeType.maxNumberOfCardinalTimeUnits
        ,       studyGradeType.numberOfSubjectsPerCardinalTimeUnit
        ,       studyGradeType.maxNumberOfSubjectsPerCardinalTimeUnit
        ,       studyGradeType.maxNumberOfFailedSubjectsPerCardinalTimeUnit
        ,       studyGradeType.maxNumberOfStudents
        ,       studyGradeType.BRsPassingSubject
        ,       studyGradeType.disciplineGroupCode
        ,       studyGradeType.active
        ,       study.id
        ,       study.studyDescription
        from opuscollege.gradetype
        INNER JOIN opuscollege.studygradetype on opuscollege.gradetype.code = opuscollege.studygradetype.gradetypecode
        INNER JOIN opuscollege.study on opuscollege.studygradetype.studyId = study.id
        inner join opuscollege.subjectStudyGradeType on studygradetype.id = subjectStudyGradeType.studygradetypeId
        WHERE opuscollege.gradetype.lang = #{preferredLanguage}
        <if test='studyId != null and studyId != "0"'>
            AND   opuscollege.study.id = #{studyId}        
        </if>
        <if test='currentAcademicYearId != null and currentAcademicYearId != "0"'>
            AND studygradetype.currentAcademicYearId = #{currentAcademicYearId}  
        </if>        
        and   subjectStudyGradeType.subjectId = #{subjectId}
        ORDER BY lower(gradetype.description)
    </select>   

    <!-- find all studyGradeTypes -->
    <select id="findAllStudyGradeTypes" resultType="StudyGradeType"> 
        select opuscollege.studyGradeType.* 
        from opuscollege.studyGradeType
    </select>

    <sql id="studyGradeType_fragment">
        select  gradetype.code          as gradeTypeCode
        ,       gradetype.description   as gradeTypeDescription
        ,       studyGradeType.id       as id
        ,       studyGradeType.studyGradeTypeCode           as studyGradeTypeCode
        ,       studyGradeType.studyTimeCode                as studyTimeCode
        ,       studyGradeType.studyFormCode                as studyFormCode
        ,       studyGradeType.studyIntensityCode           as studyIntensityCode
        ,       studyGradeType.currentAcademicYearId        as currentAcademicYearId
        ,       studyGradeType.cardinalTimeUnitCode         as cardinalTimeUnitCode
        ,       studyGradeType.numberOfCardinalTimeUnits    as numberOfCardinalTimeUnits
        ,       studyGradeType.maxNumberOfCardinalTimeUnits as maxNumberOfCardinalTimeUnits
        ,       studyGradeType.numberOfSubjectsPerCardinalTimeUnit      as numberOfSubjectsPerCardinalTimeUnit
        ,       studyGradeType.maxNumberOfSubjectsPerCardinalTimeUnit   as maxNumberOfSubjectsPerCardinalTimeUnit
        ,       studyGradeType.maxNumberOfFailedSubjectsPerCardinalTimeUnit   as maxNumberOfFailedSubjectsPerCardinalTimeUnit
        ,       studyGradeType.maxNumberOfStudents
        ,       studyGradeType.BRsPassingSubject            as BRsPassingSubject
        ,       studyGradeType.disciplineGroupCode
        ,       studyGradeType.active   as active
        ,       study.id                as studyId 
        ,       study.studyDescription  as studyDescription
    </sql>

    <sql id="admission_fromClause_fragment">
        from   opuscollege.study
        inner  join opuscollege.studyGradeType on studyGradeType.studyId = study.id
        INNER JOIN opuscollege.gradetype on studygradetype.gradetypecode = gradetype.code AND gradetype.lang = #{preferredLanguage}  
        inner  join opuscollege.academicYear on studyGradeType.currentAcademicyearId = academicYear.id
        inner  join opuscollege.organizationalunit on study.organizationalUnitId = organizationalunit.id
        inner  join opuscollege.admissionRegistrationConfig on organizationalunit.id = admissionRegistrationConfig.organizationalUnitId 
        where  admissionRegistrationConfig.academicyearId = studyGradeType.currentAcademicyearId
        and    admissionRegistrationConfig.startOfAdmission  &lt;=   now()::DATE
               and (  admissionRegistrationConfig.endOfAdmission  &gt;=  now()::DATE
                   or admissionRegistrationConfig.endOfAdmission is null)
        order  by lower(study.studyDescription)
    </sql>
 
    
     <select id="findStudyGradeTypesForAdmission" parameterType="string" resultType="StudyGradeType">
        <include refid="studyGradeType_fragment"/>
        <include refid="admission_fromClause_fragment"/>
    </select>
    
    <!--  list of studies that students can request admission to  resultMap="findStudiesForAdmissionMap"-->
    <select id="findStudiesForAdmission" parameterType="string" resultType="Study">
        select study.* 
        <include refid="admission_fromClause_fragment"/>
    </select>
    
    
    <!-- find all GradeTypes for one logged in user (extended information)-->
    <select id="findStudyGradeTypes" parameterType="map" resultType="StudyGradeType"> 
        <include refid="studyGradeType_fragment"/>
        from opuscollege.studygradetype
        INNER JOIN opuscollege.gradetype on studygradetype.gradetypecode = gradetype.code AND gradetype.lang = #{preferredLanguage}  
        INNER JOIN opuscollege.study on opuscollege.studygradetype.studyId = opuscollege.study.id
        INNER JOIN opuscollege.organizationalunit on opuscollege.study.organizationalUnitId = organizationalunit.id
        INNER JOIN opuscollege.branch on opuscollege.branch.id = organizationalunit.branchId
        INNER JOIN opuscollege.institution on opuscollege.institution.id = branch.institutionId
        INNER JOIN opuscollege.academicyear on opuscollege.studyGradeType.currentAcademicYearId = opuscollege.academicyear.id
        WHERE true
        <if test='institutionTypeCode != null and institutionTypeCode != ""'>
            AND institution.institutionTypeCode = #{institutionTypeCode}
        </if>
        <if test='institutionId != null and institutionId != "0"'>
            AND opuscollege.institution.id = #{institutionId}
        </if>
        <if test='branchId != null and branchId != "0"'>
            AND   opuscollege.branch.id = #{branchId}
        </if>
        <if test='organizationalUnitId != null and organizationalUnitId != "0"'>
            AND opuscollege.organizationalunit.id in (select id from opuscollege.crawl_tree(#{organizationalUnitId}, 0))       
        </if>
        <if test='organizationalUnitIds != null and organizationalUnitIds.size() > 0'>
            and organizationalunit.id in 
            <foreach collection="organizationalUnitIds" item="item" separator="," close=")" open="(">
                #{item}
            </foreach>
        </if>
        <if test='studyId != null and studyId != "0"'>
            AND opuscollege.study.id = #{studyId} 
        </if>
        <if test='currentAcademicYearId != null and currentAcademicYearId != "0"'>
            AND opuscollege.studyGradeType.currentAcademicYearId = #{currentAcademicYearId} 
        </if>
        <if test='currentAcademicYearIds != null and currentAcademicYearIds.size() > 0'>
            AND studyGradeType.currentAcademicYearId IN
            <foreach collection="currentAcademicYearIds" item="item" separator="," close=")" open="(">
              #{item}
            </foreach>
        </if>
        <if test='studyGradeTypeIds != null and studyGradeTypeIds.size() > 0'>
            AND studyGradeType.id IN
            <foreach collection="studyGradeTypeIds" item="item" separator="," close=")" open="(">
              #{item}
            </foreach>
        </if>
        <if test="personId != null">   <!-- limit to those study grade types that the student with given personId is subscribed to -->
            AND EXISTS
            (SELECT * from opuscollege.student
            INNER JOIN opuscollege.studyplan ON student.studentid = studyplan.studentid
            INNER JOIN opuscollege.studyplancardinaltimeunit ON studyplancardinaltimeunit.studyplanid = studyplan.id
            WHERE studyplancardinaltimeunit.studygradetypeid = studygradetype.id
            AND student.personid = #{personId})
        </if>
        <if test='searchValue != null and searchValue != ""'>
            AND (
                opuscollege.remove_diacritics(
                    lower(study.studyDescription) || ' - ' || 
                    lower(gradetype.description)
                ) like opuscollege.remove_diacritics(lower('%' || #{searchValue} || '%'))
            )
            
        </if>
        ORDER BY lower(studyDescription) ASC , lower(gradetype.description) ASC, academicyear.startdate DESC
    </select>

    <!-- find number of cardinal time units for a gradeType -->
    <select id="findBRsPassingSubjectForStudyGradeType" parameterType="map" resultType="String">
        select  brsPassingSubject
        from    opuscollege.studyGradeType
        where   studyId = #{studyId}
        AND     gradeTypeCode = #{gradeTypeCode}
        AND     currentAcademicYearId = #{currentAcademicYearId}
    </select>
    
    <!-- find all subjects for one Study (dry) -->
    <select id="findSubjectsForStudy" parameterType="int" resultType="Subject"> 
        select opuscollege.subject.* 
        from opuscollege.subject
        WHERE opuscollege.subject.primaryStudyId = #{studyId}
    </select>

    <!-- find all GradeTypes for one Study (dry) -->
    <select id="findStudyGradeTypesForStudy" parameterType="int" resultType="StudyGradeType"> 
        select  opuscollege.studygradetype.* 
        from opuscollege.studygradetype
        WHERE opuscollege.studyGradeType.studyId = #{studyId}
    </select>

    <!-- find all GradeTypes for one Study (extended information)-->
    <select id="findAllStudyGradeTypesForStudy" parameterType="map" resultMap="StudyGradeTypeResultMap">
        select  gradetype.code                              as gradeTypeCode
        ,       gradetype.description                       as gradeTypeDescription
        ,       studyGradeType.id                           as id
        ,       studyGradeType.studyGradeTypeCode           as studyGradeTypeCode
        ,       studyGradeType.currentAcademicYearid        as currentAcademicYearid
        ,       studyGradeType.cardinalTimeUnitCode         as cardinalTimeUnitCode
        ,       studyGradeType.numberOfCardinalTimeUnits    as numberOfCardinalTimeUnits
        ,       studyGradeType.maxNumberOfCardinalTimeUnits as maxNumberOfCardinalTimeUnits
        ,       studyGradeType.numberOfSubjectsPerCardinalTimeUnit      as numberOfSubjectsPerCardinalTimeUnit
        ,       studyGradeType.maxNumberOfSubjectsPerCardinalTimeUnit   as maxNumberOfSubjectsPerCardinalTimeUnit
        ,       studyGradeType.maxNumberOfFailedSubjectsPerCardinalTimeUnit   as maxNumberOfFailedSubjectsPerCardinalTimeUnit
        ,       studyGradeType.maxNumberOfStudents
        ,       studyGradeType.studyTimeCode                as studyTimeCode
        ,       studyGradeType.studyFormCode                as studyFormCode
        ,       studyGradeType.studyIntensityCode           as studyIntensityCode
        ,       studyGradeType.disciplineGroupCode
        ,       studyGradeType.active                       as active
        ,       study.id                                    as studyId 
        ,       study.studyDescription                      as studyDescription
        from opuscollege.gradetype
        INNER JOIN opuscollege.studygradetype on opuscollege.gradetype.code = opuscollege.studygradetype.gradetypecode
        INNER JOIN opuscollege.study on opuscollege.studygradetype.studyId = opuscollege.study.id
        WHERE opuscollege.gradetype.lang = #{preferredLanguage}
        AND opuscollege.studyGradeType.studyId = #{studyId}
        <if test='gradeTypeCode != null and gradeTypeCode != ""'>
           and studygradetype.gradeTypeCode = #{gradeTypeCode}  
        </if>        
        <if test='currentAcademicYearId != null and currentAcademicYearId != "0"'>
           and studygradetype.currentAcademicYearId = #{currentAcademicYearId}  
        </if>
        <if test="academicYearIdsForAdmission != null">
            and studygradetype.currentAcademicYearId in
            <foreach collection="academicYearIdsForAdmission" item="item" separator="," close=")" open="(">
                #{item}  
            </foreach>
        </if>
        <if test='existStudents != null and existStudents != ""'>
            AND EXISTS
            (SELECT * from opuscollege.student
            INNER JOIN opuscollege.studyplan ON student.studentid = studyplan.studentid
            WHERE studyplan.studygradetypeid = studygradetype.id)
        </if>
        ORDER BY lower(gradetype.description)
    </select>
    
    <select id="findDistinctStudyGradeTypesForStudy" parameterType="map" resultType="StudyGradeType"> 
        select  distinct gradeType.code      as gradeTypeCode         
        ,       gradeType.description        as gradeTypeDescription   
        ,       lower(gradeType.description)   
        from    opusCollege.gradeType
        inner   join opusCollege.studyGradeType on gradeType.code = studyGradeType.gradeTypeCode
        inner   join opusCollege.study on studyGradeType.studyId = study.id
        where   gradeType.lang = #{preferredLanguage}
        and     studyGradeType.studyId = #{studyId}
        <if test="currentAcademicYearId != null">
        and     studyGradeType.currentAcademicYearId = #{currentAcademicYearId}
        </if>
        order   by lower(gradeType.description)
    </select>

    <!-- find one studyGradeType -->
    <select id="findStudyGradeType" parameterType="int" resultMap="StudyGradeTypeResultMap">
        select studyGradeType.* ,
                study.studyDescription,
                '' AS gradeTypeDescription
        FROM opuscollege.studygradetype
        INNER JOIN opuscollege.study on opuscollege.studygradetype.studyId = opuscollege.study.id
        WHERE  studygradetype.id = #{value}
    </select>
    
    <!-- find one studyGradeType -->
    <select id="findStudyGradeTypeConsiderLanguage" parameterType="map" resultMap="StudyGradeTypeResultMap"> 
        select  opuscollege.studyGradeType.*
        ,       study.studyDescription
        ,       gradetype.description AS gradeTypeDescription
        FROM    opuscollege.gradetype
        INNER   JOIN opuscollege.studygradetype on gradetype.code = studygradetype.gradetypecode
        INNER   JOIN opuscollege.study on studygradetype.studyId = study.id
        and     gradeType.lang = #{preferredLanguage}
        WHERE   studygradetype.id = #{studyGradeTypeId}
    </select>

    <!-- find one studyGradeType by studyId and gradeTypeCode -->
    <select id="findStudyGradeTypeByStudyAndGradeType" parameterType="map" resultMap="StudyGradeTypeResultMap"> 
        select  studyGradeType.*
        ,       study.studyDescription
        ,       gradeType.description AS gradeTypeDescription
        from    opusCollege.gradeType
        inner   join opusCollege.studyGradeType on gradeType.code = studyGradeType.gradeTypeCode
        inner   join opusCollege.study on studyGradeType.studyId = study.id
        where   studyId = #{studyId}
        and     gradeTypeCode = #{gradeTypeCode}
        and     currentAcademicYearId = #{currentAcademicYearId}
        and     studyFormCode = #{studyFormCode}
        and     studyTimeCode = #{studyTimeCode}
        <if test='studyIntensityCode != null and studyIntensityCode != ""'>
            and     studyIntensityCode = #{studyIntensityCode}
        </if>
    </select>
    
    <!-- find one studyGradeType by several params -->
    <select id="findStudyGradeTypeByParams" parameterType="map" resultMap="StudyGradeTypeResultMap"> 
        select opuscollege.studyGradeType.* ,
        study.studyDescription,
        gradetype.description AS gradeTypeDescription
        FROM opuscollege.studygradetype
        INNER JOIN opuscollege.gradetype on gradetype.code = studygradetype.gradetypecode and gradetype.lang = #{preferredLanguage}
        INNER JOIN opuscollege.study on studygradetype.studyId = study.id
        WHERE true
        <if test='studyId != null and studyId != "0"'>
            AND studyId = #{studyId}
        </if>
        <if test='gradeTypeCode != null and gradeTypeCode != ""'>
            AND gradeTypeCode = #{gradeTypeCode}
        </if>
        <if test='currentAcademicYearId != null and currentAcademicYearId != "" and currentAcademicYearId != "0"'>
            AND currentAcademicYearId = #{currentAcademicYearId}
        </if>
        <if test='studyTimeCode != null and studyTimeCode != ""'>
            AND studyTimeCode = #{studyTimeCode}
        </if>
        <if test='studyFormCode != null and studyFormCode != ""'>
            AND studyFormCode = #{studyFormCode}
        </if>
        <if test='studyIntensityCode != null and studyIntensityCode != ""'>
            AND    studyIntensityCode = #{studyIntensityCode}
        </if>
    </select>

    <!-- find one studyGradeType by several params -->
    <select id="findStudyGradeTypesByParams" parameterType="map" resultMap="StudyGradeTypeResultMap"> 
        select opuscollege.studyGradeType.* ,
                study.studyDescription,
                gradetype.description AS gradeTypeDescription
        FROM    opuscollege.studygradetype
        INNER JOIN opuscollege.gradetype on gradetype.code = studygradetype.gradetypecode and gradetype.lang = #{preferredLanguage}
        INNER JOIN opuscollege.study on studygradetype.studyId = study.id
        WHERE true
        <if test='studyId != null and studyId != "0"'>
            AND studyId = #{studyId}
        </if>
        <if test='gradeTypeCode != null and gradeTypeCode != ""'>
            AND gradeTypeCode = #{gradeTypeCode}
        </if>
        <if test='currentAcademicYearId != null and currentAcademicYearId != "" and currentAcademicYearId != "0"'>
            AND currentAcademicYearId = #{currentAcademicYearId}
        </if>
        <if test='studyTimeCode != null and studyTimeCode != ""'>
            AND studyTimeCode = #{studyTimeCode}
        </if>
        <if test='studyFormCode != null and studyFormCode != ""'>
            AND studyFormCode = #{studyFormCode}
        </if>
        <if test='studyIntensityCode != null and studyIntensityCode != ""'>
            AND    studyIntensityCode = #{studyIntensityCode}
        </if>
    </select>

    <!-- Read a plain study grade type record without gradetypedescription (so no preferredlanguage parameter is required) -->
    <select id="findPlainStudyGradeType" parameterType="map" resultMap="StudyGradeTypeResultMap"> 
        select opuscollege.studyGradeType.* ,
        study.studyDescription,
        '' AS gradeTypeDescription
        FROM opuscollege.studygradetype
        INNER JOIN opuscollege.study on studygradetype.studyId = study.id
        WHERE true
        <if test='studyGradeTypeId != null and studyGradeTypeId != "0"'>
            AND studyGradeType.id = #{studyGradeTypeId}
        </if>
        <if test='studyId != null and studyId != "0"'>
            AND studyId = #{studyId}
        </if>
        <if test='gradeTypeCode != null and gradeTypeCode != ""'>
            AND gradeTypeCode = #{gradeTypeCode}
        </if>
        <if test='currentAcademicYearId != null and currentAcademicYearId != "" and currentAcademicYearId != "0"'>
            AND currentAcademicYearId = #{currentAcademicYearId}
        </if>
        <if test='studyTimeCode != null and studyTimeCode != ""'>
            AND studyTimeCode = #{studyTimeCode}
        </if>
        <if test='studyFormCode != null and studyFormCode != ""'>
            AND studyFormCode = #{studyFormCode}
        </if>
        <if test='studyIntensityCode != null and studyIntensityCode != ""'>
            AND    studyIntensityCode = #{studyIntensityCode}
        </if>
    </select>

    <select id="findStudyGradeTypePrerequisites" parameterType="int" resultType="StudyGradeTypePrerequisite"> 
        select  *
        FROM    opuscollege.StudyGradeTypePrerequisite
        where   studyGradeTypeId = #{value}
    </select>

    <!-- find all studyplans for one studyGradeType -->
    <select id="findStudyPlansForStudyGradeType" parameterType="int" resultType="StudyPlan">
        select *
        from   opuscollege.studyPlan
        INNER JOIN opuscollege.studyPlanDetail ON studyPlan.id = studyPlanDetail.studyPlanId
        where  studyPlanDetail.studyGradeTypeId = #{value}
    </select>

    <!-- find all studyplans for one studyGradeType -->
    <select id="findGradedSecondarySchoolSubjectIdsForStudyPlan" parameterType="map" resultType="Integer">
        select  distinct(gradedsecondaryschoolsubject.id)
            from    opuscollege.gradedsecondaryschoolsubject
            INNER join opusCollege.secondaryschoolsubject on secondaryschoolsubject.id = gradedsecondaryschoolsubject.secondaryschoolsubjectid        
            INNER join opusCollege.groupedsecondaryschoolsubject on secondaryschoolsubject.id = groupedsecondaryschoolsubject.secondaryschoolsubjectid        
            INNER join opusCollege.secondaryschoolsubjectgroup on groupedsecondaryschoolsubject.secondaryschoolsubjectgroupid = secondaryschoolsubjectgroup.id        
            INNER JOIN opusCollege.studyplancardinaltimeunit on (
                secondaryschoolsubjectgroup.studygradetypeid = studyplancardinaltimeunit.studygradetypeid
                AND     studyplancardinaltimeunit.studyplanId = gradedsecondaryschoolsubject.studyplanid)
            WHERE   gradedsecondaryschoolsubject.studyplanid = #{studyPlanId}
        <if test="secondarySchoolSubjectGroupId != null">
            AND   gradedsecondaryschoolsubject.secondarySchoolSubjectGroupId = #{secondarySchoolSubjectGroupId}
        </if>
            
    </select>

    <!-- find all studyplans for one studyGradeType -->
    <select id="findGradedSecondarySchoolSubjectForStudyPlan" parameterType="map" resultType="SecondarySchoolSubject">
        select  gradedsecondaryschoolsubject.id                         as id
        ,       gradedsecondaryschoolsubject.secondaryschoolsubjectid   as gradedSecondarySchoolSubjectId
        ,       gradedsecondaryschoolsubject.secondaryschoolsubjectgroupid as secondaryschoolsubjectgroupid
        ,       gradedsecondaryschoolsubject.grade                      as grade
        ,       gradedsecondaryschoolsubject.level                      as level
        ,       groupedsecondaryschoolsubject.minimumGradePoint         as minimumGradePoint
        ,       groupedsecondaryschoolsubject.maximumGradePoint         as maximumGradePoint
        ,       groupedsecondaryschoolsubject.weight                    as weight
        ,       secondaryschoolsubject.description                      as description
        from opusCollege.gradedsecondaryschoolsubject
        INNER JOIN opusCollege.secondaryschoolsubject on 
                gradedsecondaryschoolsubject.secondaryschoolsubjectid = secondaryschoolsubject.id 
        INNER join opusCollege.groupedsecondaryschoolsubject on ( 
                gradedsecondaryschoolsubject.secondaryschoolsubjectgroupid = groupedsecondaryschoolsubject.secondaryschoolsubjectgroupid  
                AND gradedsecondaryschoolsubject.secondaryschoolsubjectid = groupedsecondaryschoolsubject.secondaryschoolsubjectid
            )
        INNER JOIN opusCollege.secondaryschoolsubjectgroup on gradedsecondaryschoolsubject.secondaryschoolsubjectgroupid = secondaryschoolsubjectgroup.id        
        WHERE   gradedsecondaryschoolsubject.studyplanid = #{studyPlanId}
        AND   gradedsecondaryschoolsubject.id = #{gradedSecondarySchoolSubjectId}
        <if test="secondarySchoolSubjectGroupId != null">
            AND   gradedsecondaryschoolsubject.secondarySchoolSubjectGroupId = #{secondarySchoolSubjectGroupId}
        </if>
    </select>

    <!--  Find all academic years for org. unit     -->
    <select id="findAllAcademicYears" parameterType="map" resultType="AcademicYear">
        SELECT DISTINCT
            academicYear.*
        FROM opusCollege.academicYear
        INNER JOIN opusCollege.studyGradeType ON academicYear.id = studyGradetype.currentAcademicYearId
        INNER JOIN opusCollege.study ON studyGradetype.studyId = study.id
        INNER JOIN opusCollege.organizationalUnit ON study.organizationalUnitId = organizationalUnit.id
        WHERE true
        <if test='organizationalUnitId != null and organizationalUnitId != "0"'>
            AND organizationalUnit.id = #{organizationalUnitId}
        </if>
        <if test='studyId != null and studyId != "0"'>
            AND study.id = #{studyId}
        </if>
        <if test='studyGradeTypeId != null and studyGradeTypeId != "0"'>
            AND studygradetype.id = #{studyGradeTypeId}
        </if>
        ORDER BY academicYear.description DESC
    </select>
    
    <select id="findAcademicYear" parameterType="int" resultType="AcademicYear">
        select *
        from   opuscollege.academicYear
        where  id = #{value}
    </select>

    <select id="findAcademicYearIdForStudyGradeTypeId" parameterType="int" resultType="int">
        select currentAcademicYearId
        from   opuscollege.studyGradeType
        where  id = #{value}
    </select>

    <select id="findAcademicYearIdForSubjectStudyGradeTypeId" parameterType="int" resultType="int">
        select currentAcademicYearId
        from   opuscollege.studyGradeType
        inner join opuscollege.subjectStudyGradeType on subjectStudyGradeType.studyGradeTypeId = studyGradeType.id
        where  subjectStudyGradeType.id = #{value}
    </select>

    <select id="findAcademicYearIdForSubjectBlockStudyGradeTypeId" parameterType="int" resultType="int">
        select currentAcademicYearId
        from   opuscollege.studyGradeType
        inner join opuscollege.subjectBlockStudyGradeType on subjectBlockStudyGradeType.studyGradeTypeId = studyGradeType.id
        where  subjectBlockStudyGradeType.id = #{value}
    </select>

    <insert id="addStudy" parameterType="Study">
        insert into opuscollege.study
        ( 
         studyDescription 
        , organizationalUnitId
        , academicFieldCode
        , dateOfEstablishment
        , minimumMarkSubject
        , maximumMarkSubject
        , BRsPassingSubject
        , startDate
        , active
        ) values
        ( 
        #{studyDescription}
        , #{organizationalUnitId}
        , #{academicFieldCode}
        , #{dateOfEstablishment}
        , #{minimumMarkSubject}
        , #{maximumMarkSubject}
        , #{BRsPassingSubject}
        , #{startDate}
        , #{active}
        )
        <!-- http://opensource.atlassian.com/confluence/oss/pages/viewpage.action?pageId=407 -->
        <selectKey keyProperty="id" resultType="int">
            SELECT currVal('opuscollege.studySeq')
        </selectKey>
         <!--<selectKey keyProperty="id" resultClass="int" >
            SELECT cast(last_value as int) AS value
            FROM opuscollege.studySeq
        </selectKey> -->
    </insert>

    <update id="updateStudy" parameterType="Study">
        update  opuscollege.study
        set     studyDescription        = #{studyDescription}
        ,       organizationalUnitId    = #{organizationalUnitId}
        ,       academicFieldCode       = #{academicFieldCode}
        ,       dateOfEstablishment     = #{dateOfEstablishment}
        ,       startDate               = #{startDate}
        ,       minimumMarkSubject      = #{minimumMarkSubject}
        ,       maximumMarkSubject      = #{maximumMarkSubject}
        ,       BRsPassingSubject       = #{BRsPassingSubject}
        ,       active                  = #{active}
        where   id = #{id}
    </update>
    
    <delete id="deleteStudy" parameterType="int">
        delete from opuscollege.Study
        where  id = #{value}
    </delete>

   <insert id="addStudyGradeType" parameterType="StudyGradeType">
        insert into opuscollege.studyGradeType
        ( studyId
        , studyGradeTypeCode
        , gradeTypeCode
        , active
        , studyTimeCode
        , studyFormCode
        <if test='studyIntensityCode != null and studyIntensityCode != ""'>
            , studyIntensityCode
        </if>
        , currentAcademicYearId
        , cardinalTimeUnitCode
        , numberOfCardinalTimeUnits
        , maxNumberOfCardinalTimeUnits
        , numberOfSubjectsPerCardinalTimeUnit
        , maxNumberOfSubjectsPerCardinalTimeUnit
        , maxNumberOfFailedSubjectsPerCardinalTimeUnit
        , maxNumberOfStudents
        , contactId
        , BRsPassingSubject
        , disciplineGroupCode
        ) values
        ( #{studyId}
        , #{studyGradeTypeCode}
        , #{gradeTypeCode}
        , #{active}
        , #{studyTimeCode}
        , #{studyFormCode}
        <if test='studyIntensityCode != null and studyIntensityCode != ""'>
            , #{studyIntensityCode}
        </if>
        , #{currentAcademicYearId}
        , #{cardinalTimeUnitCode}
        , #{numberOfCardinalTimeUnits}
        , #{maxNumberOfCardinalTimeUnits}
        , #{numberOfSubjectsPerCardinalTimeUnit}
        , #{maxNumberOfSubjectsPerCardinalTimeUnit}
        , #{maxNumberOfFailedSubjectsPerCardinalTimeUnit}
        , #{maxNumberOfStudents}
        , #{contactId}
        , #{BRsPassingSubject}
        , #{disciplineGroupCode}
        )
       <selectKey keyProperty="id" resultType="int">
            SELECT currval('opuscollege.studyGradeTypeSeq')
       </selectKey>
    </insert>

    <select id="alreadyExistsStudyGradeTypeCode" parameterType="map" resultType="boolean">
        SELECT EXISTS (
            SELECT 1 FROM opuscollege.studygradetype
            WHERE id != #{id}
            AND studyGradeTypeCode = #{studyGradeTypeCode}
            AND currentAcademicYearId = #{currentAcademicYearId}
        )
    </select>
    
    <!-- find all CardinalTimeUnitStudyGradeTypes for one studyGradeType -->
    <select id="findCardinalTimeUnitStudyGradeTypes" parameterType="int" resultType="CardinalTimeUnitStudyGradeType">
        select  *
        from    opuscollege.cardinaltimeunitstudygradetype
        where   studyGradeTypeId = #{value}
        order   by cardinaltimeunitnumber
    </select>    

    <!-- find a specific CardinalTimeUnitStudyGradeType for a studyGradeType -->
    <select id="findCardinalTimeUnitStudyGradeTypeByParams" parameterType="map" resultType="CardinalTimeUnitStudyGradeType">
        select  *
        from    opuscollege.cardinaltimeunitstudygradetype
        where   studyGradeTypeId = #{studyGradeTypeId}
        and     cardinalTimeUnitNumber = #{cardinalTimeUnitNumber}
    </select>    
    
    <insert id="addCardinalTimeUnitStudyGradeType" parameterType="CardinalTimeUnitStudyGradeType"> 
        insert into opuscollege.cardinaltimeunitstudygradetype
        ( studygradetypeid
        , cardinaltimeunitnumber 
        , numberofelectivesubjectblocks
        , numberofelectivesubjects                    
        ) values
        ( #{studyGradeTypeId}
        , #{cardinalTimeUnitNumber}
        , #{numberOfElectiveSubjectBlocks}
        , #{numberOfElectiveSubjects}               
        )
       <selectKey keyProperty="id" resultType="int">
            SELECT currval('opuscollege.cardinalTimeUnitStudyGradeTypeSeq')
       </selectKey>
    </insert> 
    
    <delete id="deleteCardinalTimeUnitStudyGradeTypes" parameterType="int">
        delete from opuscollege.cardinaltimeunitstudygradetype
        where  studygradetypeid = #{value}
    </delete>
    
    <update id="updateStudyGradeType" parameterType="StudyGradeType">
        update  opuscollege.studyGradeType
        set     studyId                         = #{studyId}
        ,       studyGradeTypeCode              = #{studyGradeTypeCode}
        ,       gradeTypeCode                   = #{gradeTypeCode}
        ,       active                          = #{active}
        ,       studyTimeCode                   = #{studyTimeCode}
        ,       studyFormCode                   = #{studyFormCode}
        <if test='studyIntensityCode != null and studyIntensityCode != ""'>
            ,       studyIntensityCode              = #{studyIntensityCode}
        </if>
        ,       currentAcademicYearId           = #{currentAcademicYearId}
        ,       cardinalTimeUnitCode            = #{cardinalTimeUnitCode}
        ,       numberOfCardinalTimeUnits       = #{numberOfCardinalTimeUnits}
        ,       maxNumberOfCardinalTimeUnits        = #{maxNumberOfCardinalTimeUnits}
        ,       numberOfSubjectsPerCardinalTimeUnit = #{numberOfSubjectsPerCardinalTimeUnit}
        ,       maxNumberOfSubjectsPerCardinalTimeUnit = #{maxNumberOfSubjectsPerCardinalTimeUnit}
        ,       maxNumberOfFailedSubjectsPerCardinalTimeUnit = #{maxNumberOfFailedSubjectsPerCardinalTimeUnit}
        ,       maxNumberOfStudents             = #{maxNumberOfStudents}
        ,       contactId                       = #{contactId}
        ,       BRsPassingSubject               = #{BRsPassingSubject}
        ,       disciplineGroupCode             = #{disciplineGroupCode}
        where   id = #{id}
    </update>
    
    <delete id="deleteStudyGradeType" parameterType="int">
        delete from opuscollege.StudyGradeType
        where  id = #{value}
    </delete>

    <insert id="addStudyGradeTypePrerequisite" parameterType="StudyGradeTypePrerequisite">
        insert  into opuscollege.StudyGradeTypePrerequisite
        ( studyGradeTypeId
        , requiredStudyId
        , requiredGradeTypeCode
        , active
        ) values
        ( #{studyGradeTypeId}
        , #{requiredStudyId}
        , #{requiredGradeTypeCode}
        , #{active}
        )
    </insert>
    
    <delete id="deleteStudyGradeTypePrerequisite" parameterType="StudyGradeTypePrerequisite">
        delete  from opuscollege.StudyGradeTypePrerequisite
        where   studyGradeTypeId = #{studyGradeTypeId}
        and     requiredStudyId = #{requiredStudyId}
        and     requiredGradeTypeCode = #{requiredGradeTypeCode}
    </delete>
    
    <delete id="deleteStudyGradeTypePrerequisites" parameterType="int">
        delete  from opuscollege.StudyGradeTypePrerequisite
        where   studyGradeTypeId = #{studyGradeTypeId}
    </delete>

    <!-- find max number of cardinal time units for a studyGradeType -->
    <select id="findMaxCardinalTimeUnitNumberForStudyGradeType" parameterType="int" resultType="int">
        select maxNumberOfCardinalTimeUnits
        from   opuscollege.studyGradeType
        where  id = #{value}
    </select>

    <!-- find number of cardinal time units for a studyGradeType -->
    <select id="findNumberOfCardinalTimeUnitsForStudyGradeType" parameterType="int" resultType="int">
        select numberOfCardinalTimeUnits
        from   opuscollege.studyGradeType
        where  id = #{value}
    </select>

    <!-- find number of cardinal time units for a gradeType -->
    <select id="findNumberOfCardinalTimeUnitsForStudyAndGradeType" parameterType="map" resultType="int">
        select max(numberOfCardinalTimeUnits)
        from   opuscollege.studyGradeType
        where  studyId = #{studyId}
        AND     gradeTypeCode = #{gradeTypeCode}
    </select>

    <!-- find number of cardinal time units for a gradeType -->
    <select id="findNumberOfCardinalTimeUnitsForStudyPlan" parameterType="int" resultType="int">
        select max(cardinalTimeUnitNumber)
        from   opuscollege.studyPlanCardinalTimeUnit
        where  studyPlanId = #{value}
    </select>

    <!-- find all EndGrade for a language -->
    <select id="findAllEndGrades" parameterType="map" resultType="EndGrade"> 
        select  opuscollege.endGrade.* 
        from opuscollege.endGrade
        WHERE lang = #{preferredLanguage}
        <if test='endGradeTypeCode != null and endGradeTypeCode != ""'>
            AND endGradeTypeCode = #{endGradeTypeCode}
        </if>
        <if test='academicYearId != null and academicYearId != "0"'>
            AND endgrade.academicYearId = #{academicYearId}
        </if>
        ORDER BY endGrade.percentageMin DESC
    </select>

    
    <!-- load as little as possible for curriculum transition -->
    <select id="findStudyGradeTypesForTransition" parameterType="map" resultType="org.uci.opus.college.domain.curriculumtransition.StudyGradeTypeCT">
        select
        studygradetype.id AS originalId
        , studygradetype.studyId
        , studygradetype.gradeTypeCode
        , exists (
            select sgt2.id from opuscollege.studygradetype sgt2 
            where sgt2.studyId = studygradetype.studyId
            and sgt2.gradeTypeCode = studygradetype.gradeTypeCode
            and sgt2.studyTimeCode = studygradetype.studyTimeCode
            and sgt2.studyFormCode = studygradetype.studyFormCode
            and sgt2.studyIntensityCode = studygradetype.studyIntensityCode
            and sgt2.currentAcademicYearId = #{toAcademicYearId}
            ) AS targetExists
        , exists (
            select ssgt3.id from opuscollege.subjectstudygradetype ssgt3
            where ssgt3.studyGradeTypeId = studygradetype.id
        ) AS hasAssociatedSubjects
        from  opuscollege.studygradetype
        INNER JOIN opuscollege.study on studygradetype.studyId = study.id
        INNER JOIN opuscollege.organizationalunit on study.organizationalUnitId = organizationalunit.id
        INNER JOIN opuscollege.branch on branch.id = organizationalunit.branchId
        INNER JOIN opuscollege.institution on institution.id = branch.institutionId
        WHERE studygradetype.currentAcademicYearid = #{fromAcademicYearId}
        <if test='institutionId != null and institutionId != "0"'>
            AND institution.id = #{institutionId}
        </if>
        <if test='branchId != null and branchId != "0"'>
            AND branch.id = #{branchId}
        </if>
        <if test='organizationalUnitId != null and organizationalUnitId != "0"'>
            AND organizationalunit.id in (select id from opuscollege.crawl_tree(#{organizationalUnitId}, 0))
        </if>
        <if test='studyId != null and studyId != "0"'>
            AND study.id = #{studyId} 
        </if>
        <if test='searchValue != null and searchValue != ""'>
            AND opuscollege.remove_diacritics(lower(study.studyDescription)) like opuscollege.remove_diacritics(lower('%' || #{searchValue} || '%'))
        </if>
        order by studygradetype.studyId
        
     </select>

    <insert id="transferStudyGradeType" parameterType="map">
        insert into opuscollege.studygradetype
        ( studyId
        , studyGradeTypeCode
        , gradeTypeCode
        , active
        , contactId
        , registrationDate
        , studyTimeCode 
        , studyFormCode
        , studyIntensityCode 
        , currentAcademicYearId
        , cardinalTimeUnitCode
        , numberOfCardinalTimeUnits
        , maxNumberOfCardinalTimeUnits
        , numberOfSubjectsPerCardinalTimeUnit
        , maxNumberOfSubjectsPerCardinalTimeUnit
        , maxNumberOfFailedSubjectsPerCardinalTimeUnit        
        , brsPassingSubject
        , disciplineGroupCode
        , maxnumberOfStudents
        )
        select studyId
        , studyGradeTypeCode
        , gradeTypeCode
        , active
        , contactId
        , registrationDate
        , studyTimeCode
        , studyFormCode
        , studyIntensityCode
        , #{toAcademicYearId}
        , cardinalTimeUnitCode
        , numberOfCardinalTimeUnits
        , maxNumberOfCardinalTimeUnits
        , numberOfSubjectsPerCardinalTimeUnit
        , maxNumberOfSubjectsPerCardinalTimeUnit
        , maxNumberOfFailedSubjectsPerCardinalTimeUnit
        , brsPassingSubject
        , disciplineGroupCode
        , maxnumberOfStudents
        from opuscollege.studygradetype
        where id = #{studyGradeTypeCT.originalId}
        <selectKey keyProperty="studyGradeTypeCT.newId" resultType="int">
            SELECT currVal('opuscollege.studygradetypeseq')
        </selectKey>
    </insert>

    <!-- TODO order by sourcestudygradetypeprerequisite.id once the table has an id column
         (id is better than writewhen because writewhen could be identical for previously transferred records.
    -->
    <insert id="transferStudyGradeTypePrerequisites" parameterType="map">
        insert into opuscollege.studygradetypeprerequisite
                ( studyGradeTypeId
                , requiredStudyId
                , requiredGradeTypeCode
                , active
                ) select
                  targetstudygradetype.id
                , targetrequiredstudygradetype.studyid
                , targetrequiredstudygradetype.gradeTypeCode
                , sourcestudygradetypeprerequisite.active
                from opuscollege.studygradetypeprerequisite sourcestudygradetypeprerequisite
                inner join opuscollege.studygradetype sourcerequiredstudygradetype
                    on  sourcestudygradetypeprerequisite.requiredstudyid = sourcerequiredstudygradetype.studyid
                    and sourcestudygradetypeprerequisite.requiredgradetypecode = sourcerequiredstudygradetype.gradeTypeCode
                    and sourcerequiredstudygradetype.currentAcademicYearId = #{sourceAcademicYearId}
                inner join opuscollege.studygradetype targetrequiredstudygradetype
                    on  targetrequiredstudygradetype.studyId = sourcerequiredstudygradetype.studyId
                    and targetrequiredstudygradetype.gradeTypeCode = sourcerequiredstudygradetype.gradeTypeCode
                    and targetrequiredstudygradetype.studyTimeCode = sourcerequiredstudygradetype.studyTimeCode
                    and targetrequiredstudygradetype.studyFormCode = sourcerequiredstudygradetype.studyFormCode
                    and targetrequiredstudygradetype.studyIntensityCode = sourcerequiredstudygradetype.studyIntensityCode
                    and targetrequiredstudygradetype.currentAcademicYearId = #{targetAcademicYearId}
                inner join opuscollege.studygradetype sourcestudygradetype
                    on  sourcestudygradetypeprerequisite.studygradetypeid = sourcestudygradetype.id
                    and sourcestudygradetype.currentAcademicYearId = #{sourceAcademicYearId}
                inner join opuscollege.studygradetype targetstudygradetype
                    on  targetstudygradetype.studyId = sourcestudygradetype.studyId
                    and targetstudygradetype.gradeTypeCode = sourcestudygradetype.gradeTypeCode
                    and targetstudygradetype.studyTimeCode = sourcestudygradetype.studyTimeCode
                    and targetstudygradetype.studyFormCode = sourcestudygradetype.studyFormCode
                    and targetstudygradetype.studyIntensityCode = sourcestudygradetype.studyIntensityCode
                    and targetstudygradetype.currentAcademicYearId = #{targetAcademicYearId}
        
                where not exists
                ( select * from opuscollege.studygradetypeprerequisite targetstudygradetypeprerequisite
                  where targetstudygradetypeprerequisite.studygradetypeid = targetstudygradetype.id
                  and targetstudygradetypeprerequisite.requiredstudyid = targetrequiredstudygradetype.studyid
                  and targetstudygradetypeprerequisite.requiredgradetypecode = targetrequiredstudygradetype.gradeTypeCode
                )
                order by sourcestudygradetypeprerequisite.writewhen
    </insert>

    <insert id="transferCardinalTimeUnitStudyGradeType" parameterType="map">
        insert into opuscollege.cardinaltimeunitstudygradetype (
                studygradetypeid
        ,       cardinaltimeunitnumber
        ,       numberofelectivesubjectblocks
        ,       numberofelectivesubjects
        ,       active
        ) select
                #{newStudyGradeTypeId}
        ,       cardinaltimeunitnumber
        ,       numberofelectivesubjectblocks
        ,       numberofelectivesubjects
        ,       active
        from opuscollege.cardinaltimeunitstudygradetype
        where id = #{originalCardinalTimeUnitStudyGradeTypeId}
        <selectKey keyProperty="id" resultType="int">
            SELECT currVal('opuscollege.cardinaltimeunitstudygradetypeseq')
        </selectKey>
    </insert>

    <insert id="transferClassgroup" parameterType="map">
        insert into opuscollege.classgroup (
                studygradetypeid
        ,       description
        ,       writewho
        ) select
                #{newStudyGradeTypeId}
        ,       description
        ,       writewho
        from opuscollege.classgroup
        where id = #{originalClassgroupId}
<!--         <selectKey keyProperty="newId" resultType="int"> -->
<!--             SELECT currVal('opuscollege.classgroupseq') -->
<!--         </selectKey> -->
    </insert>

    <insert id="transferSecondaryschoolsubjectgroup" parameterType="map">
        insert into opuscollege.secondaryschoolsubjectgroup (
                groupnumber
        ,       minimumnumbertograde
        ,       maximumnumbertograde
        ,       studygradetypeid
        ,       active
        ) select 
                groupnumber
        ,       minimumnumbertograde
        ,       maximumnumbertograde
        ,       #{newStudyGradeTypeId}
        ,       active
        from opuscollege.secondaryschoolsubjectgroup
        where id = #{originalSecondarySchoolSubjectGroupId}
        order by secondaryschoolsubjectgroup.id
        <selectKey keyProperty="newId" resultType="int">
            SELECT currVal('opuscollege.secondaryschoolsubjectgroupseq')
        </selectKey>
    </insert>
    
    <insert id="transferGroupedsecondaryschoolsubject" parameterType="map">
        insert into opuscollege.groupedsecondaryschoolsubject (
                secondaryschoolsubjectid
        ,       secondaryschoolsubjectgroupid
        ,       weight
        ,       minimumgradepoint
        ,       maximumgradepoint
        ,       active
        ) select 
                secondaryschoolsubjectid
        ,       #{newSecondaryschoolsubjectgroupId}
        ,       weight
        ,       minimumgradepoint
        ,       maximumgradepoint
        ,       active
        from opuscollege.groupedsecondaryschoolsubject
        where id = #{originalGroupedsecondaryschoolsubjectId}
<!--         <selectKey keyProperty="id" resultType="int"> -->
<!--             SELECT currVal('opuscollege.groupedsecondaryschoolsubjectseq') -->
<!--         </selectKey> -->
    </insert>
    
    
    <!-- find first gradeTypeCode for endGrades -->
    <select id="findEndGradeType" parameterType="int" resultType="String">
        select max(endGradeTypeCode)
        from   opuscollege.endGrade
        where true
        <if test='value != "0"'>
            and endgrade.academicYearId = #{value}
        </if>
    </select>

    <select id="findMinimumEndGradeForGradeType" parameterType="map" resultType="java.math.BigDecimal">
        select min(gradePoint)
        from   opuscollege.endGrade
        WHERE endGradeTypeCode = #{endGradeTypeCode}
        and academicYearId = #{academicYearId}
    </select>

    <select id="findMaximumEndGradeForGradeType" parameterType="map" resultType="java.math.BigDecimal">
        select max(gradePoint)
        from   opuscollege.endGrade
        WHERE endGradeTypeCode = #{endGradeTypeCode}
        and academicYearId = #{academicYearId}
    </select>

    <select id="findMaxAcademicYearForStudyGradeType" parameterType="map" resultType="int">
        select  max(currentAcademicYearId)
        from    opuscollege.studyGradeType
        WHERE   studyId = #{studyId}
        AND     gradeTypeCode = #{gradeTypeCode}
    </select>

    <select id="findGradeTypeCodeForStudyGradeTypeId" parameterType="map" resultType="Lookup">
        select  code
        ,       description
        from    opusCollege.gradeType
        inner   join opusCollege.studyGradeType on studyGradeType.gradeTypeCode = gradeType.code
        WHERE   studyGradeType.id = #{studyGradeTypeId}
        and     lang = #{language} 
    </select>

    <!-- queries concerning requestAdmission -->

    <select id="findAllSecondarySchoolSubjects" resultType="SecondarySchoolSubject">
        select  id        
        , description        
        FROM   opusCollege.secondarySchoolSubject 
        ORDER BY description
    </select>

    <select id="findSecondarySchoolSubjects" parameterType="map" resultType="SecondarySchoolSubject">
        select  secondarySchoolSubject.id                       as id
        ,       secondarySchoolSubject.description              as description
        ,       secondarySchoolSubjectGroup.id                  as secondarySchoolSubjectGroupId
        ,       groupedSecondarySchoolSubject.minimumGradePoint as minimumGradePoint
        ,       groupedSecondarySchoolSubject.maximumGradePoint as maximumGradePoint
        ,       groupedSecondarySchoolSubject.weight            as weight
        from    opusCollege.secondarySchoolSubjectGroup
        inner   join opusCollege.groupedSecondarySchoolSubject 
                on secondarySchoolSubjectGroup.id = groupedSecondarySchoolSubject.secondarySchoolSubjectGroupId
        inner   join opusCollege.secondarySchoolSubject                          
                on ( secondarySchoolSubject.id = groupedSecondarySchoolSubject.secondarySchoolSubjectId 
                    and groupedSecondarySchoolSubject.secondaryschoolsubjectgroupid = #{secondarySchoolSubjectGroupId})
        
        WHERE secondarySchoolSubject.active='Y' 

        <if test='secondarySchoolSubjectGroupId != null and secondarySchoolSubjectGroupId != "0"'>
            AND secondarySchoolSubjectGroup.id = #{secondarySchoolSubjectGroupId}
        </if>
        <if test='searchValue != null and searchValue != ""'>
            AND ( 
            opuscollege.remove_diacritics(lower(secondarySchoolSubject.description)) LIKE opuscollege.remove_diacritics(lower('%' || #{searchValue} || '%'))
            )
       </if>

        ORDER BY description
        
    </select>
    
<!--     <select id="findSecondarySchoolSubjectsAsMaps" parameterType="map" resultType="java.util.HashMap"> -->
    <select id="findSecondarySchoolSubjectsAsMaps" parameterType="map" resultType="LooseSecondarySchoolSubject">

       SELECT id
       , code AS "code"
       , active
       , description
               
        FROM opusCollege.secondarySchoolSubject

        WHERE true 
        <if test='code != null and code != ""'>
            AND code = #{code}
        </if>
        <if test='active != null and active != ""'>
            AND active = #{active}
        </if>
        <if test='searchValue != null and searchValue != ""'>
            AND ( 
            opuscollege.remove_diacritics(lower(secondarySchoolSubject.description)) LIKE opuscollege.remove_diacritics(lower('%' || #{searchValue} || '%'))
            OR opuscollege.remove_diacritics(lower(secondarySchoolSubject.code)) LIKE opuscollege.remove_diacritics(lower('%' || #{searchValue} || '%'))
            
            )
       </if>
        
        ORDER BY description
        
    </select>

    <!-- VERY IMPORTANT: the order by makes sure that the automatic resultset creates an
        attribute grade if there is any. If the first result doesn't have a grade and the second
        one does the query breaks on the automatic resultset, which doesn't have an attribute grade then -->
    <select id="findSecondarySchoolSubjectsForStudyPlan" parameterType="map" resultType="SecondarySchoolSubject">
        select  secondarySchoolSubject.id                           as id
        ,   secondarySchoolSubject.description                      as description
            ,   COALESCE(secondarySchoolSubjectGroup.id,0)              as secondarySchoolSubjectGroupId               
            ,   COALESCE(groupedSecondarySchoolSubject.minimumGradePoint,#{defaultMinimumGradePoint})   as minimumGradePoint       
            ,   COALESCE(groupedSecondarySchoolSubject.maximumGradePoint,#{defaultMaximumGradePoint})   as maximumGradePoint      
            ,   COALESCE(groupedSecondarySchoolSubject.weight,#{defaultWeight})  as weight        
        ,   gradedSecondarySchoolSubject.grade                      as grade     
        ,   gradedSecondarySchoolSubject.level                      as level       
        ,   COALESCE(gradedSecondarySchoolSubject.id,0)             as gradedSecondarySchoolSubjectId       
        from    opusCollege.secondarySchoolSubject
        left join opusCollege.groupedSecondarySchoolSubject 
            on (secondarySchoolSubject.id = groupedSecondarySchoolSubject.secondarySchoolSubjectId 
            and groupedSecondarySchoolSubject.secondaryschoolsubjectgroupid = #{secondarySchoolSubjectGroupId})
        left join opusCollege.SecondarySchoolSubjectGroup  
              on (secondarySchoolSubjectGroup.id = groupedSecondarySchoolSubject.secondarySchoolSubjectGroupId 
                and secondarySchoolSubjectGroup.id = #{secondarySchoolSubjectGroupId})       
        left join opusCollege.gradedsecondaryschoolsubject 
              on ( gradedsecondaryschoolsubject.secondaryschoolsubjectId = secondaryschoolsubject.id   
                and gradedsecondaryschoolsubject.studyPlanId = #{studyPlanId}
                and gradedsecondaryschoolsubject.secondaryschoolsubjectgroupid = #{secondarySchoolSubjectGroupId})   
        <if test='secondarySchoolSubjectGroupId != null and secondarySchoolSubjectGroupId != "0"'>
            where   secondarySchoolSubjectGroup.id = #{secondarySchoolSubjectGroupId}
        </if>
        order by grade ASC
    </select>

    <select id="findSecondarySchoolSubjectGroup" parameterType="int" resultType="SecondarySchoolSubjectGroup">
        select opuscollege.secondaryschoolsubjectgroup.id                   as id
        ,      opuscollege.secondaryschoolsubjectgroup.groupnumber          as groupNumber
        ,      opuscollege.secondaryschoolsubjectgroup.minimumnumbertograde as minNumberToGrade
        ,      opuscollege.secondaryschoolsubjectgroup.maximumnumbertograde as maxNumberToGrade
        ,      opuscollege.secondaryschoolsubjectgroup.studygradetypeid     as studyGradeTypeId 
        from opuscollege.secondaryschoolsubjectgroup
        WHERE opuscollege.secondaryschoolsubjectgroup.id = #{groupId}
    </select>     

    <select id="findSecondarySchoolSubjectGroups" parameterType="int" resultType="SecondarySchoolSubjectGroup">
        select  id
        ,       groupNumber
        ,       studyGradeTypeId
        ,       minimumNumberToGrade as minNumberToGrade
        ,       maximumNumberToGrade as maxNumberToGrade
        from    opusCollege.secondarySchoolSubjectGroup
        where   studyGradeTypeId = #{studyGradeTypeId}
        order   by groupNumber
    </select>   

    <select id="findSecondarySchoolSubjectGroupsForStudyPlan" parameterType="int" resultType="SecondarySchoolSubjectGroup">
        select  secondarySchoolSubjectGroup.id
        ,       groupNumber
        ,       secondarySchoolSubjectGroup.studyGradeTypeId
        ,       minimumNumberToGrade as minNumberToGrade
        ,       maximumNumberToGrade as maxNumberToGrade
        from    opusCollege.secondarySchoolSubjectGroup
        INNER JOIN opuscollege.studyPlanCardinalTimeUnit ON studyPlanCardinalTimeUnit.studyGradeTypeId = secondarySchoolSubjectGroup.studyGradeTypeId
        AND studyPlanCardinalTimeUnit.cardinalTimeUnitNumber = (
            select min(cardinalTimeUnitNumber) 
            from opuscollege.studyPlanCardinalTimeUnit 
            where studyPlanId = #{studyPlanId}
        )
        where   studyPlanCardinalTimeUnit.studyPlanId = #{studyPlanId}
        order   by studyPlanCardinalTimeUnit.progressStatusCode ASC, groupNumber
    </select>   

    <select id="getMaxSecondarySchoolSubjectGroupNumber" parameterType="int" resultType="int">
        SELECT 1 + coalesce(
            (SELECT MAX(groupnumber) 
             FROM   opuscollege.secondaryschoolsubjectgroup 
             WHERE  opuscollege.secondaryschoolsubjectgroup.studygradetypeid = #{value})
             , 0)        
    </select>
         
    <insert id="insertSecondarySchoolSubjectGroup" parameterType="SecondarySchoolSubjectGroup">
        insert into opuscollege.secondaryschoolsubjectgroup
        (
          groupnumber
        , minimumnumbertograde
        , maximumnumbertograde
        , studygradetypeid
        ) values
        ( 
          #{groupNumber}
        , #{minNumberToGrade}
        , #{maxNumberToGrade}
        , #{studyGradeTypeId}
        )
        <selectKey keyProperty="id" resultType="int">
            SELECT currVal('opuscollege.secondaryschoolsubjectgroupseq')
        </selectKey>
    </insert>    
    
    <delete id="deleteSecondarySchoolSubjectGroup" parameterType="int">
        delete from opuscollege.secondaryschoolsubjectgroup
        where  id = #{value}
    </delete>
    
    <insert id="insertGroupedSecondarySchoolSubject" parameterType="SecondarySchoolSubject">
        insert into opuscollege.groupedsecondaryschoolsubject
        ( 
          secondaryschoolsubjectid 
        , secondaryschoolsubjectgroupid
        , weight
        , minimumgradepoint
        , maximumgradepoint
        ) values
        ( 
          #{id}
        , #{secondarySchoolSubjectGroupId}
        , #{weight}
        , #{minimumGradePoint}
        , #{maximumGradePoint}
        )
    </insert>      
    
    <update id="updateSecondarySchoolSubjectGroup" parameterType="SecondarySchoolSubjectGroup">
        update  opuscollege.secondaryschoolsubjectgroup
        set     minimumnumbertograde = #{minNumberToGrade}
        ,       maximumnumbertograde = #{maxNumberToGrade}
        where   id = #{id}
    </update>   
    
    <delete id="deleteGroupedSecondarySchoolSubjectList" parameterType="int">
        delete from opuscollege.groupedsecondaryschoolsubject
        where  secondaryschoolsubjectgroupid = #{value}
    </delete>    

    <insert id="addGradedSecondarySchoolSubject" parameterType="map">
        insert into opuscollege.gradedSecondarySchoolSubject
        ( secondarySchoolSubjectId 
        , studyPlanId
        , grade
        , level
        , secondaryschoolsubjectgroupid
        ) values
        ( #{secondarySchoolSubject.id}
        , #{studyPlanId}
        , #{secondarySchoolSubject.grade}
        , #{secondarySchoolSubject.level}
        , #{groupId}
        )
        
        <selectKey keyProperty="id" resultType="int">
            SELECT currVal('opuscollege.gradedsecondaryschoolsubjectseq')
        </selectKey>
    </insert>
    
<!--      <insert id="addGradedSecondarySchoolSubjectHistory" parameterType="map"> -->
<!--         insert into audit.gradedSecondarySchoolSubject_hist -->
<!--         (  -->
<!--         operation -->
<!--         , writeWho -->
<!--         , id -->
<!--         , secondarySchoolSubjectId  -->
<!--         , studyPlanId -->
<!--         , grade -->
<!--         , level -->
<!--         , secondaryschoolsubjectgroupid -->
<!--         ) values -->
<!--         (  -->
<!--         #{operation} -->
<!--         , #{writeWho} -->
<!--         , #{id} -->
<!--         , #{secondarySchoolSubject.id} -->
<!--         , #{studyPlanId} -->
<!--         , #{secondarySchoolSubject.grade} -->
<!--         , #{secondarySchoolSubject.level} -->
<!--         , #{groupId} -->
<!--         ) -->
<!--         </insert> -->
    
    <update id="updateGradedSecondarySchoolSubject" parameterType="map">
        update  opusCollege.gradedSecondarySchoolSubject
        set     grade = #{secondarySchoolSubject.grade}
        ,       level = #{secondarySchoolSubject.level}
        ,       secondaryschoolsubjectgroupid = #{groupId}       
        where   secondarySchoolSubjectId = #{secondarySchoolSubject.id}
        and     studyPlanId = #{studyPlanId}
    </update>
    
    <update id="deleteGradedSecondarySchoolSubject" parameterType="map">
        delete from  opusCollege.gradedSecondarySchoolSubject
        where   secondarySchoolSubjectId = #{secondarySchoolSubject.id}
        and     studyPlanId = #{studyPlanId}
    </update>
    
<!-- 
    <select id="findEndGradeCommentsForGradeType" parameterClass="map" resultClass="String">
        select  comment
        from    opusCollege.endGrade
        where   endGradeTypeCode = #{endGradeTypeCode}
        and     lang = #{preferredLanguage}
        and     academicYearId = #{academicYearId}
        order   by gradePoint DESC, percentageMin DESC
    </select>
-->

    <select id="findFullEndGradeCommentsForGradeType" parameterType="map" resultType="EndGrade">
        select  *
        from    opusCollege.endGrade
        where   lang = #{preferredLanguage}
        and     academicYearId = #{academicYearId}
        <if test='endGradeTypeCode != null and endGradeTypeCode != ""'>
            and endGradeTypeCode = #{endGradeTypeCode}
        </if>
        <if test='endGradeTypeCodes != null and endGradeTypeCodes.size() > 0'>
            and endGradeTypeCode in
             <foreach collection="endGradeTypeCodes" item="item" separator="," close=")" open="(">
                #{item}
            </foreach>
        </if>
        order   by gradePoint DESC, percentageMin DESC
    </select>

    <select id="findFullFailEndGradeCommentsForGradeType" parameterType="map" resultType="EndGrade">
        select  *
        from    opusCollege.endGrade
        where   lang = #{preferredLanguage}
        and     academicYearId = #{academicYearId}
        and     passed = 'N'
        <if test='endGradeTypeCode != null and endGradeTypeCode != ""'>
            and endGradeTypeCode = #{endGradeTypeCode}
        </if>
        <if test='endGradeTypeCodes != null and endGradeTypeCodes.size() > 0'>
            and endGradeTypeCode in
             <foreach collection="endGradeTypeCodes" item="item" separator="," close=")" open="(">
                #{item}
            </foreach>
        </if>
        order   by gradePoint DESC, percentageMin DESC
    </select>

    <select id="findFullEndGradeCommentsForFailGrades" parameterType="String" resultType="EndGrade">
        select  *
        from    opusCollege.failGrade
        where   lang = #{preferredLanguage}
        order   by comment ASC
    </select>

    <select id="findFullEndGradeCommentsForGeneralGrades" parameterType="String" resultType="EndGrade">
        select  *
        from    opusCollege.endGradeGeneral
        where   lang = #{preferredLanguage}
        order   by comment ASC
    </select>
    
    <select id="findGroupedSecondarySchoolSubjectIds" parameterType="map" resultType="int">
        select  groupedSecondarySchoolSubject.id
        from    opusCollege.groupedSecondarySchoolSubject
        where   secondaryschoolsubjectgroupid = #{secondarySchoolSubjectGroupId}
    </select>

    <select id="findNrOfEndgradesToTransfer" parameterType="map" resultType="int">
        select  count(*)
        from    opuscollege.endGrade
        where   academicYearId = #{fromAcademicYearId}
                and not exists (
                    select * from opuscollege.endgrade innerEndGrade
                    where innerEndGrade.academicYearId = #{toAcademicYearId}
                )
    </select>

    <insert id="transferEndGrades" parameterType="map">
        insert into opuscollege.endgrade
            ( code
            , lang
            , active
            , endgradetypecode
            , gradepoint
            , percentagemin
            , percentagemax
            , "comment"
            , description
            , temporarygrade
            , passed
            , academicyearid
            )
        select code
            , lang 
            , active
            , endgradetypecode
            , gradepoint
            , percentagemin
            , percentagemax
            , "comment"
            , description
            , temporarygrade
            , passed
            , #{targetAcademicYearId}
        from opuscollege.endgrade sourceEndgrade
        where academicyearid = #{sourceAcademicYearId}
        and not exists (
            select * from opuscollege.endgrade targetEndgrade
            where targetEndgrade.academicYearId = #{targetAcademicYearId}
              and sourceEndgrade.code = targetEndgrade.code
              and sourceEndgrade.lang = targetEndgrade.lang
              and sourceEndgrade.endgradetypecode = targetEndgrade.endgradetypecode
        )
        order by sourceEndgrade.id
    </insert>

    <select id="findStudyGradeTypesForStudyPlan" parameterType="int" resultMap="StudyGradeTypeResultMap">
        select studyGradeType.* ,
                study.studyDescription,
                '' AS gradeTypeDescription
        FROM    opuscollege.studygradetype
        INNER   JOIN opuscollege.study on studygradetype.studyId = study.id
        INNER join opuscollege.studyPlanCardinalTimeUnit on studyPlanCardinalTimeUnit.studyGradeTypeId = studyGradeType.id
        INNER join opuscollege.studyPlan on studyPlan.id = studyPlanCardinalTimeUnit.studyPlanId
        where  studyPlan.id = #{value}
    </select>
    


<!-- TODO move to StudyplanMapper and rename to findStudyPlanIdsByStudyId -->
    <select id="findStudyPlansByStudyId" parameterType="int" resultType="int">
        select studyPlan.id
        from   opusCollege.studyPlan
        inner  join opusCollege.study on study.id = studyPlan.studyId
        where  study.id = #{studyId}
    </select>

    <!--########### LooseSecondarySchoolSubjects  #####################-->
    
    
    <update id="updateLooseSecondarySchoolSubject" parameterType="LooseSecondarySchoolSubject">
    
        UPDATE opuscollege.secondaryschoolsubject
        SET description = #{description}
        , code = #{code}
        ,  active=#{active}
        WHERE id = #{id};
    
    </update>

    <delete id="deleteLooseSecondarySchoolSubject" parameterType="map">
        DELETE FROM opuscollege.secondaryschoolsubject
        WHERE true
        <if test='id != null'>
            AND id = #{id}
        </if>
        <if test='code != null and code != ""'>
            AND code = #{code}
        </if>
    </delete>
    
    <insert id="addLooseSecondarySchoolSubject" parameterType="LooseSecondarySchoolSubject">
    
        INSERT INTO opuscollege.secondaryschoolsubject(
            code, 
            active, 
            description
            
            ) VALUES (
             #{code}, 
             #{active}, 
             #{description}
            );      
                
         <selectKey keyProperty="id" resultType="int">
            SELECT currVal('opuscollege.secondaryschoolsubjectseq')
        </selectKey>
    </insert>

    <select id="findLooseSecondarySchoolSubject" parameterType="map" resultType="LooseSecondarySchoolSubject">

       SELECT id
       , code
       , active
       , description
        FROM opusCollege.secondarySchoolSubject
        WHERE true
        <if test='active != null and active != ""'>
            AND active = #{active}
        </if>
        <if test='code != null and code != ""'>
            AND code = #{code}
        </if>
        <if test='id != null'>
            AND id = #{id}
        </if>
        <if test='searchValue != null and searchValue != ""'>
            AND ( 
            opuscollege.remove_diacritics(lower(secondarySchoolSubject.description)) LIKE opuscollege.remove_diacritics(lower('%' || #{searchValue} || '%'))
            OR opuscollege.remove_diacritics(lower(secondarySchoolSubject.code)) LIKE opuscollege.remove_diacritics(lower('%' || #{searchValue} || '%'))
            
            )
       </if>
        ORDER BY description
    </select>   
    
    <select id="findBranchByStudyPlanId" parameterType="int" resultType="Branch">
        select branch.*
        from   opusCollege.branch
        inner  join opusCollege.organizationalUnit on organizationalUnit.branchId = branch.id
        inner  join opusCollege.study on study.organizationalUnitId = organizationalUnit.id
        inner  join opusCollege.studyPlan on studyPlan.studyId = study.id
        where  studyPlan.id = #{studyPlanId}
    </select>


    
    
    <select id="findNrOfUnitsPerYearForCardinalTimeUnitCode" parameterType="String" resultType="Integer">
        select nrOfUnitsPerYear from opuscollege.cardinaltimeunit
        where code = #{value}
        limit 1
    </select>

    <select id="findDisciplinesForGroup" parameterType="map" resultType="Lookup">
        SELECT 
          Discipline.id
        , Discipline.code
        , Discipline.lang
        , Discipline.active
        , Discipline.description
        , Discipline.writewho
    
        FROM opuscollege.GroupedDiscipline
        INNER JOIN opuscollege.Discipline ON GroupedDiscipline.disciplineCode = Discipline.code
        
        WHERE disciplineGroupId = #{disciplineGroupId}
        <if test='lang != null and lang != ""'>
            AND Discipline.lang = #{lang}
        </if>
        <if test='writeWho != null and writeWho != ""'>
            AND Discipline.writeWho = #{writeWho}
        </if>
        <if test='active != null and active != ""'>
            AND Discipline.active = #{active}
        </if>
        <if test='code != null and code != ""'>
            AND Discipline.code = #{code}
        </if>
        
        ORDER BY description
    
    </select>    

    <select id="findDiscipline" parameterType="map" resultType="Lookup">
        SELECT 
          Discipline.id
        , Discipline.code
        , Discipline.lang
        , Discipline.active
        , Discipline.description
        , Discipline.writeWho
    
        FROM opuscollege.Discipline
        LEFT OUTER JOIN opuscollege.GroupedDiscipline ON Discipline.code = GroupedDiscipline.disciplineCode
        
        WHERE true
        <if test='id != null'>
            AND Discipline.id = #{id}
        </if>
        <if test='code != null and code != ""'>
            AND Discipline.code = #{code}
        </if>
        <if test='lang != null and lang != ""'>
            AND Discipline.lang = #{lang}
        </if>
        <if test='active != null and active != ""'>
            AND Discipline.active = #{active}
        </if>
        <if test='id != null'>
            AND DisciplineGroup.disciplineGroupId = #{disciplineGroupId}
        </if>
        
        ORDER BY description
        
    </select>

    <select id="findDisciplinesNotInGroup" parameterType="map" resultType="Lookup">
        SELECT 
          Discipline.id
        , Discipline.code
        , Discipline.lang
        , Discipline.active
        , Discipline.description
        , Discipline.writeWho
    
        FROM opuscollege.Discipline
        
        WHERE Discipline.code NOT IN
        (
            SELECT disciplineCode FROM opuscollege.GroupedDiscipline WHERE disciplineGroupId = #{disciplineGroupId}
        )
        <if test='id != null'>
            AND Discipline.id = #{id}
        </if>
        <if test='code != null and code != ""'>
            AND Discipline.code = #{code}
        </if>
        <if test='lang != null and lang != ""'>
            AND Discipline.lang = #{lang}
        </if>
        <if test='active != null and active != ""'>
            AND Discipline.active = #{active}
        </if>
        
        ORDER BY description
        
    </select>

    <select id="findGroupedDiscipline" parameterType="map" resultType="GroupedDiscipline">
        SELECT 
          id
        , disciplineCode
        , active
        , writeWho
        , disciplineGroupId
    
        FROM opuscollege.groupeddiscipline
        
        WHERE true
        
        <if test='id != null'>
            AND id = #{id}
        </if>
        <if test='disciplineCode != null and disciplineCode != ""'>
            AND disciplineCode = #{disciplineCode}
        </if>
        <if test='active != null and active != ""'>
            AND active = #{active}
        </if>
        <if test='disciplineGroupId != null'>
            AND disciplineGroupId = #{disciplineGroupId}
        </if>
        <if test='writeWho != null and writeWho != ""'>
            AND writeWho = #{writeWho}
        </if>
        
    </select>
    
    <insert id="addGroupedDiscipline" parameterType="GroupedDiscipline">
        INSERT INTO opuscollege.groupeddiscipline(
                  disciplinecode
                , active
                , writewho
                , disciplinegroupid
                )
        VALUES (
                  #{disciplineCode}
                , #{active}
                , #{writeWho}
                , #{disciplineGroupId}
                )
    
    </insert>

    <delete id="deleteGroupedDiscipline" parameterType="map">
    
        DELETE FROM opuscollege.groupeddiscipline

        WHERE true
        
        <if test='id != null'>
            AND id = #{id}
        </if>
        <if test='disciplineCode != null and disciplineCode != ""'>
             AND disciplineCode = #{disciplineCode}
        </if>
        <if test='active != null and active != ""'>
            AND active = #{active}
        </if>
        <if test='disciplineGroupId != null'>
            AND disciplineGroupId = #{disciplineGroupId}
        </if>
        <if test='writeWho != null and writeWho != ""'>
            AND writeWho = #{writeWho}
        </if>
    </delete>

    <select id="findDisciplineDependencies" parameterType="map" resultType="java.util.HashMap">
        SELECT
            (SELECT COUNT(*) FROM opuscollege.GroupedDiscipline WHERE disciplineCode = #{disciplineCode}) AS "DisciplineGroups"
    </select>

    <select id="findGradeTypeCodeForStudyPlanDetail" parameterType="int" resultType="String">
        SELECT studygradetype.gradetypecode
        FROM opuscollege.studygradetype
        INNER JOIN opuscollege.studyplandetail on studyplandetail.studygradetypeid = studygradetype.id
        WHERE studyplandetail.id = #{value}
    </select>   

    <!-- find Classgroup by it's id -->
    <select id="findClassgroupById" parameterType="int" resultMap="ClassgroupResultMap"> 
        select * 
        from opuscollege.classgroup
        WHERE classgroup.id = #{value}
    </select>

    <select id="findSubjectClassgroupsForClassgroup" parameterType="int" resultMap="SubjectClassgroupResultMap">
        select *
        from opuscollege.subjectclassgroup
        where classgroupId = #{value}
    </select>

    <!-- NB: staffMemberId(s) could (a) be removed and replaced by <association>s from subjectteacher, examinationteacher and testteacher
                                 or (b) modified to support examinationteacher.classgroupid and testteacher.classgroupid -->
    <sql id="findClassgroups_fragment">
        FROM opuscollege.classgroup
        INNER JOIN opuscollege.studygradetype ON studygradetype.id = classgroup.studygradetypeid  
        INNER JOIN opuscollege.academicyear ON studygradetype.currentacademicyearid = academicyear.id
        INNER JOIN opuscollege.study on studygradetype.studyId = study.id
        INNER JOIN opuscollege.organizationalunit on study.organizationalUnitId = organizationalunit.id
        INNER JOIN opuscollege.branch on branch.id = organizationalunit.branchId
        INNER JOIN opuscollege.institution on institution.id = branch.institutionId
        <if test="studentId != null">
            JOIN opuscollege.studentclassgroup ON studentclassgroup.classgroupid = classgroup.id AND studentclassgroup.studentid = #{studentId}  
        </if>       
        <if test='subjectId != null and subjectId != "0"'>
            JOIN opuscollege.subjectclassgroup ON subjectclassgroup.classgroupid = classgroup.id AND subjectclassgroup.subjectid = #{subjectId}
        </if>
        <if test='subjectIds != null and subjectIds.size() > 0'>
            INNER JOIN opuscollege.subjectclassgroup subjectclassgroup2 ON subjectclassgroup2.classgroupid = classgroup.id AND subjectclassgroup2.subjectid IN 
             <foreach collection="subjectIds" item="item" separator="," close=")" open="(">
                #{item}
            </foreach>
        </if>
        <if test="staffMemberId != null">
            INNER JOIN opuscollege.subjectteacher ON subjectteacher.classgroupid = classgroup.id AND subjectteacher.staffmemberid = #{staffMemberId}  
        </if>
        <if test='staffMemberIds != null and staffMemberIds.size() > 0'>
            INNER JOIN opuscollege.subjectteacher subjectteacher2 ON subjectteacher2.classgroupid = classgroup.id AND subjectteacher2.staffmemberid IN  
             <foreach collection="staffMemberIds" item="item" separator="," close=")" open="(">
                #{item}
            </foreach>
        </if>
        WHERE true 
        <if test='studyGradeTypeId != null and studyGradeTypeId != "0"'>
            AND studygradetype.id = #{studyGradeTypeId}
        </if>
        <if test='currentAcademicYearId != null and currentAcademicYearId != "0"'>
           AND studygradetype.currentAcademicYearId = #{currentAcademicYearId}  
        </if>
        <if test='studyId != null and studyId != "0"'>
            AND study.id = #{studyId}
        </if>
        <if test='organizationalUnitId != null and organizationalUnitId != "0"'>
            AND organizationalunit.id in (select id from opuscollege.crawl_tree(#{organizationalUnitId}, 0))
        </if>
        <if test='branchId != null and branchId != "0"'>
            AND branch.id = #{branchId}
        </if>
        <if test='institutionId != null and institutionId != "0"'>
            AND institution.id = #{institutionId}
        </if>
        <if test='searchValue != null and searchValue != ""'>
            AND opuscollege.remove_diacritics(lower(classgroup.description)) like opuscollege.remove_diacritics(lower('%' || #{searchValue} || '%'))
        </if>
        <if test='classgroupDescription != null and classgroupDescription != ""'>
            AND classgroup.description = #{classgroupDescription}
        </if>
        <if test='classgroupIds != null and classgroupIds.size() > 0'>
            AND classgroup.id IN
             <foreach collection="classgroupIds" item="item" separator="," close=")" open="(">
                #{item}
            </foreach>
        </if>
    </sql>
    
    <!-- the distinct is for the staffmemberId case when same staffmember is assigned to same classgroup in more than one subjects -->
    <select id="findClassgroups" parameterType="map" resultType="Classgroup">
        select distinct classgroup.*, academicyear.description
        <include refid="findClassgroups_fragment"/>
        <if test="offset != null">
            and classgroup.description || classgroup.id IN (
                select distinct (classgroup.description || classgroup.id) as col
                <include refid="findClassgroups_fragment"/>
                ORDER BY col
                offset ${offset}
                <if test="limit != null">
                    limit ${limit}
                </if>
            )
        </if>
        ORDER BY 
        <if test='orderBy != null and orderBy != ""'>
            ${orderBy} ,
        </if>
        classgroup.description, academicyear.description DESC
    </select>
    
    <select id="findClassgroupsByStudygradetypeId" parameterType="int" resultMap="ClassgroupResultMap">
        select classgroup.*
        from opuscollege.classgroup
        where studygradetypeId = #{value}
        order by classgroup.description
    </select>
    
    <select id="findClassgroupCount" parameterType="map" resultType="int">
        SELECT COUNT(DISTINCT classgroup.id) AS total
        <include refid="findClassgroups_fragment"/>
    </select>
   
    <update id="updateClassgroup" parameterType="Classgroup">
    
        UPDATE opuscollege.classgroup
        SET description         = #{description}
        ,   studyGradeTypeId    = #{studyGradeTypeId}
        ,   writeWho            = #{writeWho}
        WHERE id = #{id};

    </update>

    <insert id="addClassgroup" parameterType="Classgroup">
        INSERT INTO opuscollege.classgroup(
                  description
                , studyGradeTypeId
                , writewho
                )
        VALUES (
                  #{description}
                , #{studyGradeTypeId}
                , #{writeWho}
                )

        <selectKey keyProperty="id" resultType="int">
            SELECT currVal('opuscollege.classgroupSeq')
        </selectKey>
    </insert>
        
    <delete id="deleteClassgroup" parameterType="int">
        delete from opuscollege.classgroup
        where  id = #{value}
    </delete>

    <insert id="addStudentClassgroup" parameterType="map">
        INSERT INTO opuscollege.studentclassgroup(
                  studentid
                , classgroupid
                , writewho
                )
        VALUES (
                  #{studentId}
                , #{classgroupId}
                , #{writeWho}
                )

        <selectKey keyProperty="id" resultType="int">
            SELECT currVal('opuscollege.studentclassgroupSeq')
        </selectKey>
    </insert>
        
    <delete id="deleteStudentClassgroup" parameterType="map">
        delete from opuscollege.studentclassgroup
        where  studentid = #{studentId}
        and    classgroupid = #{classgroupId} 
    </delete>

    <insert id="addSubjectClassgroup" parameterType="map">
        INSERT INTO opuscollege.subjectclassgroup(
                  subjectid
                , classgroupid
                , writewho
                )
        VALUES (
                  #{subjectId}
                , #{classgroupId}
                , #{writeWho}
                )

        <selectKey keyProperty="id" resultType="int">
            SELECT currVal('opuscollege.subjectclassgroupSeq')
        </selectKey>
    </insert>

    <insert id="addSubjectClassgroups" parameterType="map">
        INSERT INTO opuscollege.subjectclassgroup(
                  subjectid
                , classgroupid
                , writewho
                )
        VALUES (
                  #{subjectClassgroup.subjectId}
                , #{subjectClassgroup.classgroupId}
                , #{writeWho}
                )

        <selectKey keyProperty="id" resultType="int">
            SELECT currVal('opuscollege.subjectclassgroupSeq')
        </selectKey>
    </insert>

    <delete id="deleteSubjectClassgroup" parameterType="map">
        delete from opuscollege.subjectclassgroup
        where  subjectid = #{subjectId}
        and    classgroupid = #{classgroupId} 
    </delete>

</mapper>