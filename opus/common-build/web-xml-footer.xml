<!--
  ***** BEGIN LICENSE BLOCK *****
  Version: MPL 1.1/GPL 2.0/LGPL 2.1
  
  The contents of this file are subject to the Mozilla Public License Version
  1.1 (the "License"); you may not use this file except in compliance with
  the License. You may obtain a copy of the License at
  http://www.mozilla.org/MPL/
  
  Software distributed under the License is distributed on an "AS IS" basis,
  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
  for the specific language governing rights and limitations under the
  License.
  
  The Original Code is Opus-College opus module code.
  
  The Initial Developer of the Original Code is
  Center for Information Services, Radboud University Nijmegen.
  Portions created by the Initial Developer are Copyright (C) 2008
  the Initial Developer. All Rights Reserved.
  
  Contributor(s):
    For Java files, see Javadoc @author tags.
  
  Alternatively, the contents of this file may be used under the terms of
  either the GNU General Public License Version 2 or later (the "GPL"), or
  the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
  in which case the provisions of the GPL or the LGPL are applicable instead
  of those above. If you wish to allow use of your version of this file only
  under the terms of either the GPL or the LGPL, and not to allow others to
  use your version of this file under the terms of the MPL, indicate your
  decision by deleting the provisions above and replace them with the notice
  and other provisions required by the GPL or the LGPL. If you do not delete
  the provisions above, a recipient may use your version of this file under
  the terms of any one of the MPL, the GPL or the LGPL.
  
  ***** END LICENSE BLOCK *****
-->
    <!-- image upload restricted to: -->
    <context-param>
        <param-name>image_mime</param-name>
        <param-value>image/gif, image/png, image/pjpeg, image/jpeg,image/svg+xml</param-value>
    </context-param>
    
    <!-- doc upload restricted to: -->
    <context-param>
        <param-name>doc_mime</param-name>
        <param-value>image/pjpeg, image/jpeg, application/pdf, application/msword</param-value>
    </context-param>        
        
    <!-- Bootstraps the root web application context before servlet initialization -->
    <listener>
        <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
    </listener>

    <!-- Make the HTTP request available in a thread local in RequestContextHolder.
         This enables autowiring HttpServletRequest -->
    <listener>
        <listener-class>org.springframework.web.context.request.RequestContextListener</listener-class>
    </listener>

    <!-- The listener to notify Spring of new sessions (and avoid multiple logins per user) -->
    <listener>
        <listener-class>
            org.springframework.security.web.session.HttpSessionEventPublisher
        </listener-class>
    </listener>

    <!--  BEGIN JAWR Javascript and css bundling and optimization: -->
        
    <!--  Javascript JAWR servlet: -->
    <servlet>
        <servlet-name>JavascriptServlet</servlet-name>
        <servlet-class>net.jawr.web.servlet.JawrServlet</servlet-class>
        
        <!-- Location in classpath of the config file -->
        <init-param>
            <param-name>configLocation</param-name>
            <param-value>jawr.properties</param-value>
        </init-param>
        <load-on-startup>3</load-on-startup>
    </servlet>

    <servlet-mapping>
        <servlet-name>JavascriptServlet</servlet-name>
        <url-pattern>*.js</url-pattern>
    </servlet-mapping> 

    <!--  CSS servlet: -->
    <servlet>
        <servlet-name>CSSServlet</servlet-name>
        <servlet-class>net.jawr.web.servlet.JawrServlet</servlet-class>
        
        <!-- Location in classpath of the config file -->
        <init-param>
            <param-name>configLocation</param-name>
            <param-value>jawr.properties</param-value>
        </init-param>
        <init-param>
             <param-name>type</param-name>
             <param-value>css</param-value>
        </init-param>
        <load-on-startup>4</load-on-startup>
    </servlet>

    <servlet-mapping>
        <servlet-name>CSSServlet</servlet-name>
        <url-pattern>*.css</url-pattern>
    </servlet-mapping> 
  
    <!--  END JAWR -->

    <!-- START AJAX-SERVLETS - test for ajax with jquery
    
     <servlet>
        <description>Study provider</description>
        <display-name>Study provider</display-name>
        <servlet-name>AjaxServletStudy</servlet-name>
        <servlet-class>ajaxify.AjaxServletStudy</servlet-class>
    </servlet>

      <servlet-mapping>
        <servlet-name>AjaxServletStudy</servlet-name>
        <url-pattern>/AjaxServletStudy</url-pattern>
      </servlet-mapping>
 
    END AJAX-SERVLETS - test for ajax with jquery -->

    <!-- 
    <security-constraint>
        <display-name>Opus College Security Constraints</display-name>
        <web-resource-collection>
            <web-resource-name>Protected Pages</web-resource-name>
            start of core module 
            <url-pattern>/college/address/*</url-pattern>
            <url-pattern>/college/exam/*</url-pattern>
            <url-pattern>/college/organization/*</url-pattern>
            <url-pattern>/college/person/*</url-pattern>
            <url-pattern>/college/report/*</url-pattern>
            <url-pattern>/college/study/*</url-pattern>
            <url-pattern>/college/subject/*</url-pattern>
            <url-pattern>/college/start.view</url-pattern>
             start of other modules 
            <url-pattern>/fee/*</url-pattern>
            <url-pattern>/report/*</url-pattern>
            <url-pattern>/scholarship/*</url-pattern>
            <http-method>GET</http-method>
            <http-method>POST</http-method> 
        </web-resource-collection>
        <auth-constraint>
            <role-name>admin</role-name>
            <role-name>admin-C</role-name>
            <role-name>admin-B</role-name>
            <role-name>admin-S</role-name>
            <role-name>admin-D</role-name>
            <role-name>staff</role-name>
            <role-name>teacher</role-name>
            <role-name>student</role-name>
            <role-name>guest</role-name>
        </auth-constraint>
        <user-data-constraint>
            <transport-guarantee>NONE</transport-guarantee>
        </user-data-constraint>
   </security-constraint>

    <login-config>
        <auth-method>FORM</auth-method>
        <realm-name>opuscollege-realm</realm-name>
        <form-login-config>
            <form-login-page>/login.jsp</form-login-page>
            <form-error-page>/loginError.jsp</form-error-page>
        </form-login-config>
    </login-config>  
  
    <security-role>
        <role-name>admin</role-name>
    </security-role>
    <security-role>
        <role-name>admin-C</role-name>
    </security-role>
    <security-role>
        <role-name>admin-B</role-name>
    </security-role>
   <security-role>
        <role-name>admin-S</role-name>
    </security-role>
    <security-role>
        <role-name>admin-D</role-name>
    </security-role>
    <security-role>
        <role-name>staff</role-name>
    </security-role>
    <security-role>
        <role-name>teacher</role-name>
    </security-role>
    <security-role>
        <role-name>student</role-name>
    </security-role>
    <security-role>
        <role-name>guest</role-name>
    </security-role>
    -->

    <servlet>
       <servlet-name>image</servlet-name>
       <servlet-class>net.sf.jasperreports.j2ee.servlets.ImageServlet</servlet-class>
    </servlet>

    <servlet-mapping>
       <servlet-name>image</servlet-name>
       <url-pattern>/report/image</url-pattern>
    </servlet-mapping>

    <welcome-file-list>
        <welcome-file>index.jsp</welcome-file>
    </welcome-file-list> 

    <!-- JNDI data source may work without the resource-ref tag, but not always.
         Omitting this may result in 'Name jdbc is not bound in this Context' errors.
     -->
    <resource-ref>
        <description>opusCollege Datasource</description>
        <res-ref-name>jdbc/opusCollege</res-ref-name>
        <res-type>javax.sql.DataSource</res-type>
        <res-auth>Container</res-auth>
    </resource-ref>
    
    <filter>
       <filter-name>trimFilter</filter-name>
       <filter-class>com.cj.trim.trimFilter</filter-class>
       <init-param>
           <param-name>removeComments</param-name>
           <param-value>true</param-value>
       </init-param> 
    </filter>

    <filter-mapping>
       <filter-name>trimFilter</filter-name>
       <url-pattern>*.view</url-pattern>
    </filter-mapping>
    
    <!-- Expect utf-8 request params in POST requests:
         Browsers do not usually send the encoding information, but we know we want everything in UTF-8
         see: http://stackoverflow.com/a/5928162/606662
          -->
    <filter>
        <filter-name>encodingFilter</filter-name>
        <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
        <init-param>
           <param-name>encoding</param-name>
           <param-value>UTF-8</param-value>
        </init-param>
        <init-param>
           <param-name>forceEncoding</param-name>
           <param-value>true</param-value>
        </init-param>
    </filter>
    <filter-mapping>
        <filter-name>encodingFilter</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>

    <!-- Spring Security settings  -->

	<filter>
		<filter-name>springSecurityFilterChain</filter-name>
		<filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>
	</filter>

	<filter-mapping>
		<filter-name>springSecurityFilterChain</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>

</web-app>