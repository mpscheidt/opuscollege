<?xml version="1.0" encoding="UTF-8"?><!--
  ***** BEGIN LICENSE BLOCK *****
  Version: MPL 1.1/GPL 2.0/LGPL 2.1
  
  The contents of this file are subject to the Mozilla Public License Version
  1.1 (the "License"); you may not use this file except in compliance with
  the License. You may obtain a copy of the License at
  http://www.mozilla.org/MPL/
  
  Software distributed under the License is distributed on an "AS IS" basis,
  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
  for the specific language governing rights and limitations under the
  License.
  
  The Original Code is Opus-College scholarship module code.
  
  The Initial Developer of the Original Code is
  Center for Information Services, Radboud University Nijmegen.
  Portions created by the Initial Developer are Copyright (C) 2008
  the Initial Developer. All Rights Reserved.
  
  Contributor(s):
    For Java files, see Javadoc @author tags.
  
  Alternatively, the contents of this file may be used under the terms of
  either the GNU General Public License Version 2 or later (the "GPL"), or
  the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
  in which case the provisions of the GPL or the LGPL are applicable instead
  of those above. If you wish to allow use of your version of this file only
  under the terms of either the GPL or the LGPL, and not to allow others to
  use your version of this file under the terms of the MPL, indicate your
  decision by deleting the provisions above and replace them with the notice
  and other provisions required by the GPL or the LGPL. If you do not delete
  the provisions above, a recipient may use your version of this file under
  the terms of any one of the MPL, the GPL or the LGPL.
  
  ***** END LICENSE BLOCK *****
--><!--Converted at: Fri Feb 05 10:09:32 CET 2016-->
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="org.uci.opus.scholarship.persistence.ScholarshipMapper">

    <resultMap id="findScholarshipResultMap" type="Scholarship">
        <result property="id" column="id"/>
        <result property="active" column="active"/>
        <result property="description" column="description"/>
        <result property="scholarshipType.code" column="scholarshipTypeCode"/>
        <result property="transferId" column="transferId"/>
        <association property="sponsor" select="org.uci.opus.scholarship.persistence.SponsorMapper.findSponsorById" column="sponsorId"/>
        <collection property="feesPercentages" select="org.uci.opus.scholarship.persistence.ScholarshipFeePercentageMapper.findFeesPercentagesByScholarshipId" column="id"/>
    </resultMap>

    <select id="findStudentsAppliedForScholarship" parameterType="map" resultMap="org.uci.opus.college.persistence.StudentMapper.StudentResultMap"> 
          select	
     			person.*,
     			student.*,
          		institution.institutionDescription,
     			branch.branchDescription,
     			organizationalUnit.organizationalUnitDescription,
     			study.id,
     			study.studyDescription
        FROM opuscollege.student
        INNER JOIN opuscollege.person ON student.personId = opuscollege.person.id
        INNER JOIN opuscollege.study on student.primaryStudyId = study.id
        INNER JOIN opuscollege.organizationalunit on study.organizationalUnitId = organizationalunit.id
        INNER JOIN opuscollege.branch on branch.id = organizationalunit.branchId
	    INNER JOIN opuscollege.institution on institution.id = branch.institutionId
        <if test='studyGradeTypeId != null and studyGradeTypeId != "0"'>
            INNER JOIN opuscollege.studyGradeType on study.id = studyGradeType.studyId 
    		INNER JOIN opuscollege.studyPlanCardinalTimeUnit on studyGradeType.id= studyPlanCardinalTimeUnit.studyGradeTypeId
            INNER JOIN opuscollege.studyPlan on studyPlanCardinalTimeUnit.studyPlanId = studyPlan.id  
        </if>
        WHERE opuscollege.institution.institutionTypeCode = #{institutionTypeCode}
        <if test='studyGradeTypeId != null and studyGradeTypeId != "0"'>
     		and studyPlan.studentId = student.studentId 
        </if>
        <if test='institutionId != null and institutionId != "0"'>
            and opuscollege.institution.id = #{institutionId}
        </if>
        <if test='branchId != null and branchId != "0"'>
            and   opuscollege.branch.id = #{branchId}
        </if>
        <if test='organizationalUnitId != null and organizationalUnitId != "0"'>
            and opuscollege.organizationalunit.id in (select id from opuscollege.crawl_tree(#{organizationalUnitId}, 0))       
        </if>
        <if test='studyId != null and studyId != "0"'>
           	and   opuscollege.study.id = #{studyId}
        </if>
        <if test='studyGradeTypeId != null and studyGradeTypeId != "0"'>
            and   studygradeType.id = #{studyGradeTypeId}
        </if>
        <if test='cardinalTimeUnitNumber != null and cardinalTimeUnitNumber != "0"'>
            and  studyPlanCardinalTimeUnit.cardinalTimeUnitNumber = #{cardinalTimeUnitNumber}
        </if>
        <if test='appliedForScholarship != null and appliedForScholarship != ""'>
           	and   opuscollege.student.scholarship = #{appliedForScholarship}
        </if>
        <if test="grantedScholarship == &quot;Y&quot;">
            and   opuscollege.student.studentId IN 
                (SELECT studentId
                    FROM opuscollege.sch_student WHERE sch_student.scholarshipStudentId IN
                        (SELECT scholarshipStudentId FROM opuscollege.sch_scholarshipapplication)
                )
        </if>
        <if test="grantedScholarship == &quot;N&quot;">
            and  opuscollege.student.studentId NOT IN 
                (SELECT studentId
                    FROM opuscollege.sch_student WHERE sch_student.scholarshipStudentId IN
                        (SELECT scholarshipStudentId FROM opuscollege.sch_scholarshipapplication)
                )
        </if>
        <if test="grantedSubsidy == &quot;Y&quot;">
            and   opuscollege.student.studentId IN 
                (SELECT studentId
                    FROM opuscollege.sch_student WHERE sch_student.scholarshipStudentId IN
                        (SELECT scholarshipStudentId FROM opuscollege.sch_subsidy)
                )
        </if>
        <if test="grantedSubsidy == &quot;N&quot;">
            and  opuscollege.student.studentId NOT IN 
                (SELECT studentId
                    FROM opuscollege.sch_student WHERE sch_student.scholarshipStudentId IN
                        (SELECT scholarshipStudentId FROM opuscollege.sch_subsidy)
                )
        </if>  
        ORDER BY lower(person.surnameFull)
    </select>

    <select id="findScholarshipTypes" parameterType="map" resultType="Lookup">
        select  *
        from    opuscollege.sch_scholarshiptype
        where   lang = #{preferredLanguage}
        order   by description
    </select>
    
    <!-- mybatis migration: apparently unused
    <select id="findScholarshipType" resultType="Lookup">
        select  *
        from    opuscollege.sch_scholarshiptype
        where   id = #{value}
    </select>
    -->

    <select id="findScholarships" parameterType="map" resultMap="findScholarshipResultMap">
        select sch_scholarship.id
        , sch_scholarship.description
        , sch_scholarship.scholarshipTypeCode
        , sch_scholarship.sponsorId
        , sch_scholarship.active
        , sch_scholarship.transferId
        from opuscollege.sch_scholarship
        inner join opuscollege.sch_sponsor ON sch_scholarship.sponsorId = sch_sponsor.id
        where 1=1
        <if test='sponsorId != null and sponsorId != "0"'>
            and sch_scholarship.sponsorId = #{sponsorId}
        </if>
        <if test='academicYearId != null and academicYearId != "0"'>
            and sch_sponsor.academicYearId = #{academicYearId}
        </if>
    </select>
        
    <!-- mybatis migration: apparently unused
    <resultMap id="countGrantedScholarshipsMap" type="map">
        <result property="id" column="id"/>
        <result property="counted" column="counted"/>
    </resultMap>
    -->

    <select id="countScholarships" parameterType="map" resultType="int">
        select count(sch_scholarship.id) as counted
        from opuscollege.sch_scholarship
        inner join opuscollege.sch_sponsor ON sch_scholarship.sponsorId = sch_sponsor.id
        <if test='status != "A"'>
            left join opuscollege.sch_scholarshipApplication on sch_scholarship.id = scholarshipappliedforid
        </if>
        <if test='status != "G"'>
            left join opuscollege.sch_scholarshipApplication on sch_scholarship.id = scholarshipgrantedid
        </if>
        left join opuscollege.sch_student on  sch_scholarshipApplication.scholarshipStudentId = sch_student.scholarshipStudentId
        left join opuscollege.student on  sch_student.studentId = student.studentId
        left join opuscollege.study on  student.primaryStudyId = study.id
        left join opuscollege.organizationalUnit on study.organizationalUnitId = organizationalUnit.id
        left join opuscollege.branch on organizationalUnit.branchId = branch.id
        left join opuscollege.institution on branch.institutionId = institution.id
        WHERE 1=1
        <if test='institutionId != null and institutionId != "0"'>
            and opuscollege.institution.id = #{institutionId}
        </if>
        <if test='branchId != null and branchId != "0"'>
            and opuscollege.branch.id = #{branchId}
        </if>
        <if test='organizationalUnitId != null and organizationalUnitId != "0"'>
            and organizationalUnit.id = #{organizationalUnitId}
        </if>
        <if test='sponsorId != null and sponsorId != "0"'>
            and sch_scholarship.sponsorId = #{sponsorId}
        </if>
        <if test='selectedAcademicYearId != null and selectedAcademicYearId != "0"'>
            and sch_sponsor.academicYearId = #{selectedAcademicYearId}
        </if>
        <if test='id != null and id != "0"'>
            and sch_scholarship.id = #{id}
        </if>
    </select>

    <select id="findScholarshipById" parameterType="int" resultMap="findScholarshipResultMap">
        select  id
        ,       description
        ,       scholarshipTypeCode
        ,       sponsorId
        ,       active
        ,       transferId
        from    opuscollege.sch_scholarship
        where   id = #{value}
    </select>
    
    <insert id="addScholarship" parameterType="Scholarship"> 
        insert into opuscollege.sch_scholarship
        ( scholarshipTypeCode
        , description
        , sponsorId
        , active
        , transferId
        ) values
        ( #{scholarshipType.code}
        , #{description}
        , #{sponsor.id}
        , #{active}
        , #{transferId}
        )
        <!-- http://opensource.atlassian.com/confluence/oss/pages/viewpage.action?pageId=407 -->
        <selectKey keyProperty="id" resultType="int">
            SELECT currVal('opuscollege.sch_scholarshipSeq')
        </selectKey>
    </insert>
    
    <update id="updateScholarship" parameterType="Scholarship"> 
        update  opuscollege.sch_scholarship
        set     scholarshipTypeCode = #{scholarshipType.code}
        ,       description = #{description}
        ,       sponsorId = #{sponsor.id}
        ,       active = #{active}
        ,       transferId = #{transferId}
        where   id = #{id}
    </update>
    
    <delete id="deleteScholarship" parameterType="int">
        delete from opuscollege.sch_scholarship
        where  id = #{value}
    </delete>
    
    <insert id="transferScholarships" parameterType="map">
        insert into opuscollege.sch_scholarship
                ( scholarshipTypeCode
                , description
                , sponsorId
                , active
                , transferId
        ) select 
                sourceScholarship.scholarshipTypeCode
                , description
                , targetSponsor.id
                , sourceScholarship.active
                , sourceScholarship.transferId
        from opuscollege.sch_scholarship sourceScholarship
        inner join opuscollege.sch_sponsor sourceSponsor
            on  sourceScholarship.sponsorId = sourceSponsor.id
            and sourceSponsor.academicYearId = #{sourceAcademicYearId}
        inner join opuscollege.sch_sponsor targetSponsor
            on  targetSponsor.transferId = sourceSponsor.transferId
            and targetSponsor.academicYearId = #{targetAcademicYearId}
        where not exists (
                select * from opuscollege.sch_scholarship targetScholarship
                where targetScholarship.sponsorId = targetSponsor.id
                  and targetScholarship.transferId = sourceScholarship.transferId
            )
    </insert>

    <!-- Mybatis migration: apparently unused
    <select id="findPersonByScholarshipStudentId" parameterType="int" resultType="Person">
        select  person.* 
        from    opuscollege.person
        inner   join opuscollege.student student.personId = person.id
        inner   join opuscollege.sch_student sch_student.studentId = student.studentId
        WHERE   sch_student.scholarshipStudentId = #{value}
    </select>
     -->

</mapper>