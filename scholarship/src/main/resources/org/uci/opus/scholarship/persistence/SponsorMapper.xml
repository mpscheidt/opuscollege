<?xml version="1.0" encoding="UTF-8"?><!--
  ***** BEGIN LICENSE BLOCK *****
  Version: MPL 1.1/GPL 2.0/LGPL 2.1
  
  The contents of this file are subject to the Mozilla Public License Version
  1.1 (the "License"); you may not use this file except in compliance with
  the License. You may obtain a copy of the License at
  http://www.mozilla.org/MPL/
  
  Software distributed under the License is distributed on an "AS IS" basis,
  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
  for the specific language governing rights and limitations under the
  License.
  
  The Original Code is Opus-College scholarship module code.
  
  The Initial Developer of the Original Code is
  Center for Information Services, Radboud University Nijmegen.
  Portions created by the Initial Developer are Copyright (C) 2008
  the Initial Developer. All Rights Reserved.
  
  Contributor(s):
    For Java files, see Javadoc @author tags.
  
  Alternatively, the contents of this file may be used under the terms of
  either the GNU General Public License Version 2 or later (the "GPL"), or
  the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
  in which case the provisions of the GPL or the LGPL are applicable instead
  of those above. If you wish to allow use of your version of this file only
  under the terms of either the GPL or the LGPL, and not to allow others to
  use your version of this file under the terms of the MPL, indicate your
  decision by deleting the provisions above and replace them with the notice
  and other provisions required by the GPL or the LGPL. If you do not delete
  the provisions above, a recipient may use your version of this file under
  the terms of any one of the MPL, the GPL or the LGPL.
  
  ***** END LICENSE BLOCK *****
-->
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="org.uci.opus.scholarship.persistence.SponsorMapper">

    <resultMap id="SponsorResultMap" type="Sponsor">
        <result property="id" column="id"/>
        <result property="code" column="code"/>
        <result property="name" column="name"/>
        <result property="sponsorTypeCode" column="sponsorTypeCode"/>
        <result property="academicYearId" column="academicYearId"/>
        <result property="active" column="active"/>
        <result property="writeWho" column="writeWho"/>
    </resultMap>

    <select id="findAllSponsors" resultType="Sponsor">
        select *
        from opuscollege.sch_sponsor
    </select>
    
    <select id="findAcademicYearsForSponsor" parameterType="int" resultType="AcademicYear">
       SELECT  academicYear.*
       FROM    opuscollege.academicYear
       inner   join opuscollege.sch_sponsor on academicYear.id = sch_scholarship.academicYearId
       where   sch_sponsor.id = #{sponsorId}
       order   by academicyear.description
    </select>

    <insert id="addSponsor" parameterType="Sponsor">
    
        INSERT INTO opuscollege.sch_sponsor(
                  code
                , "name"
                , active
                , writeWho
                , sponsorTypeCode
                  , academicYearId
                )
        VALUES (
                  #{code}
                , #{name}
                , #{active}
                , #{writeWho}
                , #{sponsorTypeCode}
                , #{academicYearId}
        )
        <selectKey keyProperty="id" resultType="int">
            SELECT currVal('opuscollege.sch_sponsorSeq')
        </selectKey>
    </insert>
    
    <update id="updateSponsor" parameterType="Sponsor">
        
        UPDATE opuscollege.sch_sponsor
        SET code = #{code}
        , "name" = #{name}
        , active = #{active}
        , writewho = #{writeWho}
        , sponsortypecode = #{sponsorTypeCode}
        , academicYearId = #{academicYearId}
 
        WHERE id = #{id};
            
    </update>
    
    <delete id="deleteSponsor" parameterType="int">
        DELETE FROM opuscollege.sch_sponsor
        WHERE id = #{id};       
    </delete>
    
    
    <select id="findSponsorById" parameterType="int" resultMap="SponsorResultMap">
    
        SELECT id
        , code
        , "name"
        , active
        , writewho
        , sponsortypecode
        , academicYearId
        
        FROM opuscollege.sch_sponsor
        
        WHERE id = #{value}
        
    </select>
    
    <select id="findSponsors" parameterType="map" resultMap="SponsorResultMap">
        SELECT id
        , code
        , "name"
        , active
        , writewho
        , sponsortypecode
        , academicYearId
        FROM opuscollege.sch_sponsor
        WHERE true
        <if test="id != null">
            AND id = #{id}
        </if>
        <if test="academicYearId != null">
            AND academicYearId = #{academicYearId}
        </if>
        <if test="code != null">
            AND code = #{code}
        </if>
        <if test="name != null">
            AND name = #{name}
        </if>
        <if test="active != null">
            AND active = #{active}
        </if>
        <if test="writeWho != null">
            AND writeWho = #{writeWho}
        </if>
        <if test="sponsorTypeCode != null">
            AND sponsorTypeCode = #{sponsorTypeCode}
        </if>
    </select>
    
    <select id="findSponsorsAsMaps" parameterType="map" resultType="java.util.HashMap">

        SELECT sch_sponsor.id
        , sch_sponsor.code
        , sch_sponsor."name"
        , sch_sponsor.active
        , sch_sponsor.writeWho AS "writeWho"
        , sch_sponsor.sponsorTypeCode AS "sponsorTypeCode"
        , sch_sponsor.academicYearId AS "academicYearId"
        , sch_sponsortype.description AS "sponsorType"
        , sch_sponsortype.title AS "sponsorTitle"

        FROM opuscollege.sch_sponsor
        LEFT OUTER JOIN opuscollege.sch_sponsorType ON sch_sponsor.sponsortypecode = sch_sponsortype.code AND sch_sponsorType.lang = #{preferredLanguage}
        INNER JOIN opuscollege.academicYear ON sch_sponsor.academicYearId = academicYear.id
        WHERE true
        <if test="id != null">
            AND id = #{id}
        </if>
        <if test="code != null">
            AND code = #{code}
        </if>
        <if test="name != null">
            AND name = #{name}
        </if>
        <if test="active != null">
            AND active = #{active}
        </if>
        <if test="writeWho != null">
            AND writeWho = #{writeWho}
        </if>
        <if test="sponsorTypeCode != null">
            AND sponsorTypeCode = #{sponsorTypeCode}
        </if>
        <if test='searchValue != null and searchValue != ""'>
            AND opuscollege.remove_diacritics(
                lower(academicYear.description) || ' ' || 
                lower(sch_sponsor.code) || ' ' ||
                lower(sch_sponsor."name")
            ) like opuscollege.remove_diacritics(lower('%' || #{searchValue} || '%'))
       </if>
       ORDER BY academicYear.description DESC, code
    </select>
            
    <select id="doesSponsorExist" parameterType="map" resultType="boolean">
        
        SELECT (COUNT(*) != 0)
        FROM opuscollege.sch_sponsor
        WHERE id != #{id}
        <if test="code != null">
            AND lower(code) = lower(#{code})
        </if>
        <if test="name != null">
            AND lower(name) = lower(#{name})
        </if>
        <if test="active != null">
            AND active = #{active}
        </if>
        <if test="writeWho != null">
            AND lower(writeWho) = lower(#{writeWho})
        </if>
        <if test="sponsorTypeCode != null">
            AND lower(sponsorTypeCode) = lower(#{sponsorTypeCode})
        </if>
        <if test="academicYearId != null">
            AND academicYearId = #{academicYearId}
        </if>
    </select>
    
    <select id="findSponsorDependencies" parameterType="int" resultType="java.util.HashMap">
        
        SELECT
            (SELECT COUNT(*) FROM opuscollege.sch_scholarshipFeePercentage WHERE scholarshipId = #{value}) AS "Percentages",
            (SELECT COUNT(*) FROM opuscollege.sch_subsidy WHERE sponsorId = #{value}) AS "Subsidies",
            (SELECT COUNT(*) FROM opuscollege.sch_scholarship WHERE sponsorId = #{value}) AS "Scholarships"
    
    </select>
    
    <insert id="insertSponsorHistory">

        INSERT INTO audit.sch_sponsor_hist(
            operation
            , id
            , code
            , "name"
            , active
            , writewho
            , sponsortypecode
            )
            VALUES (
            #{operation}
            , #{Sponsor.id}
            , #{Sponsor.code}
            , #{Sponsor.name}
            , #{Sponsor.active}
            , #{Sponsor.writeWho}
            , #{Sponsor.sponsorTypeCode}

            )
    </insert>

    <insert id="transferSponsors" parameterType="map">
        insert into opuscollege.sch_sponsor (
                  code
                , "name"
                , active
                , writeWho
                , sponsorTypeCode
                , academicYearId
                , transferId
        ) select 
                  code
                , "name"
                , active
                , writeWho
                , sponsorTypeCode
                ,#{targetAcademicYearId}
                ,transferId
        from opuscollege.sch_sponsor sourceSponsor
        where sourceSponsor.academicYearId = #{sourceAcademicYearId}
                and not exists (
                    select * from opuscollege.sch_sponsor targetSponsor
                    where targetSponsor.transferId = sourceSponsor.transferId
                      and targetSponsor.academicYearId = #{targetAcademicYearId}
                )
    </insert>


</mapper>