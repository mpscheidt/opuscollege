<?xml version="1.0" encoding="UTF-8"?>
<!--
  ***** BEGIN LICENSE BLOCK *****
  Version: MPL 1.1/GPL 2.0/LGPL 2.1
  
  The contents of this file are subject to the Mozilla Public License Version
  1.1 (the "License"); you may not use this file except in compliance with
  the License. You may obtain a copy of the License at
  http://www.mozilla.org/MPL/
  
  Software distributed under the License is distributed on an "AS IS" basis,
  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
  for the specific language governing rights and limitations under the
  License.
  
  The Original Code is Opus-College college module code.
  
  The Initial Developer of the Original Code is
  Center for Information Services, Radboud University Nijmegen.
  Portions created by the Initial Developer are Copyright (C) 2008
  the Initial Developer. All Rights Reserved.
  
  Contributor(s):
    For Java files, see Javadoc @author tags.
  
  Alternatively, the contents of this file may be used under the terms of
  either the GNU General Public License Version 2 or later (the "GPL"), or
  the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
  in which case the provisions of the GPL or the LGPL are applicable instead
  of those above. If you wish to allow use of your version of this file only
  under the terms of either the GPL or the LGPL, and not to allow others to
  use your version of this file under the terms of the MPL, indicate your
  decision by deleting the provisions above and replace them with the notice
  and other provisions required by the GPL or the LGPL. If you do not delete
  the provisions above, a recipient may use your version of this file under
  the terms of any one of the MPL, the GPL or the LGPL.
  
  ***** END LICENSE BLOCK *****
--><!--Converted at: Mon Aug 24 16:12:41 CEST 2015-->
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="org.uci.opus.college.persistence.SubjectMapper">

    <resultMap id="BasicSubjectResultMap" type="Subject">
	    <result property="id" column="id"/>
	    <result property="subjectCode" column="subjectCode"/>
	    <result property="subjectDescription" column="subjectDescription"/>
	    <result property="subjectContentDescription" column="subjectContentDescription"/>
	    <result property="primaryStudyId" column="primaryStudyId"/>
	    <result property="active" column="active"/>
	    <result property="targetGroupCode" column="targetGroupCode"/>
	    <result property="freeChoiceOption" column="freeChoiceOption"/>
	    <result property="creditAmount" column="creditAmount"/>
	    <result property="hoursToInvest" column="hoursToInvest"/>
	    <result property="frequencyCode" column="frequencyCode"/>
	    <result property="studyTimeCode" column="studyTimeCode"/>
	    <result property="examTypeCode" column="examTypeCode"/>
	    <result property="maximumParticipants" column="maximumParticipants"/>
	    <!--<result property="brsApplyingToSubject" column="brsApplyingToSubject" />-->
	    <result property="brsPassingSubject" column="brsPassingSubject"/>
	    <result property="currentAcademicYearId" column="currentAcademicYearId"/>
	    <result property="resultType" column="resultType"/>
    </resultMap>

    <resultMap id="SubjectResultMap" type="Subject" extends="BasicSubjectResultMap">
        <association property="primaryStudy" select="org.uci.opus.college.persistence.StudyMapper.findStudy" column="primaryStudyId" />
        <collection property="subjectSubjectBlocks" select="findSubjectSubjectBlocksForSubject" column="id"/>
        <collection property="subjectTeachers" select="findSubjectTeachers" column="id"/>
        <collection property="subjectClassgroups" select="findSubjectClassgroups" column="id"/>
        <collection property="examinations" select="org.uci.opus.college.persistence.ExaminationMapper.findExaminationsForSubject" column="id"/>
        <collection property="academicYear" select="org.uci.opus.college.persistence.AcademicYearMapper.findAcademicYear" column="currentAcademicYearId"/>
    </resultMap>
    <resultMap id="SubjectEagerExaminationsResultMap" type="Subject" extends="BasicSubjectResultMap">
        <association property="primaryStudy" select="org.uci.opus.college.persistence.StudyMapper.findStudy" column="primaryStudyId" />
        <collection property="subjectSubjectBlocks" select="findSubjectSubjectBlocksForSubject" column="id"/>
        <collection property="subjectTeachers" select="findSubjectTeachers" column="id"/>
        <collection property="subjectClassgroups" select="findSubjectClassgroups" column="id"/>
        <collection property="examinations" fetchType="eager" select="org.uci.opus.college.persistence.ExaminationMapper.findExaminationsForSubjectEagerTests" column="id"/>
        <collection property="academicYear" select="org.uci.opus.college.persistence.AcademicYearMapper.findAcademicYear" column="currentAcademicYearId"/>
    </resultMap>

    <resultMap id="SubjectSubjectBlockResultMap" type="SubjectSubjectBlock">
	    <result property="id" column="id"/>
	    <result property="subjectBlockId" column="subjectBlockId"/>
        <result property="active" column="active"/>
        <association property="subject" select="findSubject" column="subjectId"/>
        <association property="subjectBlock" select="org.uci.opus.college.persistence.SubjectBlockMapper.findSubjectBlock" column="subjectBlockId"/>
    </resultMap>

    <!-- FQ result maps have no reason to use automapping, on the contrary unneeded objects with false id values may be created for non-existing records.
         For more info on  autoMapping="false" see the SubjectResultMapper and http://www.mybatis.org/mybatis-3/sqlmap-xml.html#Auto-mapping -->
    <resultMap id="BasicFQSubjectResultMap" type="Subject" autoMapping="false">
        <result property="id" column="subject_id"/>
        <result property="subjectCode" column="subject_subjectCode"/>
        <result property="subjectDescription" column="subject_subjectDescription"/>
        <result property="subjectContentDescription" column="subject_subjectContentDescription"/>
        <result property="primaryStudyId" column="subject_primaryStudyId"/>
        <result property="active" column="subject_active"/>
        <result property="targetGroupCode" column="subject_targetGroupCode"/>
        <result property="freeChoiceOption" column="subject_freeChoiceOption"/>
        <result property="creditAmount" column="subject_creditAmount"/>
        <result property="hoursToInvest" column="subject_hoursToInvest"/>
        <result property="frequencyCode" column="subject_frequencyCode"/>
        <result property="studyTimeCode" column="subject_studyTimeCode"/>
        <result property="examTypeCode" column="subject_examTypeCode"/>
        <result property="maximumParticipants" column="subject_maximumParticipants"/>
        <result property="brsPassingSubject" column="subject_brsPassingSubject"/>
        <result property="currentAcademicYearId" column="subject_currentAcademicYearId"/>
        <result property="resultType" column="subject_resultType"/>
    </resultMap>

    <!-- resultmap to define basic SubjectStudyGradeType -->
    <resultMap id="BasicSubjectStudyGradeTypeResultMap" type="SubjectStudyGradeType">
        <result property="id" column="id"/>
        <result property="subjectId" column="subject.id"/>
        <result property="studyGradeTypeId" column="studyGradeType.id"/>
        <result property="cardinalTimeUnitNumber" column="cardinalTimeUnitNumber"/>
        <result property="rigidityTypeCode" column="rigidityTypeCode"/>
        <result property="importanceTypeCode" column="importanceTypeCode"/>
        <result property="active" column="active"/>
    </resultMap>
     
    <!-- resultmap to define complete SubjectStudyGradeType, including properties from studyGradeType, subject, etc. -->
    <resultMap id="SubjectStudyGradeTypeResultMap" type="SubjectStudyGradeType" extends="BasicSubjectStudyGradeTypeResultMap">
        <result property="studyGradeType.id" column="studyGradeType.id"/>
        <result property="studyGradeType.studyId" column="studyGradeType.studyId"/>
        <result property="studyGradeType.studyDescription" column="studyGradeType.studyDescription"/> 
        <result property="studyGradeType.gradeTypeCode" column="studyGradeType.gradeTypeCode"/>
<!--         <result property="studyGradeType.gradeTypeDescription" column="studyGradeType.gradeTypeDescription"/> -->
        <result property="studyGradeType.numberOfCardinalTimeUnits" column="studyGradeType.numberOfCardinalTimeUnits"/>
        <result property="studyGradeType.maxNumberOfCardinalTimeUnits" column="studyGradeType.maxNumberOfCardinalTimeUnits"/>
        <result property="studyGradeType.currentAcademicYearId" column="studyGradeType.currentAcademicYearId"/>
        <result property="studyGradeType.cardinalTimeUnitCode" column="studyGradeType.cardinalTimeUnitCode"/>
        <result property="studyGradeType.studyFormCode" column="studyGradeType.studyFormCode"/>
        <result property="studyGradeType.studyTimeCode" column="studyGradeType.studyTimeCode"/>             
        <result property="subject.id" column="subject.id"/>
        <result property="subject.subjectCode" column="subject.subjectCode"/>
        <result property="subject.subjectDescription" column="subject.subjectDescription"/>
        <result property="subject.primaryStudyId" column="subject.primaryStudyId"/>
        <result property="subject.currentAcademicYearId" column="subject.currentAcademicYearId"/>
        <result property="subject.resultType" column="subject.resultType"/>
        <result property="subject.studyTimeCode" column="subject.studyTimeCode" />
        <!-- also the subjectStudyGradeType has data - these properties could probably be abolished 
             because they are redundant to the ones in studyGradeType object -->
        <result property="studyId" column="studyGradeType.studyId"/>
        <result property="studyDescription" column="studyGradeType.studyDescription"/> 
        <result property="gradeTypeCode" column="studyGradeType.gradeTypeCode"/>
        <association property="subject.primaryStudy" select="org.uci.opus.college.persistence.StudyMapper.findStudy" column="subject.primaryStudyId" />
        <collection property="subjectPrerequisites" select="findSubjectPrerequisites" column="id"/>
    </resultMap>

    <!-- resultmap to define complete SubjectStudyGradeType -->
     <resultMap id="BlockedSubjectStudyGradeTypeResultMap" type="SubjectStudyGradeType">
        <result property="id" column="id"/>
        <result property="subjectId" column="subject.id"/>
        <result property="studyGradeTypeId" column="studyGradeType.id"/>
        <result property="cardinalTimeUnitNumber" column="cardinalTimeUnitNumber"/>
        <result property="rigidityTypeCode" column="rigidityTypeCode"/>
        <result property="active" column="active"/>
        <result property="studyGradeType.id" column="studyGradeType.id"/>
        <result property="studyGradeType.studyId" column="studyGradeType.studyId"/>
        <result property="studyGradeType.studyDescription" column="studyGradeType.studyDescription"/> 
        <result property="studyGradeType.gradeTypeCode" column="studyGradeType.gradeTypeCode"/>
        <result property="studyGradeType.gradeTypeDescription" column="studyGradeType.gradeTypeDescription"/>
        <result property="studyGradeType.numberOfCardinalTimeUnits" column="studyGradeType.numberOfCardinalTimeUnits"/>
        <result property="studyGradeType.maxNumberOfCardinalTimeUnits" column="studyGradeType.maxNumberOfCardinalTimeUnits"/>
        <result property="studyGradeType.currentAcademicYearId" column="studyGradeType.currentAcademicYearId"/>
        <result property="studyGradeType.cardinalTimeUnitCode" column="studyGradeType.cardinalTimeUnitCode"/>
        <result property="studyGradeType.studyFormCode" column="studyGradeType.studyFormCode"/>
        <result property="studyGradeType.studyTimeCode" column="studyGradeType.studyTimeCode"/>             
        <result property="subject.id" column="subject.id"/>
        <result property="subject.subjectCode" column="subject.subjectCode"/>
        <result property="subject.subjectDescription" column="subject.subjectDescription"/>
        <result property="subject.primaryStudyId" column="subject.primaryStudyId"/>
        <result property="subject.currentAcademicYearId" column="subject.currentAcademicYearId"/>
        <result property="subject.resultType" column="subject.resultType"/>
     </resultMap>
 
    <resultMap id="SubjectTeacherResultMap" type="SubjectTeacher">
        <result property="id" column="id"/>
        <result property="staffMemberId" column="staffMemberId"/>
        <result property="subjectId" column="subjectId"/>
        <result property="classgroupId" column="classgroupId"/>
        <result property="active" column="active"/>
        <association property="staffMember" select="org.uci.opus.college.persistence.StaffMemberMapper.findStaffMemberByStaffMemberId" column="staffMemberId"/>
        <association property="classgroup" select="org.uci.opus.college.persistence.StudyMapper.findClassgroupById" column="classgroupId"/>
    </resultMap>

    <!-- NB: Cannot join lookup tables (like gradetype) because used in association/select where no preferredLanguage is available -->
    <sql id="selectSubjectStudyGradeType_fragment">
        select  subjectStudyGradeType.id                    as id
        ,       cardinalTimeUnitNumber                      as cardinalTimeUnitNumber
        ,       rigidityTypeCode                            as rigidityTypeCode
        ,       importanceTypeCode                          as importanceTypeCode
        ,       subjectStudyGradeType.active                as active
        ,       subjectStudyGradeType.studyGradeTypeId      as "studyGradeType.id"
        ,       subject.id                                  as "subject.id"
        ,       subject.subjectCode                         as "subject.subjectCode"
        ,       subject.subjectDescription                  as "subject.subjectDescription"
        ,       subject.primaryStudyId                      as "subject.primaryStudyId"
        ,       subject.currentAcademicYearId               as "subject.currentAcademicYearId"
        ,       subject.resultType                          as "subject.resultType"
        ,       subject.studyTimeCode                       as "subject.studyTimeCode"
        ,       study.id                                    as "studyGradeType.studyId"
        ,       study.studyDescription                      as "studyGradeType.studyDescription"
        ,       studyGradeType.gradeTypeCode                as "studyGradeType.gradeTypeCode"
<!--         ,       gradeType.description                       as "studyGradeType.gradeTypeDescription" -->
        ,       studyGradeType.numberOfCardinalTimeUnits    as "studyGradeType.numberOfCardinalTimeUnits"
        ,       studyGradeType.maxNumberOfCardinalTimeUnits as "studyGradeType.maxNumberOfCardinalTimeUnits"
        ,       studyGradeType.currentAcademicYearId        as "studyGradeType.currentAcademicYearId"
        ,       studyGradeType.cardinalTimeUnitCode         as "studyGradeType.cardinalTimeUnitCode"
        ,       studyGradeType.studyFormCode                as "studyGradeType.studyFormCode"
        ,       studyGradeType.studyTimeCode                as "studyGradeType.studyTimeCode"
        from    opusCollege.subjectStudyGradeType
        inner   join opusCollege.subject on subject.id = subjectStudyGradeType.subjectId
        inner   join opusCollege.studyGradeType on studyGradeType.id = subjectStudyGradeType.studyGradeTypeId
        inner   join opusCollege.study on study.id = studyGradeType.studyId
<!--         inner   join opusCollege.gradeType on gradeType.code = studyGradeType.gradeTypeCode and gradeType.lang = #{preferredLanguage} -->
    </sql>

    <sql id="selectSubjectStudyGradeType_fragment2">
        select  subjectStudyGradeType.id                    as id
        ,       cardinalTimeUnitNumber                      as cardinalTimeUnitNumber
        ,       rigidityTypeCode                            as rigidityTypeCode
        ,       importanceTypeCode                          as importanceTypeCode
        ,       subjectStudyGradeType.active                as active
        ,       subjectStudyGradeType.studyGradeTypeId      as "studyGradeType.id"
        ,       subject.id                                  as "subject.id"
        ,       subject.subjectCode                         as "subject.subjectCode"
        ,       subject.subjectDescription                  as "subject.subjectDescription"
        ,       subject.primaryStudyId                      as "subject.primaryStudyId"
        ,       subject.currentAcademicYearId               as "subject.currentAcademicYearId"
        ,       subject.resultType                          as "subject.resultType"
        ,       subject.studyTimeCode                       as "subject.studyTimeCode"
        ,       study.id                                    as "studyGradeType.studyId"
        ,       study.studyDescription                      as "studyGradeType.studyDescription"
        ,       gradeType.code                              as "studyGradeType.gradeTypeCode"
        ,       gradeType.description                       as "studyGradeType.gradeTypeDescription"
        ,       studyGradeType.numberOfCardinalTimeUnits    as "studyGradeType.numberOfCardinalTimeUnits"
        ,       studyGradeType.maxNumberOfCardinalTimeUnits as "studyGradeType.maxNumberOfCardinalTimeUnits"
        ,       studyGradeType.currentAcademicYearId        as "studyGradeType.currentAcademicYearId"
        ,       studyGradeType.cardinalTimeUnitCode         as "studyGradeType.cardinalTimeUnitCode"
        ,       studyGradeType.studyFormCode                as "studyGradeType.studyFormCode"
        ,       studyGradeType.studyTimeCode                as "studyGradeType.studyTimeCode"
        from    opusCollege.subjectStudyGradeType
        inner   join opusCollege.subject on subject.id = subjectStudyGradeType.subjectId
        inner   join opusCollege.studyGradeType on studyGradeType.id = subjectStudyGradeType.studyGradeTypeId
        inner   join opusCollege.study on study.id = studyGradeType.studyId
        inner   join opusCollege.gradeType on gradeType.code = studyGradeType.gradeTypeCode and gradeType.lang = #{preferredLanguage}
        inner   join opusCollege.organizationalunit on opuscollege.study.organizationalUnitId = organizationalunit.id
	    inner   join opusCollege.branch on opuscollege.branch.id = organizationalunit.branchId
	    inner   join opusCollege.institution on opuscollege.institution.id = branch.institutionId
    </sql>

    <select id="findSubjectStudyGradeTypes" parameterType="map" resultMap="SubjectStudyGradeTypeResultMap">
        <include refid="selectSubjectStudyGradeType_fragment"/>
        inner join opusCollege.gradeType on gradeType.code = studyGradeType.gradeTypeCode and gradeType.lang = #{preferredLanguage}
    	where true
        <if test='subjectId != null and subjectId != "0"'>
			and   opuscollege.subjectStudyGradeType.subjectId = #{subjectId}
    	</if>
        <if test='studyId != null and studyId != "0"'>
			and	(opuscollege.studyGradeType.studyId = #{studyId} 
			<if test="importanceTypeMajor != null">
			     and subjectStudyGradeType.importanceTypeCode = #{importanceTypeMajor}
            </if>
            <if test='minor1Id != null and minor1Id != "0"'>
                  OR (opuscollege.studyGradeType.studyId  =  #{minor1Id}
                    and subjectStudyGradeType.importanceTypeCode = #{importanceTypeMinor})
            </if>
            )
    	</if>
        <if test='studyGradeTypeId != null and studyGradeTypeId != "0"'>
			and	(opuscollege.studyGradeType.id = #{studyGradeTypeId}
	        <if test="minorStudyGradeTypeId != null">
	              
	                  or opuscollege.studyGradeType.id = #{minorStudyGradeTypeId}
	                 
	        </if>
	        )
    	</if>
        <if test='currentAcademicYearId != null and currentAcademicYearId != "0"'>
            and opuscollege.studyGradeType.currentAcademicYearId = #{currentAcademicYearId}
        </if>
        <if test='cardinalTimeUnitNumber != null and cardinalTimeUnitNumber != "0"'>
			and		(opuscollege.subjectStudyGradeType.cardinalTimeUnitNumber = #{cardinalTimeUnitNumber}
				OR opuscollege.subjectStudyGradeType.cardinalTimeUnitNumber = 0)
    	</if>
    	<if test="rigidityTypeCode != null">
    		and		opuscollege.subjectStudyGradeType.rigidityTypeCode = #{rigidityTypeCode}
    	</if>
        <if test='subjectIds != null and subjectIds.size() > 0'>
            and subjectStudyGradeType.subjectId IN
             <foreach collection="subjectIds" item="item" separator="," close=")" open="(">
                #{item}
            </foreach>
        </if>
        <if test='studyGradeTypeIds != null and studyGradeTypeIds.size() > 0'>
            and subjectStudyGradeType.studyGradeTypeId IN
             <foreach collection="studyGradeTypeIds" item="item" separator="," close=")" open="(">
                #{item}
            </foreach>
        </if>
        <if test='studyPlanDetailIds != null and studyPlanDetailIds.size() > 0'>
            AND EXISTS (SELECT 1 FROM opuscollege.studyplandetail
                  WHERE studyplandetail.studyGradeTypeid = studyGradeType.id
                    AND studyplandetail.subjectid = subject.id
                    AND studyplandetail.id IN
             <foreach collection="studyPlanDetailIds" item="item" separator="," close=")" open="(">
                #{item}
            </foreach>
            )
        </if>
        order   by lower(study.studyDescription), lower(gradeType.description)
    </select>

    <select id="findSubjectStudyGradeTypes2" parameterType="map" resultMap="SubjectStudyGradeTypeResultMap">
       <include refid="selectSubjectStudyGradeType_fragment2"/>
        WHERE subjectStudyGradeType.id IN (
        	SELECT distinct(subjectStudyGradeType.id) FROM opuscollege.subjectStudyGradeType
            <if test='(rigidityTypeCode != null and rigidityTypeCode != "") or (importanceTypeCode != null and importanceTypeCode != "")'>
       			INNER JOIN opuscollege.studyGradeType on subjectStudyGradeType.studyGradeTypeId = studyGradeType.id
	       	</if>
	        WHERE opuscollege.institution.institutionTypeCode = #{institutionTypeCode}
            <if test='institutionId != null and institutionId != "0"'>
                and institution.id = #{institutionId}
            </if>
            <if test='branchId != null and branchId != "0"'>
                and branch.id = #{branchId}
            </if>
            <if test='organizationalUnitId != null and organizationalUnitId != "0"'>
                and organizationalunit.id in (select id from opuscollege.crawl_tree(#{organizationalUnitId}, 0)) 
            </if>
            <if test='studyId != null and studyId != "0"'>
	            and (study.id = #{studyId}
	            <if test="importanceTypeMajor != null">
                    and subjectStudyGradeType.importanceTypeCode = #{importanceTypeMajor}
                </if>
                <if test='minor1Id != null and minor1Id != "0"'>
                      OR (study.id  =  #{minor1Id}
                        and subjectStudyGradeType.importanceTypeCode = #{importanceTypeMinor})
                </if>
                )
	        </if>
	        <if test="cardinalTimeUnitNumber != null">
	            and (subjectStudyGradeType.cardinalTimeUnitNumber = #{cardinalTimeUnitNumber} 
	             	OR subjectStudyGradeType.cardinalTimeUnitNumber = 0)
	        </if>
            <if test='currentAcademicYearId != null and currentAcademicYearId != "0"'>
                and subject.currentAcademicYearId = #{currentAcademicYearId}  
	        </if>
	        <if test="resultType != null">
	           and subject.resultType = #{resultType}  
            </if>
            <if test='rigidityTypeCode != null and rigidityTypeCode != ""'>
                and subjectStudyGradeType.rigidityTypeCode = #{rigidityTypeCode} 
	        </if>
         )
        order   by lower(subject.subjectDescription), lower(gradeType.description)
    </select>
    
    <select id="findSubjectStudyGradeTypesForSubjectTransition" parameterType="map" resultMap="SubjectStudyGradeTypeResultMap">
        <include refid="selectSubjectStudyGradeType_fragment"/>
        inner join opusCollege.gradeType on gradeType.code = studyGradeType.gradeTypeCode and gradeType.lang = #{preferredLanguage}
        inner join opuscollege.studygradetype targetSGT
                on  targetSGT.studyId = studyGradeType.studyId
                and targetSGT.gradeTypeCode = studyGradeType.gradeTypeCode
                and targetSGT.studyTimeCode = studyGradeType.studyTimeCode
                and targetSGT.studyFormCode = studyGradeType.studyFormCode
                and targetSGT.currentAcademicYearId = #{targetAcademicYearId}
        where   studyGradeType.currentAcademicYearId = #{sourceAcademicYearId}
        <if test='subjectIds != null and subjectIds.size() > 0'>
            and subjectStudyGradeType.subjectId IN
             <foreach collection="subjectIds" item="item" separator="," close=")" open="(">
                #{item}
            </foreach>
        </if>
        order   by lower(study.studyDescription), lower(gradeType.description)
    </select>

    <select id="findSubjectStudyGradeTypesForSGTTransition" parameterType="map" resultMap="SubjectStudyGradeTypeResultMap">
        <include refid="selectSubjectStudyGradeType_fragment"/>
        inner join opusCollege.gradeType on gradeType.code = studyGradeType.gradeTypeCode and gradeType.lang = #{preferredLanguage}
        inner join opuscollege.subject targetSubject
                on  targetSubject.subjectCode = subject.subjectCode
                and targetSubject.subjectDescription = subject.subjectDescription
                and targetSubject.currentAcademicYearId = #{targetAcademicYearId}
                and targetSubject.resultType = #{targetResultType}
        where   subject.currentAcademicYearId = #{sourceAcademicYearId}
        <if test='studyGradeTypeIds != null and studyGradeTypeIds.size() > 0'>
            and subjectStudyGradeType.studyGradeTypeId IN
             <foreach collection="studyGradeTypeIds" item="item" separator="," close=")" open="(">
                #{item}
            </foreach>
        </if>
        order   by lower(study.studyDescription), lower(gradeType.description)
    </select>

    <select id="findSubjectStudyGradeTypesForStudy" parameterType="map" resultType="SubjectStudyGradeType">
    	select	subjectStudyGradeType.*
    	,       study.id               as studyId
    	,  		study.studyDescription as studyDescription
    	,       gradeType.code         as gradeTypeCode
    	,		gradeType.description  as gradeTypeDescription
    	,       cardinalTimeUnitNumber as cardinalTimeUnitNumber
    	,       rigidityTypeCode       as rigidityTypeCode
        ,       importanceTypeCode     as importanceTypeCode
    	from 	opuscollege.subjectStudyGradeType
    	inner	join opuscollege.studyGradeType on studyGradeType.id = subjectStudyGradeType.studyGradeTypeId
    	inner	join opuscollege.study on study.id = studyGradeType.studyId
    	inner	join opuscollege.gradeType on gradeType.code = studyGradeType.gradeTypeCode
    	where   opuscollege.study.id = #{studyId}
    	and	    opuscollege.gradeType.lang = #{preferredLanguage}
    	order   by lower(study.studyDescription), lower(gradeType.description)
    </select>

    <select id="findSubjectStudyGradeType" parameterType="map" resultMap="SubjectStudyGradeTypeResultMap">
    	<include refid="selectSubjectStudyGradeType_fragment"/>
    	where  	subjectStudyGradeType.id  = #{subjectStudyGradeTypeId}
    </select>

    <!-- Return a plain SubjectStudyGradeType object, so that no preferrredLanguage parameter is necessary -->
    <select id="findPlainSubjectStudyGradeType" parameterType="int" resultMap="BasicSubjectStudyGradeTypeResultMap">
        select  opuscollege.subjectStudyGradeType.*
        from opuscollege.subjectStudyGradeType
        WHERE subjectStudyGradeType.id = #{id}
    </select>

    <select id="findSubjectStudyGradeTypeByParams" parameterType="map" resultMap="SubjectStudyGradeTypeResultMap">
        <include refid="selectSubjectStudyGradeType_fragment"/>
        WHERE studyGradeTypeId = #{studyGradeTypeId}
        <if test='subjectId != null and subjectId != "0"'>
            AND subjectId = #{subjectId}
        </if>
        <if test='subjectCode != null and subjectCode != ""'>
            AND subject.subjectCode = #{subjectCode}
        </if>
        <if test='cardinalTimeUnitNumber != null and cardinalTimeUnitNumber != "0"'>
            AND (cardinalTimeUnitNumber= #{cardinalTimeUnitNumber} OR cardinalTimeUnitNumber = 0)
        </if>
        <if test='rigidityTypeCode != null and rigidityTypeCode != ""'>
            AND rigidityTypeCode= #{rigidityTypeCode}
        </if>
        <if test='importanceTypeCode != null and importanceTypeCode != ""'>
            AND importanceTypeCode= #{importanceTypeCode}
        </if>
    </select>  

    <select id="findSubjectStudyGradeTypeIdBySubjectAndStudyGradeType" parameterType="map" resultType="int">
        select  id
        from    opusCollege.subjectStudyGradeType
        where   subjectId  = #{subjectId}
        and     studyGradeTypeId  = #{studyGradeTypeId}
    </select>

    <!-- NB: The set of prerequisites has to be post-processed, because if the subjectDescription changes over time, there will be multiple records for the same subjectCode.
     -->
    <select id="findSubjectPrerequisites" parameterType="int" resultType="SubjectPrerequisite">
        select  distinct subjectStudyGradeTypeId
        ,       requiredSubjectCode
        ,       subjectDescription          as requiredSubjectDescription
        ,       subjectPrerequisite.active
        from    opusCollege.subjectPrerequisite
        inner   join opusCollege.subject on subject.subjectCode = subjectPrerequisite.requiredSubjectCode
        inner   join opuscollege.academicyear on subject.currentacademicyearid = academicyear.id
        and     subjectStudyGradeTypeId = #{value}
    </select>

    <select id="findPrerequisiteSubjectCodes" parameterType="int" resultType="string">
        select  requiredSubjectCode
        from    opusCollege.subjectPrerequisite
        where   subjectStudyGradeTypeId = #{value}
    </select>

    <select id="findPrerequisitesBySubjectCodeAndStudyPlanId" parameterType="map" resultType="SubjectPrerequisite">
        select  distinct subjectStudyGradeTypeId
        ,       requiredSubjectCode
        ,       subjectDescription          as requiredSubjectDescription
        ,       subjectPrerequisite.active
        from    opusCollege.subjectPrerequisite
        inner   join opusCollege.subjectStudyGradeType on subjectStudyGradeType.id = subjectPrerequisite.subjectStudyGradeTypeId
        inner   join opusCollege.subject on subject.id = subjectStudyGradeType.subjectId
        inner   join opusCollege.studyGradeType on studyGradeType.id = subjectStudyGradeType.studyGradeTypeId
        inner   join opusCollege.studyPlanCardinalTimeUnit on studyPlanCardinalTimeUnit.studyGradeTypeId = subjectStudyGradeType.studyGradeTypeId
        where   studyPlanId = #{studyPlanId}
        and     subjectCode = #{subjectCode}
    </select>
    
   	<select id="findSubject" parameterType="int" resultMap="SubjectResultMap">
		select opuscollege.subject.*
		from   opuscollege.subject
		where  id = #{value}
   	</select>
   	
   	<select id="findSubjectByCode" parameterType="map" resultMap="SubjectResultMap">
		select *
		from   opuscollege.subject
		where  subjectCode = #{subjectCode}
        and    currentAcademicYearId = #{academicYearId}
        <if test='subjectDescription != null and subjectDescription != ""'>
			and subjectDescription = #{subjectDescription}
        </if>
        <if test='resultType != null and resultType != ""'>
            and resultType = #{resultType}
        </if>
        <if test='subjectId != null and subjectId != "0"'>
            and    id != #{subjectId}
        </if>
   	</select>

   	<select id="findSubjectByDescriptionStudy" parameterType="map" resultType="Subject">
		select 	*
		from   	opuscollege.subject
		where  	subjectDescription 	= #{subjectDescription}
		AND 	primaryStudyId 		= #{primaryStudyId}
        and     currentAcademicYearId = #{academicYearId}
        <if test='resultType != null and resultType != ""'>
            and resultType = #{resultType}
        </if>
        <if test='subjectId != null and subjectId != "0"'>
            and    id != #{subjectId}
        </if>
   	</select>

   	<select id="findSubjectByDescriptionStudyCode" parameterType="map" resultType="Subject">
		select 	*
		from   	opuscollege.subject
		where  	subjectDescription 	  = #{subjectDescription}
		AND 	primaryStudyId 		  = #{primaryStudyId}
		and		subjectCode			  = #{subjectCode}
        and     currentAcademicYearId = #{academicYearId}
        <if test='resultType != null and resultType != ""'>
            and resultType = #{resultType}
        </if>
   	</select>

   	<select id="findSubjectByDescriptionStudyCode2" parameterType="map" resultMap="SubjectResultMap">
		select 	*
		from   	opuscollege.subject
		where  	subjectCode			  = #{subjectCode}
        and     currentAcademicYearId = #{academicYearId}
   	</select>
    
    <select id="findSubjectsByStudy" parameterType="map" resultType="Subject">
        select  distinct subjectCode
        ,       subjectDescription
        from    opuscollege.subject
        where   primaryStudyId = #{studyId}
        order   by subjectDescription
    </select>

    <sql id="findSubjects_fragment">
        from opuscollege.subject
        INNER JOIN opuscollege.academicyear ON subject.currentacademicyearid = academicyear.id
        WHERE subject.id IN (
            select distinct(subject.id) 
        	FROM opuscollege.subject
            <!-- if studyGradeTypeId or cardinalTimeUnitNumber is set then traverse via subject(Block)StudyGradeType, otherwise via 'subject.primaryStudyId' -->
            <if test="studyGradeTypeId != null  or cardinalTimeUnitNumber != null">
                
                LEFT OUTER JOIN opuscollege.subjectstudygradetype ON subjectStudyGradeType.subjectId = subject.id
                LEFT OUTER JOIN opuscollege.subjectsubjectblock ON subject.id = subjectsubjectblock.subjectid
                LEFT OUTER JOIN opuscollege.subjectblockstudygradetype ON subjectsubjectblock.subjectblockid = subjectblockstudygradetype.subjectblockid
        
                INNER JOIN opuscollege.studyGradeType ON subjectblockstudygradetype.studyGradeTypeid = studyGradeType.id
                    OR subjectstudygradetype.studyGradeTypeid = studyGradeType.id
                INNER JOIN opuscollege.study on studyGradeType.studyId = study.id
            </if>
            <if test="studyGradeTypeId == null and cardinalTimeUnitNumber == null">
                INNER JOIN opuscollege.study on subject.primaryStudyId = study.id
            </if>
            INNER JOIN opuscollege.organizationalunit on study.organizationalUnitId = organizationalunit.id
            INNER JOIN opuscollege.branch on branch.id = organizationalunit.branchId
            INNER JOIN opuscollege.institution on institution.id = branch.institutionId
            WHERE true
            <if test='institutionId != null and institutionId != "0"'>
                and institution.id = #{institutionId}
            </if>
            <if test='branchId != null and branchId != "0"'>
                and branch.id = #{branchId}
            </if>
            <if test='organizationalUnitId != null and organizationalUnitId != "0"'>
                and organizationalunit.id in (select id from opuscollege.crawl_tree(#{organizationalUnitId}, 0)) 
            </if>
            <if test='studyId != null and studyId != "0"'>
                and (study.id = #{studyId}
                <if test="importanceTypeMajor != null">
                    and subjectStudyGradeType.importanceTypeCode = #{importanceTypeMajor}
                </if>
                <if test='minor1Id != null and minor1Id != "0"'>
                    OR (opuscollege.study.id  =  #{minor1Id}
                        and subjectStudyGradeType.importanceTypeCode = #{importanceTypeMinor})
                </if>
                )
            </if>
            <if test='active != null and active != ""'>
                and subject.active = #{active}        
            </if>
            <if test='searchValue != null and searchValue != ""'>
                and opuscollege.remove_diacritics(
                    lower(subject.subjectCode) || ' ' ||
                    lower(subject.subjectDescription)
                ) like opuscollege.remove_diacritics(lower('%' || #{searchValue} || '%'))
            </if>
            <if test="studyGradeTypeId != null">
                and (studyGradeType.id = #{studyGradeTypeId}
                <if test='minorStudyGradeTypeId != null and minorStudyGradeTypeId != "0"'>
                      or studyGradeType.id = #{minorStudyGradeTypeId}
                </if>
                )
            </if>
            <if test="cardinalTimeUnitNumberExact != null">
                    and (subjectStudyGradeType.cardinalTimeUnitNumber = #{cardinalTimeUnitNumberExact}
                        OR subjectblockstudygradetype.cardinalTimeUnitNumber = #{cardinalTimeUnitNumberExact})
            </if>
            <if test="cardinalTimeUnitNumber != null">
                <if test='cardinalTimeUnitNumber != "0"'>
                	and (subjectStudyGradeType.cardinalTimeUnitNumber = #{cardinalTimeUnitNumber}
                        OR subjectblockstudygradetype.cardinalTimeUnitNumber = #{cardinalTimeUnitNumber}
                		OR subjectStudyGradeType.cardinalTimeUnitNumber = 0)
                </if>
                <if test="cardinalTimeUnitNumber == 0">
                    and (subjectStudyGradeType.cardinalTimeUnitNumber = 0
                        OR subjectblockstudygradetype.cardinalTimeUnitNumber = 0)
                </if>
            </if>
            <if test='currentAcademicYearId != null and currentAcademicYearId != "0"'>
                and subject.currentAcademicYearId = #{currentAcademicYearId}  
            </if>
            <if test="resultType != null">
                   and subject.resultType = #{resultType}  
            </if>
            <if test='rigidityTypeCode != null and rigidityTypeCode != ""'>
                and subjectStudyGradeType.rigidityTypeCode = #{rigidityTypeCode} 
            </if>
            <if test='subjectIds != null and subjectIds.size() > 0'>
                and subject.id IN
                 <foreach collection="subjectIds" item="item" separator="," open="(" close=")">
                  #{item}
                </foreach>
            </if>
            <if test="subjectCode != null">
                and subject.subjectCode = #{subjectCode}
            </if>
        )
        <if test="subjectOrExaminationOrTestStaffMemberId != null">
            AND (
                exists (
                    SELECT id FROM opuscollege.subjectTeacher
                    WHERE subjectTeacher.staffmemberId = #{subjectOrExaminationOrTestStaffMemberId}
                    AND subjectTeacher.subjectId = subject.id
                )
                OR exists (
                    SELECT examinationTeacher.id FROM opuscollege.examinationTeacher
                    INNER JOIN opuscollege.examination ON examinationTeacher.examinationId = examination.id
                    WHERE examinationTeacher.staffmemberId = #{subjectOrExaminationOrTestStaffMemberId}
                    AND examination.subjectId = subject.id
                )
                OR exists (
                    SELECT testTeacher.id FROM opuscollege.testTeacher
                    INNER JOIN opuscollege.test ON testTeacher.testId = test.id
                    INNER JOIN opuscollege.examination ON test.examinationId = examination.id
                    WHERE testTeacher.staffmemberId = #{subjectOrExaminationOrTestStaffMemberId}
                    AND examination.subjectId = subject.id
                )
            )
        </if>
    </sql>

    <select id="findSubjects" parameterType="map" resultMap="SubjectResultMap">
        select subject.*
        <include refid="findSubjects_fragment"/>
        <if test="offset != null">
            and subject.subjectDescription || subject.id IN (
                select distinct (subject.subjectDescription || subject.id) as col
                <include refid="findSubjects_fragment"/>
                ORDER BY col
                offset ${offset}
                <if test="limit != null">
                    limit ${limit}
                </if>
            )
        </if>
        ORDER BY 
        <if test='orderBy != null and orderBy != ""'>
        	${orderBy} ,
        </if>
        lower(subject.subjectDescription), academicyear.description DESC
    </select>

    <select id="findBlockedSubjects" parameterType="map" resultMap="SubjectResultMap">
        select subject.*                
        from opuscollege.subject      
        WHERE subject.id IN (
            select distinct(subject.id)        
            FROM opuscollege.subject                                                  
            INNER JOIN opuscollege.subjectsubjectblock ON subject.id = subjectsubjectblock.subjectid  
            INNER JOIN opuscollege.subjectblockstudygradetype ON subjectsubjectblock.subjectblockid = subjectblockstudygradetype.subjectblockid 
            INNER JOIN opuscollege.studyGradeType ON subjectblockstudygradetype.studyGradeTypeid = studyGradeType.id    
            INNER JOIN opuscollege.study on subject.primaryStudyId = study.id    
            INNER JOIN opuscollege.organizationalunit on study.organizationalUnitId = organizationalunit.id    
            INNER JOIN opuscollege.branch on branch.id = organizationalunit.branchId      
            INNER JOIN opuscollege.institution on institution.id = branch.institutionId     
            WHERE true
            <if test="institutionTypeCode != null">
                and institution.institutionTypeCode = #{institutionTypeCode}
            </if>
            <if test='institutionId != null and institutionId != "0"'>
                and institution.id = #{institutionId}
            </if>
            <if test='branchId != null and branchId != "0"'>
                and branch.id = #{branchId}
            </if>
            <if test='organizationalUnitId != null and organizationalUnitId != "0"'>
                and organizationalunit.id in (select id from opuscollege.crawl_tree(#{organizationalUnitId}, 0)) 
            </if>
            <if test='studyId != null and studyId != "0"'>
                and (study.id = #{studyId}
                <if test="importanceTypeMajor != null">
                    and subjectStudyGradeType.importanceTypeCode = #{importanceTypeMajor}
                </if>
                <if test='minor1Id != null and minor1Id != "0"'>
                    OR (opuscollege.study.id  =  #{minor1Id}
                        and subjectStudyGradeType.importanceTypeCode = #{importanceTypeMinor})
                </if>
                )
            </if>
            <if test='active != null and active != ""'>
                and subject.active = #{active}        
            </if>
            <if test='searchValue != null and searchValue != ""'>
                and opuscollege.remove_diacritics(lower(subject.subjectDescription)) like opuscollege.remove_diacritics(lower('%' || #{searchValue} || '%'))
	        </if>
            <if test='studyGradeTypeId != null and studyGradeTypeId != "0"'>
                and (studyGradeType.id = #{studyGradeTypeId}
                <if test='minorStudyGradeTypeId != null and minorStudyGradeTypeId != "0"'>
                      or studyGradeType.id = #{minorStudyGradeTypeId}
                </if>
                )
	        </if>
            <if test='currentAcademicYearId != null and currentAcademicYearId != "0"'>
                and studyGradeType.currentAcademicYearId = #{currentAcademicYearId}
                and subject.currentAcademicYearId = #{currentAcademicYearId}  
            </if>
	        <if test="cardinalTimeUnitNumber != null">
	            AND (subjectBlockStudyGradeType.cardinalTimeUnitNumber = #{cardinalTimeUnitNumber}  
	                OR subjectBlockStudyGradeType.cardinalTimeUnitNumber = 0)    
	        </if>
	        <if test="resultType != null">
               and subject.resultType = #{resultType}  
            </if>
            <if test='rigidityTypeCode != null and rigidityTypeCode != ""'>
	            and subjectBlockStudyGradeType.rigidityTypeCode = #{rigidityTypeCode} 
	        </if>
       )
       order  by lower(subject.subjectDescription)
    </select>
    
    
    <select id="findSubjectCount" parameterType="map" resultType="int">
        SELECT COUNT(DISTINCT subject.id) AS total
        <include refid="findSubjects_fragment"/>
    </select>
   
   	<insert id="addSubject" parameterType="Subject">
        insert into opuscollege.subject
        ( subjectCode
        , subjectDescription 
        , subjectContentDescription 
		, primaryStudyId
        , freeChoiceOption
        , frequencyCode
        , studyTimeCode
        , targetGroupCode
        , maximumParticipants
        , creditAmount
        , hoursToInvest
        , examTypeCode
        , brsPassingSubject
        , currentAcademicYearId
        , resultType
        , active
        ) values (
          #{subjectCode}
        , #{subjectDescription}
        , #{subjectContentDescription}
		, #{primaryStudyId}
        , #{freeChoiceOption}
        , #{frequencyCode}
        , #{studyTimeCode}
        , #{targetGroupCode}
        , #{maximumParticipants}
        , #{creditAmount}
        , #{hoursToInvest}
        , #{examTypeCode}
        , #{brsPassingSubject}
        , #{currentAcademicYearId}
        , #{resultType}
        , #{active}
        )
        <selectKey keyProperty="id" resultType="int">
            SELECT currVal('opuscollege.subjectseq')
        </selectKey>
    </insert> 
    
    <update id="updateSubject" parameterType="Subject">
        update  opuscollege.subject
        set     subjectCode                 = #{subjectCode}
        ,       subjectDescription          = #{subjectDescription}
        ,       subjectContentDescription   = #{subjectContentDescription}
        ,		primaryStudyId				= #{primaryStudyId}
        ,       freeChoiceOption            = #{freeChoiceOption}
        ,       frequencyCode               = #{frequencyCode}
        ,       studyTimeCode               = #{studyTimeCode}
        ,       targetGroupCode             = #{targetGroupCode}
        ,       maximumParticipants         = #{maximumParticipants}
        ,       creditAmount                = #{creditAmount}
        ,		hoursToInvest				= #{hoursToInvest}
        ,       examTypeCode                = #{examTypeCode}
        ,       brsPassingSubject           = #{brsPassingSubject}
        , 		currentAcademicYearId		= #{currentAcademicYearId}
        ,       resultType                  = #{resultType}
        ,       active                    = #{active}
        where   id = #{id}
    </update>
    
    <!-- when deleting subject, records in several other tables must deleted as well -->
    <delete id="deleteSubject" parameterType="int">
        delete from opuscollege.Subject
        where  id = #{value}
    </delete>
    
    <delete id="deleteSubjectStudyTypes" parameterType="int">
        delete from opuscollege.SubjectStudyType
        where  subjectid = #{value}
    </delete>

    <delete id="deleteSubjectSubjectBlocks" parameterType="int">
        delete from opuscollege.SubjectSubjectBlock
        where  subjectId = #{value}
    </delete>
    
    <delete id="deleteSubjectStudyGradeTypes" parameterType="int">
        delete from opuscollege.SubjectStudyGradeType
        where  studyGradeTypeId = #{value}
    </delete>
    
    <delete id="deleteAllSubjectTeachers" parameterType="int">
        delete from opuscollege.SubjectTeacher
        where  subjectid = #{value}
    </delete>
    
    <select id="findSubjectPrimaryStudyId" parameterType="int" resultType="int">
		select  primaryStudyId
		from   	opuscollege.subject
		where  	id = #{subjectId}
   	</select>
   	
   	<select id="findSubjectTeacher" parameterType="int" resultMap="SubjectTeacherResultMap">
		select opuscollege.subjectTeacher.*
		from   	opuscollege.subjectTeacher
		where  	id = #{value}
   	</select>
   	
   	<select id="findSubjectTeachers" parameterType="int" resultMap="SubjectTeacherResultMap">
		select opuscollege.subjectTeacher.*
		from   opuscollege.subjectTeacher
		where  subjectId = #{value}
		order  by subjectTeacher.staffmemberid, subjectTeacher.subjectid, subjectTeacher.classgroupid 
   	</select>
   	
   	<select id="findSubjectClassgroups" parameterType="int" resultType="SubjectClassgroup">
		select opuscollege.subjectClassgroup.*
		from   opuscollege.subjectClassgroup
		where  subjectId = #{value}
   	</select>
   	
   	<insert id="addSubjectTeacher" parameterType="SubjectTeacher">
        insert into opuscollege.subjectTeacher
        ( subjectId
        , staffMemberId
        , classgroupId 
        , active
        ) values
        ( #{subjectId}
        , #{staffMemberId}
        , #{classgroupId}
        , #{active}
        )
    </insert> 
    
    <update id="updateSubjectTeacher" parameterType="SubjectTeacher">
        update  opuscollege.subjectTeacher
        set     subjectId               = #{subjectId}
        ,		staffMemberId			= #{staffMemberId}
        ,       classgroupId			= #{classgroupId}
        ,       active                  = #{active}
        where   id = #{id}
    </update>
    
    <delete id="deleteSubjectTeacher" parameterType="int">
        delete from opuscollege.SubjectTeacher
        where  id = #{value}
    </delete>
    
    <select id="existSubjectStudyPlanDetails" parameterType="int" resultType="boolean">
        select exists (
        	select 1
        	from   opuscollege.studyPlanDetail
        	where  subjectId = #{value}
        )
    </select>

    <insert id="addSubjectStudyGradeType" parameterType="SubjectStudyGradeType">
    	insert	into opuscollege.subjectStudyGradeType
    	( subjectId
    	, studyGradeTypeId
    	, active
    	, cardinalTimeUnitNumber
    	, rigidityTypeCode
    	, importanceTypeCode
    	) values
    	( #{subjectId}
    	, #{studyGradeTypeId}
    	, #{active}
    	, #{cardinalTimeUnitNumber}
    	, #{rigidityTypeCode}
    	, #{importanceTypeCode}
    	)
    </insert>
    
    <update id="updateSubjectStudyGradeType" parameterType="SubjectStudyGradeType">
    	update	opuscollege.subjectStudyGradeType
    	set		studyGradeTypeId        = #{studyGradeTypeId}
    	,		subjectId				= #{subjectId}
        ,       active                  = #{active}
        ,       cardinalTimeUnitNumber  = #{cardinalTimeUnitNumber}
        ,       rigidityTypeCode        = #{rigidityTypeCode}
        ,       importanceTypeCode      = #{importanceTypeCode}
    	where	id = #{id}
    </update>
    
    <update id="deleteSubjectStudyGradeType" parameterType="int">
    	delete	from opuscollege.subjectStudyGradeType
    	where	id = #{id}
    </update>

  
    <!-- apparently unused. if used: move to study.xml -->
<!--     <select id="findStudyGradeTypeId" parameterType="map" resultType="int"> -->
<!--     	select id -->
<!--     	from   opuscollege.studyGradeType -->
<!--     	where  studyId = #{studyId} -->
<!--     	and    gradeTypeCode = #{gradeTypeCode} -->
<!--     </select> -->
    
    <!-- STUDY TYPES -->
    <select id="findSubjectStudyTypes" parameterType="map" resultType="SubjectStudyType">
    	select	SubjectStudyType.*
    	,		studyType.description as studyTypeDescription
    	from	opuscollege.SubjectStudyType
    	inner   join opuscollege.studyType on studyType.code = SubjectStudyType.studyTypeCode
    	where	subjectId = #{subjectId}
    	and     lang = #{preferredLanguage}
    	<if test="orderBy != null">
	    	order by ${orderBy}
    	</if>
   	</select>
   	
   	<select id="findSubjectStudyType" parameterType="map" resultType="SubjectStudyType">
    	select	SubjectStudyType.*
    	,		studyType.description as studyTypeDescription
    	from	opuscollege.SubjectStudyType
    	inner   join opuscollege.studyType on studyType.code = SubjectStudyType.studyTypeCode
    	where	SubjectStudyType.id = #{subjectStudyTypeId}
    	and     studyType.lang = #{preferredLanguage}
   	</select>
   	
   	<insert id="addSubjectStudyType" parameterType="SubjectStudyType">
   	    insert into opuscollege.SubjectStudyType
        ( subjectId
        , studyTypeCode
        , active
        ) values
        ( #{subjectId}
        , #{studyTypeCode}
        , #{active}
        )
    </insert>
    
    <update id="updateSubjectStudyType" parameterType="SubjectStudyType">
    	update	opuscollege.subjectStudyType
    	set		studyTypeCode = #{studyTypeCode}
    	,       active = #{active}
    	where	id = #{id}
    </update>
    
    <delete id="deleteSubjectStudyType" parameterType="int">
    	delete	from opuscollege.subjectStudyType
    	where	id = #{id}
    </delete>

    <!-- find all Subjects for one StudyPlan -->
    <select id="findSubjectsForStudyPlan" parameterType="int" resultMap="SubjectResultMap"> 
        select subject.*
        from   opusCollege.subject
        inner  join opusCollege.studyPlanDetail on studyPlanDetail.subjectId = subject.id
        WHERE  studyPlanDetail.studyPlanId = #{value}
        union
        select subject.*
        from   opusCollege.subject
        inner  join opusCollege.subjectSubjectBlock on subjectSubjectBlock.subjectId = subject.id
        inner  join opusCollege.subjectBlock on subjectBlock.id = subjectSubjectBlock.subjectBlockId
        inner  join opusCollege.studyPlanDetail on studyPlanDetail.subjectBlockId = subjectBlock.id
        WHERE  studyPlanDetail.studyPlanId = #{value}
        order  by currentAcademicYearId, subjectDescription
    </select>
    
    <!-- find all Subjects for one StudyPlanDetail,including in subjectBlocks -->
    <sql id="findSubjectsForStudyPlanDetailAndInBlocks_query">
        select subject.*
        from   opusCollege.subject
        inner  join opusCollege.studyPlanDetail on studyPlanDetail.subjectId = subject.id
        WHERE  studyPlanDetail.id = #{value}
        union
        select subject.*
        from   opusCollege.subject
        inner  join opusCollege.subjectSubjectBlock on subjectSubjectBlock.subjectId = subject.id
        inner  join opusCollege.subjectBlock on subjectBlock.id = subjectSubjectBlock.subjectBlockId
        inner  join opusCollege.studyPlanDetail on studyPlanDetail.subjectBlockId = subjectBlock.id
        WHERE  studyPlanDetail.id = #{value}
    </sql>
    <select id="findSubjectsForStudyPlanDetailAndInBlocks" parameterType="int" resultMap="SubjectResultMap"> 
    	<include refid="findSubjectsForStudyPlanDetailAndInBlocks_query" />
    </select>
    <select id="findSubjectsForStudyPlanDetailAndInBlocksEagerExamination" parameterType="int" resultMap="SubjectEagerExaminationsResultMap"> 
    	<include refid="findSubjectsForStudyPlanDetailAndInBlocks_query" />
    </select>

    <!-- find all Subjects for one StudyPlan -->
    <select id="findSubjectsForStudyPlanCardinalTimeUnit" parameterType="map" resultType="Subject"> 
        select opuscollege.subject.* 
        from   opuscollege.subject
        inner  join opuscollege.studyPlanDetail on studyPlanDetail.subjectId = subject.id
        WHERE  studyPlanDetail.studyPlanCardinalTimeUnitId = #{studyPlanCardinalTimeUnitId}
        <if test='active != null and active != ""'>
			AND	   subject.active = #{active}
        </if>
        order  by primaryStudyId, currentAcademicYearId, lower(subjectDescription)
    </select>
   		
    <!-- find all Subjects for one StudyPlan,including in subjectBlocks -->
    <select id="findSubjectIdsForStudyPlanCardinalTimeUnitAndInBlocks" parameterType="int" resultType="int"> 
        select subject.id
        from   opusCollege.subject
        inner  join opusCollege.studyPlanDetail on studyPlanDetail.subjectId = subject.id
        WHERE  studyPlanDetail.studyPlanCardinalTimeUnitId = #{value}
        union
        select subject.id
        from   opusCollege.subject
        inner  join opusCollege.subjectSubjectBlock on subjectSubjectBlock.subjectId = subject.id
        inner  join opusCollege.subjectBlock on subjectBlock.id = subjectSubjectBlock.subjectBlockId
        inner  join opusCollege.studyPlanDetail on studyPlanDetail.subjectBlockId = subjectBlock.id
        WHERE  studyPlanDetail.studyPlanCardinalTimeUnitId = #{value}
    </select>
    
    <!-- find all Subjects for one StudyPlan -->
    <select id="findActiveSubjectsForStudyPlan" parameterType="int" resultType="Subject"> 
        select  opuscollege.subject.* 
        from    opuscollege.subject
        WHERE   subject.active = 'Y'
        AND subject.id IN (
                SELECT subjectSubjectBlock.subjectId from opuscollege.subjectSubjectBlock
                INNER JOIN opuscollege.studyPlanDetail ON studyPlanDetail.subjectBlockId = subjectSubjectBlock.subjectBlockId
                INNER JOIN opuscollege.studyPlan ON studyPlanDetail.studyPlanId = studyPlan.id
                WHERE studyPlan.id = #{value}
                )
        OR subject.id IN (
                SELECT subjectId from opuscollege.studyPlanDetail
                WHERE studyPlanId = #{value}
                )
        order   by lower(subjectDescription)
    </select>

   <!-- find all Subjects for one cardinaltimeunit within a StudyPlan -->
    <select id="findActiveSubjectsForCardinalTimeUnit" parameterType="map" resultType="Subject"> 
        select  opuscollege.subject.* 
        from    opuscollege.subject
        WHERE 	subject.active = 'Y'
        AND subject.id IN (
                SELECT subjectSubjectBlock.subjectId from opuscollege.subjectSubjectBlock
                INNER JOIN opuscollege.studyPlanDetail ON studyPlanDetail.subjectBlockId = subjectSubjectBlock.subjectBlockId
                INNER JOIN opuscollege.studyPlanCardinalTimeUnit on studyPlanDetail.studyPlanCardinalTimeUnitId = studyPlanCardinalTimeUnit.id
       			INNER JOIN opuscollege.studyGradeType on studyPlanCardinalTimeUnit.studyGradeTypeId = studyGradeType.id
                INNER JOIN opuscollege.studyPlan ON studyPlanCardinalTimeUnit.studyPlanId = studyPlan.id
                WHERE studyPlan.id = #{studyPlanId}
                <if test='studyPlanCardinalTimeUnitId != null and studyPlanCardinalTimeUnitId != "0"'>
               		AND studyPlanCardinalTimeUnit.id = #{studyPlanCardinalTimeUnitId} 
               	</if>
        		AND studyPlanCardinalTimeUnit.cardinalTimeUnitNumber = #{cardinalTimeUnitNumber} 
                <if test='currentAcademicYearId != null and currentAcademicYearId != "0"'>
            		AND studyGradeType.currentAcademicYearId = #{currentAcademicYearId} 
                </if>
                AND subjectSubjectBlock.subjectBlockId IN (
                	SELECT subjectId from opuscollege.studyPlanDetail
		                WHERE studyPlanDetail.studyPlanId = #{studyPlanId}
		                AND studyPlanDetail.subjectBBlockId IN (
                			select subjectBlock.id 
                			FROM opuscollege.subjectBlock
                			INNER JOIN opuscollege.subjectBlockstudyGradeType on subjectBlockStudyGradeType.subjectBlockId = subjectBlock.id 
                			WHERE (
                			subjectBlockStudyGradeType.cardinalTimeUnitNumber = #{cardinalTimeUnitNumber}
                				OR subjectBlockStudyGradeType.cardinalTimeUnitNumber = 0)
                				)
                		
        			)
                )
		        OR subject.id  IN (
		                SELECT subjectId from opuscollege.studyPlanDetail
		                WHERE studyPlanDetail.studyPlanId = #{studyPlanId}
		                AND studyPlanDetail.subjectId IN (
		                		select subject.id 
		                		FROM opuscollege.subject 
		                        INNER JOIN opuscollege.subjectstudyGradeType on subjectStudyGradeType.subjectId = subject.id 
		                		WHERE (
		                		subjectStudyGradeType.cardinalTimeUnitNumber = #{cardinalTimeUnitNumber}
		                			OR subjectStudyGradeType.cardinalTimeUnitNumber = 0)
		        				)
		                )
        	order   by lower(subjectDescription)
    </select>
    
    <select id="findAllSubjectStudyGradeTypes" resultType="SubjectStudyGradeType">
        select opuscollege.subjectStudyGradeType.*
        from opuscollege.subjectStudyGradeType
    </select>
    
   <!-- find all Subjects for one cardinaltimeunit within a StudyPlan -->
    <select id="findActiveSubjectsForStudyPlanCardinalTimeUnit" parameterType="map" resultType="Subject"> 
        select  opuscollege.subject.* 
        from    opuscollege.subject
        WHERE 	subject.active = 'Y'
        AND subject.id IN (
                SELECT subjectSubjectBlock.subjectId from opuscollege.subjectSubjectBlock
                INNER JOIN opuscollege.studyPlanDetail ON studyPlanDetail.subjectBlockId = subjectSubjectBlock.subjectBlockId
                INNER JOIN opuscollege.studyPlanCardinalTimeUnit on studyPlanDetail.studyPlanCardinalTimeUnitId = studyPlanCardinalTimeUnit.id
       			INNER JOIN opuscollege.studyGradeType on studyPlanCardinalTimeUnit.studyGradeTypeId = studyGradeType.id
                INNER JOIN opuscollege.studyPlan ON studyPlanCardinalTimeUnit.studyPlanId = studyPlan.id
                WHERE studyPlan.id = #{studyPlanId}
                <if test='studyPlanCardinalTimeUnitId != null and studyPlanCardinalTimeUnitId != "0"'>
               		AND studyPlanCardinalTimeUnit.id = #{studyPlanCardinalTimeUnitId} 
               	</if>
                <if test='studyGradeTypeId != null and studyGradeTypeId != "0"'>
               		AND studyGradeType.id = #{studyGradeTypeId} 
               	</if>
        		AND studyPlanCardinalTimeUnit.cardinalTimeUnitNumber = #{cardinalTimeUnitNumber} 
                <if test='currentAcademicYearId != null and currentAcademicYearId != "0"'>
            		AND studyGradeType.currentAcademicYearId = #{currentAcademicYearId} 
                </if>
                AND subjectSubjectBlock.subjectBlockId IN (
                	SELECT subjectBlockId from opuscollege.studyPlanDetail
		                WHERE studyPlanDetail.studyPlanId = #{studyPlanId}
		                AND studyPlanDetail.studyPlanCardinalTimeUnitId = #{studyPlanCardinalTimeUnitId}
		                AND studyPlanDetail.subjectBlockId IN (
                			select subjectBlock.id 
                			FROM opuscollege.subjectBlock
                			INNER JOIN opuscollege.subjectBlockstudyGradeType on subjectBlockStudyGradeType.subjectBlockId = subjectBlock.id 
                			WHERE (
                			subjectBlockStudyGradeType.cardinalTimeUnitNumber = #{cardinalTimeUnitNumber}
                				OR subjectBlockStudyGradeType.cardinalTimeUnitNumber = 0)
                				)
                		
        			)
                )
		        OR subject.id  IN (
		                SELECT subjectId from opuscollege.studyPlanDetail
		                WHERE studyPlanDetail.studyPlanId = #{studyPlanId}
		                AND studyPlanDetail.studyPlanCardinalTimeUnitId = #{studyPlanCardinalTimeUnitId}
		                AND studyPlanDetail.subjectId IN (
		                		select subject.id 
		                		FROM opuscollege.subject 
		                        INNER JOIN opuscollege.subjectstudyGradeType on subjectStudyGradeType.subjectId = subject.id 
		                		WHERE (
		                		subjectStudyGradeType.cardinalTimeUnitNumber = #{cardinalTimeUnitNumber}
		                			OR subjectStudyGradeType.cardinalTimeUnitNumber = 0)
		                		
		        				)
		                )
        	order   by lower(subjectDescription)
    </select>

    <insert id="addSubjectPrerequisite" parameterType="SubjectPrerequisite">
        insert into opuscollege.subjectPrerequisite
        ( subjectStudyGradeTypeId
        , requiredSubjectCode
        , active
        ) values
        ( #{subjectStudyGradeTypeId}
        , #{requiredSubjectCode}
        , #{active}
        )
    </insert>

    <delete id="deleteSubjectPrerequisite" parameterType="SubjectPrerequisite">
        delete  from opuscollege.subjectPrerequisite
        where   subjectStudyGradeTypeId = #{subjectStudyGradeTypeId}
        and     requiredSubjectCode = #{requiredSubjectCode}
    </delete>
    
    <sql id="selectSubjectSubjectBlock_fragment">
        select subjectSubjectBlock.*
        ,      subject.id                   as "subject.id"
        ,      subject.subjectCode          as "subject.subjectCode"
        ,      subject.subjectDescription   as "subject.subjectDescription"
        ,      subject.active               as "subject.active"
        ,      subject.primaryStudyId       as "subject.primaryStudyId"
    </sql>

    <select id="findSubjectSubjectBlocks" parameterType="map" resultMap="SubjectSubjectBlockResultMap">
        select  *
        from opuscollege.subjectSubjectBlock
        INNER JOIN opuscollege.subject on opuscollege.subjectSubjectBlock.subjectId = subject.id
        INNER JOIN opuscollege.study on opuscollege.subject.primaryStudyId = study.id
        INNER JOIN opuscollege.organizationalunit on opuscollege.study.organizationalUnitId = organizationalunit.id
        INNER JOIN opuscollege.branch on opuscollege.branch.id = organizationalunit.branchId
        INNER JOIN opuscollege.institution on opuscollege.institution.id = branch.institutionId
        WHERE true
        <if test="institutionTypeCode != null">
            and institution.institutionTypeCode = #{institutionTypeCode}
        </if>
        <if test='institutionId != null and institutionId != "0"'>
            and institution.id = #{institutionId}
        </if>
        <if test='branchId != null and branchId != "0"'>
            and branch.id = #{branchId}
        </if>
        <if test='organizationalUnitId != null and organizationalUnitId != "0"'>
            and organizationalunit.id in (select id from opuscollege.crawl_tree(#{organizationalUnitId}, 0)) 
        </if>
        <if test='studyId != null and studyId != "0"'>
            and   study.id = #{studyId}
        </if>
        <if test='active != null and active != ""'>
            and subjectSubjectBlock.active = #{active}
        </if>
        <if test='subjectIds != null and subjectIds.size() > 0'>
            and subjectSubjectBlock.subjectId IN
             <foreach collection="subjectIds" item="item" separator="," close=")" open="(">
                #{item}
            </foreach>
        </if>
        <if test='subjectBlockIds != null and subjectBlockIds.size() > 0'>
            and subjectSubjectBlock.subjectBlockId IN
             <foreach collection="subjectBlockIds" item="item" separator="," close=")" open="(">
                #{item}
            </foreach>
        </if>
        order  by subjectSubjectBlock.subjectBlockId, subjectSubjectBlock.subjectId
    </select>

    <select id="findSubjectSubjectBlocksForSubjectTransition" parameterType="map" resultMap="SubjectSubjectBlockResultMap">
        select  *
        from opuscollege.subjectSubjectBlock
        inner join opuscollege.subjectBlock on subjectSubjectBlock.subjectBlockId = subjectBlock.id
        inner join opuscollege.subjectblock targetSubjectBlock
                on  targetSubjectBlock.subjectBlockCode = subjectBlock.subjectBlockCode
                and targetSubjectBlock.currentAcademicYearId = #{targetAcademicYearId}
        WHERE subjectBlock.currentAcademicYearId = #{sourceAcademicYearId}
        <if test='subjectIds != null and subjectIds.size() > 0'>
            and subjectSubjectBlock.subjectId IN
             <foreach collection="subjectIds" item="item" separator="," close=")" open="(">
                #{item}
            </foreach>
        </if>
    </select>

    <select id="findSubjectSubjectBlocksForSubjectBlockTransition" parameterType="map" resultMap="SubjectSubjectBlockResultMap">
        select  *
        from opuscollege.subjectSubjectBlock
        inner join opuscollege.subject on subjectSubjectBlock.subjectId = subject.id
            inner join opuscollege.subject targetSubject
                on  targetSubject.subjectCode = subject.subjectCode
                and targetSubject.subjectDescription = subject.subjectDescription
                and targetSubject.currentAcademicYearId = #{targetAcademicYearId}
                and targetSubject.resultType = #{targetResultType}
        WHERE subject.currentAcademicYearId = #{sourceAcademicYearId}
        <if test='subjectBlockIds != null and subjectBlockIds.size() > 0'>
            and subjectSubjectBlock.subjectBlockId IN
             <foreach collection="subjectBlockIds" item="item" separator="," close=")" open="(">
                #{item}
            </foreach>
        </if>
    </select>

    <select id="findSubjectSubjectBlocksForSubject" parameterType="int" resultMap="SubjectSubjectBlockResultMap">
    	select *
    	from   opuscollege.subjectSubjectBlock
    	where  subjectId = #{value}
    </select>

   	<select id="findSubjectSubjectBlock" parameterType="int" resultType="SubjectSubjectBlock">
		<include refid="selectSubjectSubjectBlock_fragment"/>
		from   opusCollege.subjectSubjectBlock
		inner  join opusCollege.subject on subject.id = subjectSubjectBlock.subjectId
		where  subjectSubjectBlock.id = #{value}
   	</select>
   	
   	<insert id="addSubjectSubjectBlock" parameterType="SubjectSubjectBlock">
        insert into opuscollege.subjectSubjectBlock
        ( subjectId
        , subjectBlockId
        , active
        ) values
        ( #{subject.id}
        , #{subjectBlockId}
        , #{active}
        )
    </insert> 
    <update id="updateSubjectSubjectBlock" parameterType="SubjectSubjectBlock">
        update  opuscollege.subjectSubjectBlock
        set     subjectBlockId		= #{subjectBlockId}
        ,       subjectId           = #{subject.id}
        ,       active            	= #{active}
        where   id = #{id}
    </update>
    <delete id="deleteSubjectSubjectBlock" parameterType="int">
        delete from opuscollege.subjectSubjectBlock
        where  id = #{value}
    </delete>
    
    <select id="findSubjectBlocksByStudyGradeType" parameterType="StudyGradeType" resultType="int">
        select subjectBlock.id
        from   opuscollege.subjectBlock
        inner  join opuscollege.subjectBlockStudyGradeType on subjectBlockStudyGradeType.subjectBlockId = subjectBlock.id
        inner  join opuscollege.studyGradeType on studyGradeType.id = subjectBlockStudyGradeType.studyGradeTypeId
        where  studyGradeType.studyId = #{studyId}
        and    studyGradeType.gradeTypeCode = #{gradeTypeCode}
    </select> 

    <select id="findSubjectsByStudyGradeType" parameterType="StudyGradeType" resultType="int">
        select subject.id
        from   opuscollege.subject
        inner  join opuscollege.subjectStudyGradeType on subjectStudyGradeType.subjectId = subject.id
        inner  join opuscollege.studyGradeType on studyGradeType.id = subjectStudyGradeType.studyGradeTypeId
        where  studyGradeType.studyId = #{studyId}
        and    studyGradeType.gradeTypeCode = #{gradeTypeCode}
    </select> 

    <delete id="deleteSubjectPrerequisites" parameterType="int">
        delete  from opuscollege.subjectPrerequisite
        where   subjectStudyGradeTypeId = #{subjectStudyGradeTypeId}
    </delete>

    <!-- load as little as possible for curriculum transition -->
    <select id="findSubjectsForTransition" parameterType="map" resultType="SubjectCT">
        select
        subject.id as originalId
        , exists (
            select subject2.id from opuscollege.subject subject2 
            where subject2.subjectCode = subject.subjectCode
            and subject2.subjectDescription = subject.subjectDescription
            and subject2.currentAcademicYearId = #{toAcademicYearId}
            ) AS targetExists
        from  opuscollege.subject
        INNER JOIN opuscollege.study on subject.primaryStudyId = study.id
        INNER JOIN opuscollege.organizationalunit on study.organizationalUnitId = organizationalunit.id
        INNER JOIN opuscollege.branch on branch.id = organizationalunit.branchId
        INNER JOIN opuscollege.institution on institution.id = branch.institutionId
        WHERE subject.currentAcademicYearid = #{fromAcademicYearId}
        <if test='institutionId != null and institutionId != "0"'>
            and institution.id = #{institutionId}
        </if>
        <if test='branchId != null and branchId != "0"'>
            and branch.id = #{branchId}
        </if>
        <if test='organizationalUnitId != null and organizationalUnitId != "0"'>
            and organizationalunit.id in (select id from opuscollege.crawl_tree(#{organizationalUnitId}, 0)) 
        </if>
        <if test='studyId != null and studyId != "0"'>
            and study.id = #{studyId} 
        </if>
        <if test='searchValue != null and searchValue != ""'>
            and opuscollege.remove_diacritics(lower(study.studyDescription)) like opuscollege.remove_diacritics(lower('%' || #{searchValue} || '%'))
        </if>
        order by subject.primaryStudyId
    </select>

    <insert id="transferSubject" parameterType="map">
        insert into opuscollege.subject
        ( subjectCode
        , subjectDescription 
        , subjectContentDescription 
        , primaryStudyId
        , freeChoiceOption
        , frequencyCode
        , studyTimeCode
        , targetGroupCode
        , maximumParticipants
        , creditAmount
        , hoursToInvest
        , examTypeCode
        , brsPassingSubject
        , currentAcademicYearId
        , resultType
        , registrationDate 
        , active
        ) select subjectCode
        , subjectDescription
        , subjectContentDescription
        , primaryStudyId
        , freeChoiceOption
        , frequencyCode
        , studyTimeCode
        , targetGroupCode
        , maximumParticipants
        , creditAmount
        , hoursToInvest
        , examTypeCode
        , brsPassingSubject
        , #{toAcademicYearId}
        , resultType
        , registrationDate 
        , active
        from opuscollege.subject
        where id = #{subjectCT.originalId}
        <selectKey keyProperty="subjectCT.newId" resultType="int">
            SELECT currVal('opuscollege.subjectseq')
        </selectKey>
    </insert> 

    <insert id="transferSubjectTeachers" parameterType="map">
        insert into opuscollege.subjectteacher
            ( staffmemberid
            , subjectid
            , classgroupid
            , active
            ) select
              sourcesubjectteacher.staffmemberid
            , targetSubject.id
            , targetClassgroup.id
            , sourcesubjectteacher.active
            from opuscollege.subjectteacher sourceSubjectTeacher
            inner join opuscollege.subject sourceSubject
                on  sourceSubjectTeacher.subjectid = sourceSubject.id
                and sourceSubject.currentAcademicYearId = #{sourceAcademicYearId}
            inner join opuscollege.subject targetSubject
                on  targetSubject.subjectCode = sourceSubject.subjectCode
                and targetSubject.subjectDescription = sourceSubject.subjectDescription
                and targetSubject.currentAcademicYearId = #{targetAcademicYearId}

            left outer join opuscollege.classgroup sourceClassgroup
                on  sourceSubjectTeacher.classgroupid = sourceClassgroup.id
            left outer join opuscollege.studygradetype sourceStudygradetype
                on sourceClassgroup.studygradetypeid = sourceStudygradetype.id
            left outer join opuscollege.studygradetype targetStudygradetype
                on  targetstudygradetype.studyId = sourcestudygradetype.studyId
                and targetstudygradetype.gradeTypeCode = sourcestudygradetype.gradeTypeCode
                and targetstudygradetype.studyTimeCode = sourcestudygradetype.studyTimeCode
                and targetstudygradetype.studyFormCode = sourcestudygradetype.studyFormCode
                and targetstudygradetype.currentAcademicYearId = #{targetAcademicYearId}
            left outer join opuscollege.classgroup targetClassgroup
                on  targetClassgroup.description = sourceClassgroup.description
                and targetClassgroup.studygradetypeid = targetStudygradetype.id

            where not exists
            ( select * from opuscollege.subjectteacher targetSubjectTeacher
              where targetSubjectTeacher.subjectId = targetsubject.id
              and targetSubjectTeacher.staffmemberid = sourceSubjectTeacher.staffmemberid
            )
            order by sourceSubjectTeacher.id
    </insert>
    
    <insert id="transferSubjectStudyTypes" parameterType="map">
        insert into opuscollege.subjectstudytype
            ( studytypecode
            , subjectid
            , active
            ) select studytypecode
            , targetSubject.id
            , sourcesubjectstudytype.active
            from opuscollege.subjectstudytype sourcesubjectstudytype
            inner join opuscollege.subject sourceSubject
                on  sourcesubjectstudytype.subjectid = sourceSubject.id
                and sourceSubject.currentAcademicYearId = #{sourceAcademicYearId}
            inner join opuscollege.subject targetSubject
                on  targetSubject.subjectCode = sourceSubject.subjectCode
                and targetSubject.subjectDescription = sourceSubject.subjectDescription
                and targetSubject.currentAcademicYearId = #{targetAcademicYearId}
    
            where not exists
            ( select * from opuscollege.subjectstudytype targetsubjectstudytype
              where targetsubjectstudytype.subjectId = targetsubject.id
              and targetsubjectstudytype.studytypecode = sourcesubjectstudytype.studytypecode
            )
            order by sourcesubjectstudytype.id
    </insert>

    <!--
      transferSubjectStudyGradeTypes:
      Parameters: 
        - source academic year
        - target academic year
      Transfer all eligible subjectStudyGradeType records from the given source academic year
      to the given target academic year. I.e. the script transfers those subjectStudyGradeType 
      records whose subject and studyGradeType records have already been transferred.
      Run this script after transferring subjects and/or studyGradeTypes.
      
      The script can safely be run multiple times without wreaking havoc, because only those 
      subjectStudyGradeTypes will be transferred that have not yet been transferred
     -->
    <insert id="transferSubjectStudyGradeTypes" parameterType="map">
        insert into opuscollege.subjectstudygradetype
            ( subjectId
            , studyGradeTypeId 
            , cardinalTimeUnitNumber
            , rigidityTypeCode
            , importanceTypeCode
            , active
            ) select targetSubject.id
            , targetSGT.id
            , subjectstudygradetype.cardinalTimeUnitNumber
            , subjectstudygradetype.rigidityTypeCode
            , subjectstudygradetype.importanceTypeCode
            , subjectstudygradetype.active
            from opuscollege.subjectstudygradetype
            inner join opuscollege.studygradetype sourceSGT
                on  subjectstudygradetype.studygradetypeid = sourceSGT.id
                and sourceSGT.currentAcademicYearId = #{sourceAcademicYearId}
            inner join opuscollege.studygradetype targetSGT
                on  targetSGT.studyId = sourceSGT.studyId
                and targetSGT.gradeTypeCode = sourceSGT.gradeTypeCode
                and targetSGT.studyTimeCode = sourceSGT.studyTimeCode
                and targetSGT.studyFormCode = sourceSGT.studyFormCode
                and targetSGT.currentAcademicYearId = #{targetAcademicYearId}
            inner join opuscollege.subject sourceSubject
                on  subjectstudygradetype.subjectid = sourceSubject.id
                and sourceSubject.currentAcademicYearId = #{sourceAcademicYearId}
            inner join opuscollege.subject targetSubject
                on  targetSubject.subjectCode = sourceSubject.subjectCode
                and targetSubject.subjectDescription = sourceSubject.subjectDescription
                and targetSubject.currentAcademicYearId = #{targetAcademicYearId}

            where not exists
            ( select * from opuscollege.subjectstudygradetype targetsubjectstudygradetype
              where targetsubjectstudygradetype.subjectId = targetsubject.id
              and targetsubjectstudygradetype.studygradetypeid = targetSGT.id
            )
            order by subjectstudygradetype.id
    </insert>

    <!-- TODO order by sourceSubjectprerequisite.id once the table has an id column
         (id is better than writewhen because writewhen could be identical for previously transferred records.
    -->
    <insert id="transferSubjectPrerequisites" parameterType="map">
        insert into opuscollege.subjectprerequisite
            ( requiredSubjectCode
            , subjectStudyGradeTypeId 
            , active
            ) select
              targetsubject.subjectCode
            , targetsubjectstudygradetype.id
            , sourcesubjectprerequisite.active
            from opuscollege.subjectprerequisite sourceSubjectprerequisite
            inner join opuscollege.subject sourcesubject
                on  sourcesubjectprerequisite.requiredSubjectCode = sourcesubject.subjectCode
                and sourcesubject.currentAcademicYearId = #{sourceAcademicYearId}
            inner join opuscollege.subject targetsubject
                on  targetsubject.subjectCode = sourcesubject.subjectCode
                and targetsubject.subjectDescription = sourcesubject.subjectDescription
                and targetsubject.currentAcademicYearId = #{targetAcademicYearId}
            inner join opuscollege.subjectstudygradetype sourcesubjectstudygradetype
                on  sourcesubjectprerequisite.subjectstudygradetypeid = sourcesubjectstudygradetype.id
            inner join opuscollege.studygradetype sourcestudygradetype
                on  sourcesubjectstudygradetype.studygradetypeid = sourcestudygradetype.id
                and sourcestudygradetype.currentAcademicYearId = #{sourceAcademicYearId}
            inner join opuscollege.subject sourceinnersubject
                on  sourcesubjectstudygradetype.subjectid = sourceinnersubject.id
                and sourceinnersubject.currentAcademicYearId = #{sourceAcademicYearId}

            inner join opuscollege.studygradetype targetstudygradetype
                on  targetstudygradetype.studyId = sourcestudygradetype.studyId
                and targetstudygradetype.gradeTypeCode = sourcestudygradetype.gradeTypeCode
                and targetstudygradetype.studyTimeCode = sourcestudygradetype.studyTimeCode
                and targetstudygradetype.studyFormCode = sourcestudygradetype.studyFormCode
                and targetstudygradetype.currentAcademicYearId = #{targetAcademicYearId}
            inner join opuscollege.subject targetinnersubject
                on  targetinnersubject.subjectcode = sourceinnersubject.subjectcode
                and targetinnersubject.subjectDescription = sourceinnersubject.subjectDescription
                and targetinnersubject.currentAcademicYearId = #{targetAcademicYearId}
            inner join opuscollege.subjectstudygradetype targetsubjectstudygradetype
                on  targetsubjectstudygradetype.studygradetypeid = targetstudygradetype.id
                and targetsubjectstudygradetype.subjectid = targetinnersubject.id

            where not exists
            ( select * from opuscollege.subjectprerequisite targetsubjectprerequisite
              where targetsubjectprerequisite.subjectstudygradetypeid = targetsubjectstudygradetype.id
              and targetsubjectprerequisite.requiredSubjectCode = targetsubject.subjectCode
            )
            order by sourceSubjectprerequisite.writewhen
    </insert>

    <!-- find all subjects for one studyGradeType -->
    <select id="findSubjectsForStudyGradeType" parameterType="int" resultMap="SubjectStudyGradeTypeResultMap"> 
        <include refid="selectSubjectStudyGradeType_fragment"/>
        where   subjectStudyGradeType.studyGradeTypeId  = #{value}
        order by cardinalTimeUnitNumber, subject.subjectDescription
    </select>

    <!-- NB, for the id field using subjectsubjectblock.id is misleading because SubjectStudyGradeType.id is expected according to result map -->
    <select id="findBlockedSubjectStudyGradeTypeByParams" parameterType="map" resultMap="BlockedSubjectStudyGradeTypeResultMap">
        select  0                                           as id
        ,       cardinalTimeUnitNumber                      as cardinalTimeUnitNumber
        ,       rigidityTypeCode                            as rigidityTypeCode
        ,       importanceTypeCode                          as importanceTypeCode
        ,       'Y'                                         as active
        ,       subject.id                                  as "subject.id"
        ,       subject.subjectCode                         as "subject.subjectCode"
        ,       subject.subjectDescription                  as "subject.subjectDescription"
        ,       subject.primaryStudyId                      as "subject.primaryStudyId"
        ,       subject.currentAcademicYearId               as "subject.currentAcademicYearId"
        ,       subject.resultType                          as "subject.resultType"
        ,       study.id                                    as "studyGradeType.studyId"
        ,       study.studyDescription                      as "studyGradeType.studyDescription"
        ,       gradeType.code                              as "studyGradeType.gradeTypeCode"
        ,       gradeType.description                       as "studyGradeType.gradeTypeDescription"
        ,       studyGradeType.id                           as "studyGradeType.id"
        ,       studyGradeType.numberOfCardinalTimeUnits    as "studyGradeType.numberOfCardinalTimeUnits"
        ,       studyGradeType.maxNumberOfCardinalTimeUnits as "studyGradeType.maxNumberOfCardinalTimeUnits"
        ,       studyGradeType.currentAcademicYearId        as "studyGradeType.currentAcademicYearId"
        ,       studyGradeType.cardinalTimeUnitCode         as "studyGradeType.cardinalTimeUnitCode"
        ,       studyGradeType.studyFormCode                as "studyGradeType.studyFormCode"
        ,       studyGradeType.studyTimeCode                as "studyGradeType.studyTimeCode"
        from    opusCollege.subjectSubjectBlock
        inner   join opusCollege.subject on subject.id = subjectSubjectBlock.subjectId
        inner   join opusCollege.subjectBlockStudyGradeType on subjectSubjectBlock.subjectBlockId = subjectBlockStudyGradeType.subjectBlockId
        inner   join opusCollege.studyGradeType on studyGradeType.id = subjectBlockStudyGradeType.studyGradeTypeId
        inner   join opusCollege.study on study.id = studyGradeType.studyId
        inner   join opusCollege.gradeType on gradeType.code = studyGradeType.gradeTypeCode
        inner   join opusCollege.organizationalunit on opuscollege.study.organizationalUnitId = organizationalunit.id
        inner   join opusCollege.branch on opuscollege.branch.id = organizationalunit.branchId
        inner   join opusCollege.institution on opuscollege.institution.id = branch.institutionId
        WHERE 1=1
        <if test='institutionTypeCode != null and institutionTypeCode != ""'>
            AND institution.institutionTypeCode = #{institutionTypeCode}
        </if>
        <if test='institutionId != null and institutionId != "0"'>
            and institution.id = #{institutionId}
        </if>
        <if test='branchId != null and branchId != "0"'>
            and branch.id = #{branchId}
        </if>
        <if test='organizationalUnitId != null and organizationalUnitId != "0"'>
            and organizationalunit.id in (select id from opuscollege.crawl_tree(#{organizationalUnitId}, 0)) 
        </if>
        <if test='studyId != null and studyId != "0"'>
            and (study.id = #{studyId}
            <if test="importanceTypeMajor != null">
                and subjectBlockStudyGradeType.importanceTypeCode = #{importanceTypeMajor}
            </if>
            <if test='minor1Id != null and minor1Id != "0"'>
                OR (opuscollege.study.id =  #{minor1Id}
                    and subjectBlockStudyGradeType.importanceTypeCode = #{importanceTypeMinor})
            </if>
            )
        </if>
        <if test='studyGradeTypeId != null and studyGradeTypeId != "0"'>
            AND (studyGradeTypeId = #{studyGradeTypeId}
            <if test='minorStudyGradeTypeId != null and minorStudyGradeTypeId != "0"'>
                  or studyGradeType.id = #{minorStudyGradeTypeId}
            </if>
            )
        </if>
        <if test='currentAcademicYearId != null and currentAcademicYearId != "0"'>
            and studyGradeType.currentAcademicYearId = #{currentAcademicYearId}
        </if>
        <if test='subjectCode != null and subjectCode != ""'>
            AND subject.subjectCode = #{subjectCode}
        </if>
        <if test='cardinalTimeUnitNumber != null and cardinalTimeUnitNumber != "0"'>
            AND (cardinalTimeUnitNumber= #{cardinalTimeUnitNumber} OR cardinalTimeUnitNumber = 0)
        </if>
        <if test='rigidityTypeCode != null and rigidityTypeCode != ""'>
            AND rigidityTypeCode= #{rigidityTypeCode}
        </if>
        <if test='importanceTypeCode != null and importanceTypeCode != ""'>
            AND importanceTypeCode= #{importanceTypeCode}
        </if>
        <if test='subjectBlockStudyGradeTypeIds != null and subjectBlockStudyGradeTypeIds.size() > 0'>
            and subjectBlockStudyGradeType.id IN
             <foreach collection="subjectBlockStudyGradeTypeIds" item="item" separator="," close=")" open="(">
                #{item}
            </foreach>
        </if>
    </select>

    <select id="findSubjectsInSubjectBlock" parameterType="int" resultType="Subject">
        select  subject.*
        from    opusCollege.subject
        inner   join opusCollege.subjectsubjectBlock on subjectsubjectBlock.subjectId = subject.id
        inner   join opusCollege.subjectBlock on subjectBlock.id = subjectsubjectBlock.subjectBlockId
        where   subjectBlock.id = #{subjectBlockId}
    </select>

    <select id="findPassedSubjects" parameterType="map" resultMap="SubjectResultMap">
        SELECT subject.*
        FROM   opuscollege.subject
        WHERE  exists (
            SELECT 1 FROM opuscollege.subjectResult
            INNER JOIN opuscollege.subject equivalentSubject ON equivalentSubject.subjectCode = subject.subjectCode AND subjectResult.subjectId = equivalentSubject.id
            INNER JOIN opuscollege.studyPlanDetail ON subjectResult.studyPlanDetailId = studyPlanDetail.id
            WHERE subjectResult.passed = 'Y'
            AND studyPlanDetail.studyPlanId = #{studyPlanId}
            <if test="cardinalTimeUnitIdLessThan != null">
                AND studyPlanDetail.studyPlanCardinalTimeUnitId &lt; #{cardinalTimeUnitIdLessThan}
            </if>
        )
        <if test="subjectIds != null">
            AND subject.id in
             <foreach collection="subjectIds" item="item" separator="," close=")" open="(">
              #{item}
            </foreach>
        </if>
    </select>

</mapper>
