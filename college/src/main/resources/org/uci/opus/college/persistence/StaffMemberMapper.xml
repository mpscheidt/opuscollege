<?xml version="1.0" encoding="UTF-8"?>
<!--
  ***** BEGIN LICENSE BLOCK *****
  Version: MPL 1.1/GPL 2.0/LGPL 2.1
  
  The contents of this file are subject to the Mozilla Public License Version
  1.1 (the "License"); you may not use this file except in compliance with
  the License. You may obtain a copy of the License at
  http://www.mozilla.org/MPL/
  
  Software distributed under the License is distributed on an "AS IS" basis,
  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
  for the specific language governing rights and limitations under the
  License.
  
  The Original Code is Opus-College college module code.
  
  The Initial Developer of the Original Code is
  Center for Information Services, Radboud University Nijmegen.
  Portions created by the Initial Developer are Copyright (C) 2008
  the Initial Developer. All Rights Reserved.
  
  Contributor(s):
    For Java files, see Javadoc @author tags.
  
  Alternatively, the contents of this file may be used under the terms of
  either the GNU General Public License Version 2 or later (the "GPL"), or
  the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
  in which case the provisions of the GPL or the LGPL are applicable instead
  of those above. If you wish to allow use of your version of this file only
  under the terms of either the GPL or the LGPL, and not to allow others to
  use your version of this file under the terms of the MPL, indicate your
  decision by deleting the provisions above and replace them with the notice
  and other provisions required by the GPL or the LGPL. If you do not delete
  the provisions above, a recipient may use your version of this file under
  the terms of any one of the MPL, the GPL or the LGPL.
  
  ***** END LICENSE BLOCK *****
-->
<!--Converted at: Mon Dec 08 20:25:35 CAT 2014-->
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="org.uci.opus.college.persistence.StaffMemberMapper">

    <!-- resultmap to define complete Contract -->
    <resultMap id="ContractResultMap" type="Contract">
        <id property="id" column="contract_id"/>
        <result property="contractCode" column="contract_contractCode"/>
        <result property="staffMemberId" column="contract_staffMemberId"/>
        <result property="contractTypeCode" column="contract_contractTypeCode"/>
        <result property="contractDurationCode" column="contract_contractDurationCode"/>
        <result property="contractStartDate" column="contract_contractStartDate" javaType="java.util.Date"/>
        <result property="contractEndDate" column="contract_contractEndDate" javaType="java.util.Date"/>
        <result property="contactHours" column="contract_contactHours"/>
        <result property="fteAppointmentOverall" column="contract_fteAppointmentOverall"/>
        <result property="fteResearch" column="contract_fteResearch"/>
        <result property="fteEducation" column="contract_fteEducation"/>
        <result property="fteAdministrativeTasks" column="contract_fteAdministrativeTasks"/>
    </resultMap>


    <!-- resultmap to define complete StaffMemberFunction -->
    <resultMap id="StaffMemberFunctionResultMap" type="StaffMemberFunction">
        <id property="staffMemberId" column="staffMemberFunction_staffMemberId"/>
        <id property="functionCode" column="staffMemberFunction_functionCode"/>
        <result property="functionLevelCode" column="staffMemberFunction_functionLevelCode"/>
        <result property="active" column="staffMemberFunction_active"/>
    </resultMap>

    <!-- resultmap to define complete staffmember (including functions, contracts and addresses) -->
    <resultMap id="StaffMemberResultMap" type="StaffMember">
        <id property="id" column="id"/>
        <result property="personId" column="personId"/>
        <result property="personCode" column="personCode"/>
        <result property="staffMemberId" column="staffMemberId"/>
        <result property="staffMemberCode" column="staffMemberCode"/>
        <result property="registrationDate" column="registrationDate" javaType="java.util.Date"/>
        <result property="surnameFull" column="surnameFull"/>
        <result property="surnameAlias" column="surnameAlias"/>
        <result property="firstnamesFull" column="firstnamesFull"/>
        <result property="firstnamesAlias" column="firstnamesAlias"/>
        <result property="nationalRegistrationNumber" column="nationalRegistrationNumber"/>
        <result property="civilTitleCode" column="civilTitleCode"/>
        <result property="gradeTypeCode" column="gradeTypeCode"/> 
        <result property="genderCode" column="genderCode"/>
        <result property="birthdate" column="birthdate" javaType="java.util.Date"/>
        <result property="nationalityCode" column="nationalityCode"/>
        <result property="placeOfBirth" column="placeOfBirth"/>
        <result property="districtOfBirthCode" column="districtOfBirthCode"/>
        <result property="provinceOfBirthCode" column="provinceOfBirthCode"/>
        <result property="countryOfBirthCode" column="countryOfBirthCode"/>
        <result property="cityOfOrigin" column="cityOfOrigin"/>
        <result property="administrativePostOfOriginCode" column="administrativePostOfOriginCode"/>
        <result property="districtOfOriginCode" column="districtOfOriginCode"/>
        <result property="provinceOfOriginCode" column="provinceOfOriginCode"/>
        <result property="countryOfOriginCode" column="countryOfOriginCode"/>
        <result property="civilStatusCode" column="civilStatusCode"/>
        <result property="housingOnCampus" column="housingOnCampus"/>
        <result property="identificationTypeCode" column="identificationTypeCode"/>
        <result property="identificationNumber" column="identificationNumber"/>
        <result property="identificationPlaceOfIssue" column="identificationPlaceOfIssue"/>
        <result property="identificationDateOfIssue" column="identificationDateOfIssue" javaType="java.util.Date"/>
        <result property="identificationDateOfExpiration" column="identificationDateOfExpiration" javaType="java.util.Date"/>
        <result property="professionCode" column="professionCode"/>
        <result property="professionDescription" column="professionDescription"/>
        <result property="languageFirstCode" column="languageFirstCode"/>
        <result property="languageFirstMasteringLevelCode" column="languageFirstMasteringLevelCode"/>
        <result property="languageSecondCode" column="languageSecondCode"/>
        <result property="languageSecondMasteringLevelCode" column="languageSecondMasteringLevelCode"/>
        <result property="languageThirdCode" column="languageThirdCode"/>
        <result property="languageThirdMasteringLevelCode" column="languageThirdMasteringLevelCode"/>
        <result property="contactPersonEmergenciesName" column="contactPersonEmergenciesName"/>
        <result property="contactPersonEmergenciesTelephoneNumber" column="contactPersonEmergenciesTelephoneNumber"/>
        <result property="bloodTypeCode" column="bloodTypeCode"/>
        <result property="healthIssues" column="healthIssues"/> 
        <result property="publicHomepage" column="publicHomepage"/>
        <result property="socialNetworks" column="socialNetworks"/>
        <result property="hobbies" column="hobbies"/>
        <result property="active" column="active"/>
        <result property="photograph" column="photograph"/>
        <result property="photographName" column="photographName"/>
        <result property="photographMimeType" column="photographMimeType"/>
        <result property="remarks" column="remarks"/>
        <result property="dateOfAppointment" column="dateOfAppointment" javaType="java.util.Date"/>
        <result property="appointmentTypeCode" column="appointmentTypeCode"/>
        <result property="staffTypeCode" column="staffTypeCode"/>
        <result property="primaryUnitOfAppointmentId" column="primaryUnitOfAppointmentId"/>
        <result property="educationTypeCode" column="educationTypeCode"/>
        <result property="startWorkDay" column="startWorkDay"/>
        <result property="endWorkDay" column="endWorkDay"/>
        <result property="teachingDayPartCode" column="teachingDayPartCode"/>
        <result property="supervisingDayPartCode" column="supervisingDayPartCode"/>
        <collection property="functions" fetchType="lazy" select="findFunctionsForStaffMember" column="staffMemberId"/>
        <collection property="contracts" fetchType="lazy" select="findContractsForStaffMember" column="staffMemberId"/>
        <collection property="addresses" fetchType="lazy" select="findAddressesForStaffMember" column="personId"/>
        <collection property="subjectsTaught" fetchType="lazy" select="findSubjectsForStaffMember" column="staffMemberId"/>
        <collection property="examinationsTaught" fetchType="lazy" select="findExaminationsForStaffMember" column="staffMemberId"/>
        <collection property="testsSupervised" fetchType="lazy" select="findTestsForStaffMember" column="staffMemberId"/>
    </resultMap>

    <!-- find all StaffMembers -->
    <!-- need to pass preferredLanguage parameter -->
    <select id="findAllStaffMembers" parameterType="map" resultType="StaffMember"> 
        select  opuscollege.person.*,
                opuscollege.staffMember.*
        from opuscollege.staffMember
        INNER JOIN opuscollege.person ON opuscollege.staffMember.personId = opuscollege.person.id
        order by lower(person.surnameFull), lower(person.firstnamesFull)
    </select>

    <select id="findStaffMembers" parameterType="map" resultMap="StaffMemberResultMap"> 
        select  person.*
        ,       staffMember.* 
        from opuscollege.staffMember
        INNER JOIN opuscollege.person ON staffMember.personId = person.id
        INNER JOIN opuscollege.organizationalunit on staffMember.primaryUnitOfAppointmentId = organizationalunit.id
        inner join opuscollege.branch on organizationalunit.branchid = branch.id
        where true
        <if test='institutionId != null and institutionId != "" and institutionId != "0"'>
            and branch.institutionId = #{institutionId}
        </if>
        <if test='branchId != null and branchId != "" and branchId != "0"'>
            and organizationalunit.branchId = #{branchId}
        </if>
        <if test='organizationalUnitId != null and organizationalUnitId != "" and organizationalUnitId != "0"'>
            and organizationalunit.id in (select id from opuscollege.crawl_tree(#{organizationalUnitId}, 0))
        </if>
        <if test='searchValue != null and searchValue != ""'>
            and (
            opuscollege.remove_diacritics(lower(person.firstnamesfull)) || ' ' ||
            opuscollege.remove_diacritics(lower(person.surnamefull))
            like opuscollege.remove_diacritics(lower('%' || #{searchValue} || '%'))
            )
        </if>
        <if test='staffMemberIds != null and staffMemberIds.size() > 0'>
            and staffMemberId IN
            <foreach item="item" collection="staffMemberIds" open="(" separator="," close=")" >
                #{item}
            </foreach>
        </if>
        <if test='nonStaffMemberIds != null and nonStaffMemberIds.size() > 0'>
            and staffMemberId NOT IN
            <foreach item="item" collection="nonStaffMemberIds" open="(" separator="," close=")" >
                #{item}
            </foreach>
        </if>
        <!-- highestLevel: exclude staff members with at least one role that is higher than highestLevel.
                 reason is that a user with a lower level could set the password for a user with a higher level and gain improper privileges -->
        <if test="highestLevel">
			and personid not in (
				select personid from opuscollege.opususer
				inner join opuscollege.opususerrole on opususerrole.username = opususer.username
				inner join opuscollege.role on opususerrole.role = role.role
				and level &lt; #{highestLevel}
			)
        </if>
        order by lower(person.surnameFull), lower(person.firstnamesFull)
    </select>

    <!-- find one StaffMember by staffMemberId (and preferredLanguage) -->
    <select id="findStaffMember" parameterType="map" resultMap="StaffMemberResultMap">
        select  opuscollege.staffMember.*,
                opuscollege.person.*
        from opuscollege.staffMember
        INNER JOIN opuscollege.person ON opuscollege.staffMember.personId = opuscollege.person.id
        WHERE opuscollege.staffMember.staffMemberId = #{staffMemberId}
    </select>

    <!-- find one StaffMember with a personId -->
    <select id="findStaffMemberByPersonId" parameterType="map" resultMap="StaffMemberResultMap">
        select  opuscollege.staffMember.*,
                opuscollege.person.*
        from opuscollege.staffMember
        INNER JOIN opuscollege.person ON opuscollege.staffMember.personId = opuscollege.person.id
        WHERE opuscollege.staffMember.personId = #{personId}
    </select>

    <!-- find the corresponding staffMemberId for the given personId -->
    <select id="findStaffMemberIdByPersonId" parameterType="int" resultType="Integer">
        select  opuscollege.staffMember.staffMemberId
        from opuscollege.staffMember
        WHERE staffMember.personId = #{personId}
    </select>

    <!-- find one StaffMember by code-->
    <select id="findStaffMemberByCode" parameterType="map" resultMap="StaffMemberResultMap">
        select  opuscollege.staffMember.*,
                opuscollege.person.*
        from opuscollege.staffMember
        INNER JOIN opuscollege.person ON opuscollege.staffMember.personId = opuscollege.person.id
        WHERE opuscollege.staffMember.staffMemberCode = #{staffMemberCode}
    </select>

    <select id="alreadyExistsStaffMemberCode" parameterType="map" resultType="boolean">
        SELECT EXISTS (
            SELECT 1 FROM opuscollege.staffmember
            WHERE staffMemberCode = #{staffMemberCode} AND staffMemberId != #{staffMemberId}
        )
    </select>


<!-- MP 2015-01-03: Apparently not used anymore -->
    <!-- find one StaffMember by several parameters -->
<!--     <select id="findStaffMemberByParams" parameterType="map" resultMap="StaffMemberResultMap"> -->
<!--         SELECT  opuscollege.staffMember.*, -->
<!--                 opuscollege.person.* -->
<!--         FROM opuscollege.staffMember -->
<!--         INNER JOIN opuscollege.person ON opuscollege.staffMember.personId = opuscollege.person.id -->
<!--         WHERE   true -->
<!--         <if test='staffMemberCode != null and staffMemberCode != ""'> -->
<!--             AND staffMemberCode = #{staffMemberCode} -->
<!--         </if> -->
<!--         AND     surnameFull = #{surnameFull} -->
<!--         AND     firstNamesFull = #{firstNamesFull} -->
<!--         AND     birthdate = #{birthdate}  -->
<!--     </select> -->

    <!-- count the number of StaffMembers with the given parameters -->
    <select id="countStaffMembers" parameterType="map" resultType="int">
        SELECT  count(*)
        FROM opuscollege.staffMember
        INNER JOIN opuscollege.person ON opuscollege.staffMember.personId = opuscollege.person.id
        where true
        <if test='staffMemberCode != null and staffMemberCode != ""'>
            and staffMemberCode = #{staffMemberCode}
        </if>
        <if test='surnameFull != null and surnameFull != ""'>
            and surnameFull = #{surnameFull}
        </if>
        <if test='firstNamesFull != null and firstNamesFull != ""'>
            and firstNamesFull = #{firstNamesFull}
        </if>
        <if test='birthdate != null'>
            and birthdate = #{birthdate}
        </if>
    </select>

    <!-- find one StaffMember with a personId -->
    <select id="findStaffMemberByStaffMemberId" parameterType="int" resultMap="StaffMemberResultMap">
        select  opuscollege.staffMember.*,
                opuscollege.person.*
        from opuscollege.staffMember
        INNER JOIN opuscollege.person ON opuscollege.staffMember.personId = opuscollege.person.id
        WHERE opuscollege.staffMember.staffMemberId = #{value}
    </select>

    <!-- find OrganizationalUnit for one StaffMember -->
    <select id="findOrganizationalUnitForStaffMember" parameterType="int" resultType="OrganizationalUnit"> 
        select opuscollege.organizationalUnit.*
        from   opuscollege.organizationalUnit
        INNER JOIN opuscollege.staffmember ON opuscollege.staffmember.primaryUnitOfAppointmentId = opuscollege.organizationalUnit.id
        where  opuscollege.staffMember.personId = #{value}
    </select> 

    <!-- find all contracts for one StaffMember -->
     <select id="findContractsForStaffMember" parameterType="int" resultMap="ContractResultMap">
        SELECT  opuscollege.contract.id AS contract_id,
                opuscollege.contract.contractCode AS contract_contractCode,
                opuscollege.contract.staffMemberId AS contract_staffMemberId,
                opuscollege.contract.contractTypeCode AS contract_contractTypeCode,
                opuscollege.contract.contractDurationCode AS contract_contractDurationCode,
                opuscollege.contract.contractStartDate AS contract_contractStartDate,
                opuscollege.contract.contractEndDate AS contract_contractEndDate,
                opuscollege.contract.contactHours AS contract_contactHours,
                opuscollege.contract.fteAppointmentOverall AS contract_fteAppointmentOverall,
                opuscollege.contract.fteResearch AS contract_fteResearch,
                opuscollege.contract.fteEducation AS contract_fteEducation,
                opuscollege.contract.fteAdministrativeTasks AS contract_fteAdministrativeTasks
        from opuscollege.contract
        WHERE opuscollege.contract.staffMemberId = #{value}
    </select>

    <!-- find all functions for one StaffMember -->
     <select id="findFunctionsForStaffMember" parameterType="int" resultMap="StaffMemberFunctionResultMap">
        select opuscollege.staffMemberFunction.staffMemberId AS staffMemberFunction_staffMemberId,
                opuscollege.staffMemberFunction.functionCode AS staffMemberFunction_functionCode,
                opuscollege.staffMemberFunction.functionLevelCode AS staffMemberFunction_functionLevelCode,
                opuscollege.staffMemberFunction.active AS staffMemberFunction_active
        from opuscollege.staffMemberFunction
        WHERE opuscollege.staffMemberFunction.staffMemberId = #{value}
    </select>

    <!-- find all addresses for one StaffMember -->
    <select id="findAddressesForStaffMember" parameterType="int" resultMap="org.uci.opus.college.persistence.AddressMapper.AddressResultMap">
        select opuscollege.address.id AS address_id, 
                opuscollege.address.addressTypeCode AS address_addressTypeCode, 
                opuscollege.address.organizationalUnitId AS address_organizationalUnitId, 
                opuscollege.address.personId AS address_personId, 
                opuscollege.address.studyId AS address_studyId, 
                opuscollege.address.street AS address_street, 
                opuscollege.address.number AS address_number, 
                opuscollege.address.numberExtension AS address_numberExtension, 
                opuscollege.address.zipCode AS address_zipCode, 
                opuscollege.address.POBOx AS address_POBox, 
                opuscollege.address.city AS address_city, 
                opuscollege.address.administrativePostCode AS address_administrativePostCode, 
                opuscollege.address.districtCode AS address_districtCode, 
                opuscollege.address.provinceCode AS address_provinceCode, 
                opuscollege.address.countryCode AS address_countryCode, 
                opuscollege.address.telephone AS address_telephone, 
                opuscollege.address.faxNumber AS address_faxNumber, 
                opuscollege.address.mobilePhone AS address_mobilePhone, 
                opuscollege.address.emailAddress AS address_emailAddress
        from opuscollege.address
        WHERE opuscollege.address.personId = #{value}
    </select>

    <!-- find all subjects for one StaffMember -  -->
    <select id="findSubjectsForStaffMember" parameterType="int" resultMap="org.uci.opus.college.persistence.SubjectMapper.SubjectTeacherResultMap">
        select opuscollege.subjectTeacher.*
        from opuscollege.subjectTeacher
        WHERE opuscollege.subjectTeacher.staffMemberId = #{value}
    </select> 

    <!-- find all examinations for one StaffMember -->
     <select id="findExaminationsForStaffMember" parameterType="int" resultMap="org.uci.opus.college.persistence.ExaminationMapper.ExaminationTeacherResultMap">
        select opuscollege.examinationTeacher.*
        from opuscollege.examinationTeacher
        WHERE opuscollege.examinationTeacher.staffMemberId = #{value}
    </select>

    <!-- find all tests for one StaffMember -->
     <select id="findTestsForStaffMember" parameterType="int" resultMap="org.uci.opus.college.persistence.TestMapper.TestTeacherResultMap">
        select opuscollege.testTeacher.*
        from opuscollege.testTeacher
        WHERE opuscollege.testTeacher.staffMemberId = #{value}
    </select>

    <insert id="addFunctionToStaffMember" parameterType="map">
        insert into opuscollege.staffMemberFunction
        (   
            staffMemberId
            ,functionCode
            ,functionLevelCode
        ) values (
            #{staffMemberId}
            ,#{functionCode}
            ,#{functionLevelCode}
        )
    </insert>

    <insert id="addStaffMember" parameterType="StaffMember">
        INSERT INTO opuscollege.staffmember (
                personId
        ,       staffMemberCode 
        ,       dateOfAppointment
        ,       appointmentTypeCode
        ,       staffTypeCode
        ,       primaryUnitOfAppointmentId
        ,       educationTypeCode
        ,       writeWho
        ) VALUES (
                #{personId}
        ,       #{staffMemberCode}
        ,       #{dateOfAppointment}
        ,       #{appointmentTypeCode}
        ,       #{staffTypeCode}
        ,       #{primaryUnitOfAppointmentId}
        ,       #{educationTypeCode}
        ,       #{writeWho}
        )
        
          <selectKey keyProperty="staffMemberId" resultType="int">
            SELECT currVal('opuscollege.staffmemberseq')
        </selectKey>
    </insert>
    
    <insert id="addStaffMemberHistory" parameterType="map">
        INSERT INTO audit.staffmember_hist (
                operation
        ,       writeWho            
        ,       staffMemberId
        ,       personId
        ,       staffMemberCode 
        ,       dateOfAppointment
        ,       appointmentTypeCode
        ,       staffTypeCode
        ,       primaryUnitOfAppointmentId
        ,       educationTypeCode
        
         <!-- person fields -->
        ,   id
        ,   personCode
        ,   surnameFull
        ,   surnameAlias
        ,   firstnamesFull
        ,   firstnamesAlias
        ,   nationalRegistrationNumber
        ,   civilTitleCode
        ,   gradeTypeCode
        ,   genderCode
        ,   birthdate
        ,   nationalityCode
        ,   placeOfBirth
        ,   districtOfBirthCode
        ,   provinceOfBirthCode
        ,   countryOfBirthCode
        ,   cityOfOrigin
        ,   administrativePostOfOriginCode
        ,   districtOfOriginCode           
        ,   provinceOfOriginCode      
        ,   countryOfOriginCode     
        ,   civilStatusCode    
        ,   housingOnCampus   
        ,   identificationTypeCode  
        ,   identificationNumber   
        ,   identificationPlaceOfIssue 
        ,   identificationDateOfIssue   
        ,   identificationDateOfExpiration   
        ,   professionCode   
        ,   professionDescription   
        ,   languageFirstCode   
        ,   languageFirstMasteringLevelCode  
        ,   languageSecondCode   
        ,   languageSecondMasteringLevelCode  
        ,   languageThirdCode   
        ,   languageThirdMasteringLevelCode  
        ,   contactPersonEmergenciesName 
        ,   contactPersonEmergenciesTelephoneNumber 
        ,   bloodTypeCode   
        ,   healthIssues 
        ,   motivation
        ,   publicHomepage
        ,   socialNetworks
        ,   hobbies
        ,   active       
       ,    remarks
        ) VALUES (
            #{operation}
        ,   #{StaffMember.writeWho}         
        ,   #{StaffMember.staffMemberId}
        ,   #{StaffMember.personId}
        ,   #{StaffMember.staffMemberCode}
        ,   #{StaffMember.dateOfAppointment}
        ,   #{StaffMember.appointmentTypeCode}
        ,   #{StaffMember.staffTypeCode}
        ,   #{StaffMember.primaryUnitOfAppointmentId}
        ,   #{StaffMember.educationTypeCode}
        
         <!-- person fields -->
        ,   #{StaffMember.id}        
        ,   #{StaffMember.personCode}
        ,   #{StaffMember.surnameFull}
        ,   #{StaffMember.surnameAlias}
        ,   #{StaffMember.firstnamesFull}
        ,   #{StaffMember.firstnamesAlias}
        ,   #{StaffMember.nationalRegistrationNumber}
        ,   #{StaffMember.civilTitleCode}
        ,   #{StaffMember.gradeTypeCode}
        ,   #{StaffMember.genderCode}
        ,   #{StaffMember.birthdate}
        ,   #{StaffMember.nationalityCode}
        ,   #{StaffMember.placeOfBirth}
        ,   #{StaffMember.districtOfBirthCode}
        ,   #{StaffMember.provinceOfBirthCode}
        ,   #{StaffMember.countryOfBirthCode}
        ,   #{StaffMember.cityOfOrigin}
        ,   #{StaffMember.administrativePostOfOriginCode}
        ,   #{StaffMember.districtOfOriginCode}
        ,   #{StaffMember.provinceOfOriginCode}
        ,   #{StaffMember.countryOfOriginCode}
        ,   #{StaffMember.civilStatusCode}
        ,   #{StaffMember.housingOnCampus}
        ,   #{StaffMember.identificationTypeCode}
        ,   #{StaffMember.identificationNumber}
        ,   #{StaffMember.identificationPlaceOfIssue}
        ,   #{StaffMember.identificationDateOfIssue}
        ,   #{StaffMember.identificationDateOfExpiration}
        ,   #{StaffMember.professionCode}
        ,   #{StaffMember.professionDescription}  
        ,   #{StaffMember.languageFirstCode}   
        ,   #{StaffMember.languageFirstMasteringLevelCode} 
        ,   #{StaffMember.languageSecondCode}
        ,   #{StaffMember.languageSecondMasteringLevelCode}
        ,   #{StaffMember.languageThirdCode}
        ,   #{StaffMember.languageThirdMasteringLevelCode}
        ,   #{StaffMember.contactPersonEmergenciesName}
        ,   #{StaffMember.contactPersonEmergenciesTelephoneNumber}
        ,   #{StaffMember.bloodTypeCode}
        ,   #{StaffMember.healthIssues}
        ,   #{StaffMember.motivation}
        ,   #{StaffMember.publicHomepage}
        ,   #{StaffMember.socialNetworks}
        ,   #{StaffMember.hobbies}
        ,   #{StaffMember.active}       
       ,    #{StaffMember.remarks}
        )
    </insert>

    <update id="updateStaffMember" parameterType="StaffMember">
        UPDATE  opuscollege.staffmember
        SET     staffMemberCode             = #{staffMemberCode}
        ,       dateOfAppointment           = #{dateOfAppointment}
        ,       appointmentTypeCode         = #{appointmentTypeCode}
        ,       staffTypeCode               = #{staffTypeCode}
        ,       primaryUnitOfAppointmentId  = #{primaryUnitOfAppointmentId}
        ,       educationTypeCode           = #{educationTypeCode}
        ,       startWorkDay                = to_timestamp(#{startWorkDay}, 'HH24:MI:SS')
        ,       endWorkDay                  = to_timestamp(#{endWorkDay}, 'HH24:MI:SS')
        ,       teachingDayPartCode         = #{teachingDayPartCode}
        ,       supervisingDayPartCode      = #{supervisingDayPartCode}
        ,       writeWho                    = #{writeWho}
        WHERE   staffMemberId               = #{staffMemberId}
    </update>

    <update id="deleteStaffMember" parameterType="int">
        DELETE FROM opuscollege.staffmember
        WHERE   staffMemberId   = #{value}
    </update>
 
    <update id="deleteStaffMemberInFunction" parameterType="int">
        DELETE FROM opuscollege.staffmemberFunction
        WHERE   staffMemberId   = #{value}
    </update>

    <update id="deleteStaffMemberInContract" parameterType="int">
        DELETE FROM opuscollege.contract
        WHERE   staffMemberId   = #{value}
    </update>

    <update id="deleteStaffMemberInAddress" parameterType="int">
        DELETE FROM opuscollege.address
        WHERE   personId  = #{value}
    </update>

    <select id="findPersonId" parameterType="int" resultType="int">
        SELECT  staffmember.personid
        FROM    opuscollege.staffmember
        WHERE   staffmemberid = #{value}
    </select>

    <select id="findAllContacts" parameterType="int" resultMap="StaffMemberResultMap">
        select  opuscollege.staffMember.*,
                opuscollege.person.*
        from opuscollege.staffMember
        INNER JOIN opuscollege.person ON opuscollege.staffMember.personId = opuscollege.person.id
        WHERE primaryUnitOfAppointmentId = #{value}
        order by lower(person.surnameFull), lower(person.firstnamesFull)
    </select>

</mapper>