<?xml version="1.0" encoding="UTF-8"?><!--
  ***** BEGIN LICENSE BLOCK *****
  Version: MPL 1.1/GPL 2.0/LGPL 2.1
  
  The contents of this file are subject to the Mozilla Public License Version 
  1.1 (the "License"); you may not use this file except in compliance with 
  the License. You may obtain a copy of the License at 
  http://www.mozilla.org/MPL/
  
  Software distributed under the License is distributed on an "AS IS" basis,
  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
  for the specific language governing rights and limitations under the
  License.
  
  The Original Code is Opus-College college module code.
  
  The Initial Developer of the Original Code is
  Center for Information Services, Radboud University Nijmegen.
  Portions created by the Initial Developer are Copyright (C) 2008
  the Initial Developer. All Rights Reserved.
  
  Contributor(s):
    For Java files, see Javadoc @author tags.
  
  Alternatively, the contents of this file may be used under the terms of
  either the GNU General Public License Version 2 or later (the "GPL"), or
  the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
  in which case the provisions of the GPL or the LGPL are applicable instead
  of those above. If you wish to allow use of your version of this file only
  under the terms of either the GPL or the LGPL, and not to allow others to
  use your version of this file under the terms of the MPL, indicate your
  decision by deleting the provisions above and replace them with the notice
  and other provisions required by the GPL or the LGPL. If you do not delete
  the provisions above, a recipient may use your version of this file under
  the terms of any one of the MPL, the GPL or the LGPL.
  
  ***** END LICENSE BLOCK *****
--><!--Converted at: Mon May 11 21:34:49 CEST 2015-->
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="org.uci.opus.college.persistence.AddressMapper">

    <!-- resultmap to define complete Address -->
    <resultMap id="AddressResultMap" type="Address">
        <id property="id" column="address_id"/>
        <result property="addressTypeCode" column="address_addressTypeCode"/>
        <result property="organizationalUnitId" column="address_organizationalUnitId"/>
        <result property="personId" column="address_personId"/>
        <result property="studyId" column="address_studyId"/>
        <result property="street" column="address_street"/>
        <result property="number" column="address_number"/>
        <result property="numberExtension" column="address_numberExtension"/>
        <result property="zipCode" column="address_zipCode"/>
        <result property="POBox" column="address_POBox"/>
        <result property="city" column="address_city"/>
        <result property="administrativePostCode" column="address_administrativePostCode"/>
        <result property="districtCode" column="address_districtCode"/>
        <result property="provinceCode" column="address_provinceCode"/>
        <result property="countryCode" column="address_countryCode"/>
        <result property="telephone" column="address_telephone"/>
        <result property="faxNumber" column="address_faxNumber"/>
        <result property="mobilePhone" column="address_mobilePhone"/>
        <result property="emailAddress" column="address_emailAddress"/>
    </resultMap>

    <select id="findAddress" parameterType="int" resultType="Address">
        select  *
        from    opuscollege.address
        where   id = #{value}
    </select>
    
    <select id="findAddressByPersonId" parameterType="map" resultType="Address">
        select  *
        from    opuscollege.address
        where   personId = #{personId}
        AND     addressTypeCode = #{addressTypeCode}
    </select>
    
    <select id="findAddressByOrganizationalUnitId" parameterType="map" resultType="Address">
        select  *
        from    opuscollege.address
        where   organizationalUnitId = #{organizationalUnitId}
        AND     addressTypeCode = #{addressTypeCode}
    </select>

    <select id="findAddressByStudyId" parameterType="map" resultType="Address">
        select  *
        from    opuscollege.address
        where   studyId = #{studyId}
        AND     addressTypeCode = #{addressTypeCode}
    </select>
    
    <select id="findAddressesForEntity" parameterType="map" resultType="Address">
        select  *
        from    opuscollege.address
        <if test="entity == &quot;organizationalunit&quot;">
        where   organizationalUnitId = #{id}
        </if>
        <if test="entity == &quot;study&quot;">
        where   studyId = #{id}
        </if>
        <if test="entity == &quot;staffmember&quot;">
        where   personId = #{id}
        </if>
        <if test="entity == &quot;student&quot;">
        where   personId = #{id}
        </if>
        ORDER BY addressTypeCode
    </select>

    <insert id="addAddress" parameterType="Address">
        insert into opuscollege.address
        ( addressTypeCode
        , administrativePostCode
        , city
        , countryCode
        , districtCode
        , emailAddress
        , faxNumber
        , mobilePhone
        , number
        , numberExtension
        , organizationalUnitId
        , personId
        , provinceCode
        , street
        , studyId
        , telephone
        , zipCode
        , POBox
        ) values
        ( #{addressTypeCode}
        , #{administrativePostCode}
        , #{city}
        , #{countryCode}
        , #{districtCode}
        , #{emailAddress}
        , #{faxNumber}
        , #{mobilePhone}
        , #{number}
        , #{numberExtension}
        , #{organizationalUnitId}
        , #{personId}
        , #{provinceCode}
        , #{street}
        , #{studyId}
        , #{telephone}
        , #{zipCode}
        , #{POBox}
        )
    </insert>
    
    <update id="updateAddress" parameterType="Address">
        update  opuscollege.address
        set     addressTypeCode        = #{addressTypeCode}
        ,       administrativePostCode = #{administrativePostCode}
        ,       city                 = #{city}
        ,       countryCode          = #{countryCode}
        ,       districtCode         = #{districtCode}
        ,       emailAddress         = #{emailAddress}
        ,       faxNumber            = #{faxNumber}
        ,       mobilePhone          = #{mobilePhone}
        ,       number               = #{number}
        ,       numberExtension      = #{numberExtension}
        ,       organizationalUnitId = #{organizationalUnitId}
        ,       personId             = #{personId}
        ,       provinceCode         = #{provinceCode}
        ,       street               = #{street}
        ,       studyId              = #{studyId}
        ,       telephone            = #{telephone}
        ,       zipCode              = #{zipCode}
        ,		POBox				 = #{POBox}
        where   id                   = #{id}
    </update>
    
    <delete id="deleteAddress" parameterType="int">
        DELETE  from opuscollege.address
        where   id          = #{value}
    </delete>
    
    <delete id="deleteAddressesForStudy" parameterType="int">
        DELETE  from opuscollege.address
        where   studyId          = #{value}
    </delete>
    
    <delete id="deleteAddressesForOrganizationalUnit" parameterType="int">
        DELETE  from opuscollege.address
        where   organizationalUnitId  = #{value}
    </delete>

    <delete id="deleteStudentInAddress" parameterType="int">
        DELETE FROM opuscollege.address
        WHERE   personId  = #{value}
    </delete>

    <!-- find all addresses for one Student -->
    <select id="findAddressesForStudent" parameterType="int" resultMap="AddressResultMap">
        select opuscollege.address.id AS address_id, 
                opuscollege.address.addressTypeCode AS address_addressTypeCode, 
                opuscollege.address.organizationalUnitId AS address_organizationalUnitId, 
                opuscollege.address.personId AS address_personId, 
                opuscollege.address.studyId AS address_studyId, 
                opuscollege.address.street AS address_street, 
                opuscollege.address.number AS address_number, 
                opuscollege.address.numberExtension AS address_numberExtension, 
                opuscollege.address.zipCode AS address_zipCode, 
                opuscollege.address.POBOx AS address_POBox, 
                opuscollege.address.city AS address_city, 
                opuscollege.address.administrativePostCode AS address_administrativePostCode, 
                opuscollege.address.districtCode AS address_districtCode, 
                opuscollege.address.provinceCode AS address_provinceCode, 
                opuscollege.address.countryCode AS address_countryCode, 
                opuscollege.address.telephone AS address_telephone, 
                opuscollege.address.faxNumber AS address_faxNumber, 
                opuscollege.address.mobilePhone AS address_mobilePhone, 
                opuscollege.address.emailAddress AS address_emailAddress
        from opuscollege.address
        WHERE opuscollege.address.personId = #{value}
    </select>

</mapper>