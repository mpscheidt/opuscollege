<?xml version="1.0" encoding="UTF-8"?><!--
  ***** BEGIN LICENSE BLOCK *****
  Version: MPL 1.1/GPL 2.0/LGPL 2.1
  
  The contents of this file are subject to the Mozilla Public License Version
  1.1 (the "License"); you may not use this file except in compliance with
  the License. You may obtain a copy of the License at
  http://www.mozilla.org/MPL/
  
  Software distributed under the License is distributed on an "AS IS" basis,
  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
  for the specific language governing rights and limitations under the
  License.
  
  The Original Code is Opus-College college module code.
  
  The Initial Developer of the Original Code is
  Center for Information Services, Radboud University Nijmegen.
  Portions created by the Initial Developer are Copyright (C) 2008
  the Initial Developer. All Rights Reserved.
  
  Contributor(s):
    For Java files, see Javadoc @author tags.
  
  Alternatively, the contents of this file may be used under the terms of
  either the GNU General Public License Version 2 or later (the "GPL"), or
  the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
  in which case the provisions of the GPL or the LGPL are applicable instead
  of those above. If you wish to allow use of your version of this file only
  under the terms of either the GPL or the LGPL, and not to allow others to
  use your version of this file under the terms of the MPL, indicate your
  decision by deleting the provisions above and replace them with the notice
  and other provisions required by the GPL or the LGPL. If you do not delete
  the provisions above, a recipient may use your version of this file under
  the terms of any one of the MPL, the GPL or the LGPL.
  
  ***** END LICENSE BLOCK *****
--><!--Converted at: Mon May 11 21:34:49 CEST 2015-->
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="org.uci.opus.college.persistence.OpusUserMapper">

    <resultMap id="OpusUserResultMap" type="OpusUser">
        <id property="id" column="id"/>
        <result property="personId" column="personId"/>
        <result property="userName" column="userName"/>
        <result property="pw" column="pw"/>
        <result property="lang" column="lang"/>
        <result property="preferredOrganizationalUnitId" column="preferredOrganizationalUnitId"/>
        <result property="failedLoginAttempts" column="failedLoginAttempts"/>
        <result property="writeWho" column="writeWho"/>
    </resultMap>

    <!-- OpusUser -->

	<!-- find one OpusUser -->
	<select id="findOpusUserByUserName" parameterType="string" resultMap="OpusUserResultMap">
		select *
		from opuscollege.opusUser
		WHERE userName = #{value}
    </select>
    
    <!-- find one OpusUser -->
	<select id="findOpusUserByPersonId" parameterType="int" resultMap="OpusUserResultMap">
		select *
		from opuscollege.opusUser
		WHERE personId = #{value}
    </select>

	<select id="findOpusUser" parameterType="map" resultMap="OpusUserResultMap">
		SELECT * FROM opuscollege.opusUser WHERE true		
        <if test="id != null">
            AND id=#{id}
        </if>
        <if test="userName != null">
            AND userName = #{userName}
        </if>
        <if test="personId != null">
            AND personId=#{personId}
        </if>
        <if test="lang != null">
            AND lang=#{lang}
        </if>
        <if test="preferredOrganizationalUnitId != null">
            AND preferredOrganizationalUnitId=#{preferredOrganizationalUnitId}
        </if>
        <if test="failedLoginAttempts != null">
            AND failedLoginAttempts=#{failedLoginAttempts}
        </if>
    </select>

    <insert id="addOpusUser" parameterType="OpusUser">
        INSERT INTO opuscollege.opusUser
        ( personId
        , userName
        , lang
        , pw
        , preferredOrganizationalUnitId
        , failedLoginAttempts
        ) values (
          #{personId}
        , #{userName}
        , #{lang}
        , #{pw}
        , #{preferredOrganizationalUnitId}
        , #{failedLoginAttempts}
        )
    </insert>

    <update id="updateOpusUser" parameterType="OpusUser">
        UPDATE opuscollege.opusUser SET
        userName = #{userName}
        , lang = #{lang}
        , preferredOrganizationalUnitId = #{preferredOrganizationalUnitId}
        , failedLoginAttempts = #{failedLoginAttempts}
        <if test="pw != null">
            , pw = #{pw}
        </if>
        WHERE personId = #{personId}
    </update>

    <update id="deleteOpusUser" parameterType="int">
        DELETE FROM opuscollege.opusUser
        WHERE personId = #{value}
    </update>

    <select id="isUserNameAlreadyExists" parameterType="map" resultType="boolean">
        SELECT EXISTS (
            SELECT userName FROM opusCollege.OpusUser
            WHERE username = #{userName} AND id != #{id}
        )
    </select>

    <!-- OpusUserRole -->

	<!-- find OpusUserRoles by username -->
<!-- 	<select id="findOpusUserRolesByUserName" parameterType="string" resultType="OpusUserRole"> -->
<!-- 		select * -->
<!-- 		from opuscollege.opusUserRole -->
<!-- 		WHERE userName = #{value} -->
<!--     </select> -->

    <select id="findOpusUserRolesByParams" parameterType="map" resultType="OpusUserRole">
        SELECT opuscollege.opusUserRole.*
        FROM opuscollege.opusUserRole
        INNER JOIN opuscollege.opusUser ON opusUserRole.userName = opusUser.userName
        WHERE true
        <if test='organizationalUnitId != null and organizationalUnitId != "" and organizationalUnitId != "0"'>
            and opusUserRole.organizationalUnitId = #{organizationalUnitId}
        </if>
        <if test="role != null">
            and opusUserRole.role = #{role}
        </if>
        <if test="userName != null">
            and opusUserRole.userName = #{userName}
        </if>
        <if test="personId != null">
            and opuscollege.opusUser.personId = #{personId}
        </if>
        <if test="excludeExpired != null">
            and (
            opuscollege.opusUserRole.validThrough &gt;= now() OR
            opuscollege.opusUserRole.validThrough IS NULL
            )
        </if>
        <if test="excludeUnavailable != null">
            and opuscollege.opusUserRole.validFrom &lt;= now()
        </if>
        ORDER BY opusUserRole.role
    </select>

    <!-- Find opusUserRoles with the same organizational unit as the study
         Here, not the primaryOrganizationalUnit of the student is relevant, but the studyPlan,
         because a student might have an opusUserRole for a organizational unit that matches a different study plan's study.
     -->
    <select id="findOpusUserRolesForStudy" parameterType="int" resultType="OpusUserRole">
        SELECT opuscollege.opusUserRole.*
        FROM opuscollege.opusUserRole
        INNER JOIN opuscollege.opusUser ON opuscollege.opusUserRole.userName = opuscollege.opusUser.userName
        INNER JOIN opuscollege.person person ON opusUser.personId = person.id
        INNER JOIN opuscollege.student ON student.personId = person.id
        INNER JOIN opuscollege.studyplan on student.studentId = studyplan.studentId
        INNER JOIN opuscollege.study on studyplan.studyId = study.id

        WHERE opusUserRole.role = 'student'
          AND opusUserRole.organizationalUnitId = study.organizationalunitid
          AND studyplan.studyid = #{studyId}
    </select>

	<select id="findOpusUserRolesByParams2" parameterType="map" resultType="java.util.HashMap">
        SELECT
        opusUserRole.id,
        opusUserRole.role,
        role.roleDescription AS "roleDescription",
        opusUserRole.userName AS "userName",
        opusUserRole.validFrom AS "validFrom",
        opusUserRole.validThrough AS "validThrough",
        opusUserRole.organizationalUnitId AS "organizationalUnitId",
        opusUserRole.active,
        organizationalUnit.organizationalUnitDescription AS "organizationalUnit",
        opususer.preferredOrganizationalUnitId AS "preferredOrganizationalUnitId",
        branch.branchDescription AS "branchDescription",
        institution.institutionDescription AS "institutionDescription"
        FROM opuscollege.opusUserRole
        INNER JOIN opuscollege.opusUser ON opuscollege.opusUserRole.userName = opuscollege.opusUser.userName
        INNER JOIN opuscollege.role ON opuscollege.role.role = opuscollege.opusUserRole.role
            and role.lang = #{preferredLanguage}
        INNER JOIN opuscollege.organizationalUnit ON organizationalUnit.id = opusUserRole.organizationalUnitId
        INNER JOIN opuscollege.branch ON organizationalUnit.branchId = branch.id
        INNER JOIN opuscollege.institution ON branch.institutionId = institution.id
        WHERE true
        <if test='organizationalUnitId != null and organizationalUnitId != "" and organizationalUnitId != "0"'>
            and opusUserRole.organizationalUnitId = #{organizationalUnitId}
        </if>
        <if test="role != null">
            and opusUserRole.role = #{role}
        </if>
        <if test="userName != null">
            and opusUserRole.userName = #{userName}
        </if>
        <if test="personId != null">
            and opuscollege.opusUser.personId = #{personId}
        </if>
        <if test="excludeExpired != null">
            and (
            opuscollege.opusUserRole.validThrough &gt;= now() OR
            opuscollege.opusUserRole.validThrough IS NULL
            )
        </if>
        <if test="excludeUnavailable != null">
            and opuscollege.opusUserRole.validFrom &lt;= now()
        </if>
        ORDER BY opusUserRole.role
    </select>

    <select id="findOpusUserRoleById" parameterType="int" resultType="OpusUserRole">
        SELECT opuscollege.opusUserRole.*
        FROM opuscollege.opusUserRole
        WHERE id = #{value}
    </select>

<!-- MP 2015-01-04: not used anywhere -->
<!-- 	<select id="findOpusUserRoleByUserName2" parameterType="string" resultType="java.util.HashMap"> -->

<!-- 		SELECT -->

<!-- 		opusUserRole.id AS id, -->
<!-- 		opusUserRole.role AS "role", -->
<!-- 		opusUserRole.userName AS "userName", -->
<!-- 		opusUserRole.validFrom AS "validFrom", -->
<!-- 		opusUserRole.validThrough AS "validThrough", -->
<!-- 		opusUserRole.organizationalUnitId AS "organizationalUnitId", -->
<!-- 		opusUserRole.active AS active, -->
<!-- 		organizationalUnit.organizationalUnitDescription AS -->
<!-- 		"organizationalUnit" -->

<!-- 		FROM opuscollege.opusUserRole -->
<!-- 		INNER JOIN opuscollege.organizationalUnit ON -->
<!-- 		organizationalUnit.id = opusUserRole.organizationalUnitId -->
<!-- 		WHERE opusUserRole.username = #{value} -->

<!-- 		ORDER BY opusUserRole.role -->
<!-- 	</select> -->

    <select id="findOrganizationalUnitsNotInUserRole" parameterType="map" resultType="org.uci.opus.college.domain.OrganizationalUnit">
        
        SELECT organizationalunit.*
        FROM opuscollege.organizationalunit organizationalunit
        INNER JOIN opuscollege.branch on branch.id = organizationalunit.branchId
        INNER JOIN opuscollege.institution on institution.id = branch.institutionId
        WHERE
        organizationalunit.id not in (SELECT organizationalunitid FROM opuscollege.opususerrole WHERE username = #{userName})
        <if test='institutionId != null and institutionId != "" and institutionId != "0"'>
            and institution.id = #{institutionId}
        </if>
        <if test='branchId != null and branchId != "" and branchId != "0"'>
            and branch.id = #{branchId}
        </if>

<!--    TO DO exclude child Ounits as well     
        <isNotNull property="organizationalUnitId">
            <isNotEqual prepend="and" property="organizationalUnitId" compareValue="0">
                organizationalunit.id in (select id from opuscollege.crawl_tree(#{organizationalUnitId}, 0)) 
            </isNotEqual>
        </isNotNull>
     -->
     ORDER BY  organizationalunit.organizationalunitdescription
    </select>

<!-- MP 2015-01-04: not used anywhere -->
<!-- 	<select id="findOpusUserRoleByPersonId" parameterType="int" resultType="OpusUserRole"> -->
<!-- 		select opuscollege.opusUserRole.* -->
<!-- 		from opuscollege.opusUserRole -->
<!-- 		INNER JOIN opuscollege.opusUser ON opuscollege.opusUserRole.userName = -->
<!-- 		opuscollege.opusUser.userName -->
<!-- 		WHERE personId = #{value} -->
<!-- 		ORDER BY opusUserRole.role -->
<!--     </select> -->

    <insert id="addOpusUserRole" parameterType="OpusUserRole">
        insert into opuscollege.opusUserRole
        (
        role
        , userName
        ,institutionId
        ,branchId
        ,organizationalUnitId
        ,validFrom
        ,validThrough
        ) values (
        #{role}
        , #{userName}
        ,#{institutionId}
        ,#{branchId}
        ,#{organizationalUnitId}
        <if test='validFrom != null'>
            ,#{validFrom}
        </if>
        <if test='validFrom == null'>
            , now()
        </if>
        ,#{validThrough}
        )
    </insert>

    <update id="updateOpusUserRole" parameterType="OpusUserRole">
        UPDATE opuscollege.opusUserRole SET
        role = #{role}
        , userName = #{userName}
        , institutionId = #{institutionId}
        , branchId = #{branchId}
        , organizationalUnitId = #{organizationalUnitId}
        , validFrom = #{validFrom}
        , validThrough = #{validThrough}
        WHERE id = #{id}
    </update>

    <delete id="deleteOpusUserRole" parameterType="int">
        DELETE FROM opuscollege.opusUserRole
        WHERE username = (SELECT username from opuscollege.opusUser WHERE personId
        = #{value})
    </delete>

    <delete id="deleteOpusUserRoleById" parameterType="int">
        DELETE FROM opuscollege.opusUserRole
        WHERE id = #{value}
    </delete>

    <!-- Role -->

    <select id="findRole" parameterType="map" resultType="Role">
        SELECT *
        FROM opuscollege.role
        WHERE role = #{roleName}
        AND lang = #{userLanguage}

        ORDER BY role
    </select>

    <select id="findRolesByParams" parameterType="map" resultType="Role">
        SELECT *
        FROM opuscollege.role
        WHERE true
            AND level &gt;= (
                SELECT DISTINCT level FROM opuscollege.role AS loggedInRole
                WHERE loggedInRole.role = #{loggedInRole}
            )
        <if test='id != null'>
            AND id = #{id}
        </if>
        <if test='preferredLanguage != null'>
            AND lang = #{preferredLanguage}
        </if>
        <if test='role != null'>
            AND role = #{role}
        </if>
        ORDER BY level ASC
    </select>

    <select id="findRoles" parameterType="map" resultType="Role">
        SELECT * FROM opuscollege.role
        WHERE lang = #{preferredLanguage}
            AND level &gt;= (
                SELECT level from opuscollege.role
                WHERE lang = #{preferredLanguage}
                AND role = #{loggedInRole}
            )
            AND opuscollege.remove_diacritics(lower(role)) like
            opuscollege.remove_diacritics(lower('%' || #{searchValue} || '%'))
        
        ORDER BY role ASC
    </select>

    <!-- find all roles in levels below a user roles -->
    <select id="findAllRoles" parameterType="map" resultType="Role">
        select * from opuscollege.role
        WHERE lang = #{preferredLanguage}
            AND level &gt;= (
                SELECT level from opuscollege.role
                WHERE lang = #{preferredLanguage}
                AND role = #{loggedInRole}
            )
        ORDER BY role ASC
    </select>

    <!-- Finds roles without a certain privilege -->
    <select id="findRolesWithoutPrivilege" parameterType="map" resultType="Role">
        
        SELECT DISTINCT  ON(role.role)
          role.role
          , role.roleDescription
          , role.active

        FROM opuscollege.role
        INNER  JOIN opuscollege.opusrole_privilege opusrole_privilege ON opusrole_privilege.role = role.role AND role.lang = #{preferredLanguage}
        WHERE
        role.level &gt;= (
            SELECT level FROM opuscollege.role
            WHERE lang = #{preferredLanguage}
            AND role = #{loggedInRole}
        )
        AND role.role NOT IN (SELECT opusrole_privilege.role FROM opuscollege.opusrole_privilege WHERE privilegeCode = #{privilegeCode})
        ORDER by role.role
    </select>
    
    <insert id="addRole" parameterType="Role">
        INSERT INTO opuscollege.role(
            lang,
            active,
            role,
            roleDescription,
            level
        )
        VALUES (
            #{lang},
            #{active},
            #{role},
            #{roleDescription},
            #{level}
        )
        <selectKey keyProperty="id" resultType="int">
            SELECT currVal('opuscollege.roleseq')
        </selectKey>
    </insert>

    <update id="updateRole" parameterType="Role">
        UPDATE opuscollege.role
        SET active = #{active}
          , roleDescription = #{roleDescription}
          , level = #{level}
        WHERE role.role = #{role}
    </update>

    <delete id="deleteRole" parameterType="string">
        DELETE FROM opuscollege.role WHERE role = #{value};
        DELETE FROM opuscollege.opusrole_privilege WHERE role = #{value};
    </delete>

    <!-- Find all privileges which are not assigned to this role -->
    <select id="findOpusPrivilegesNotInRole" parameterType="map" resultType="OpusPrivilege">

        SELECT
            opusprivilege.id,
            opusprivilege.code,
            opusprivilege.lang,
            opusprivilege.active,
            opusprivilege.description

        FROM opuscollege.opusprivilege

        WHERE opusprivilege.code NOT IN (
            SELECT opusrole_privilege.privilegecode
            FROM opuscollege.opusrole_privilege
            WHERE opusrole_privilege.role = #{role}
        )

        AND lang = #{preferredLanguage}

        ORDER BY opusprivilege.code
    
    </select>

    <select id="findOpusPrivileges" parameterType="map" resultType="OpusPrivilege">

        SELECT id
        , code
        , lang
        , active
        , description
        FROM opuscollege.OpusPrivilege    
        WHERE OpusPrivilege.lang = #{preferredLanguage}
        <if test="role != null">
            AND role.role = #{role}
        </if>
        <if test="privilegeId != null">
            AND OpusPrivilege.id = #{privilegeId}
        </if>
        <if test="privilegeCode != null">
            AND OpusPrivilege.code = #{privilegeCode}
        </if>
        <if test="active != null">
            AND OpusPrivilege.active = #{active}
        </if>
        <if test="searchValue != null and searchValue != ''">
            AND opuscollege.remove_diacritics(
                    lower(OpusPrivilege.code) || ' ' || 
                    lower(OpusPrivilege.description)
                ) like opuscollege.remove_diacritics(lower('%' || #{searchValue} || '%'))
        </if>

        ORDER BY OpusPrivilege.description
    </select>

    <select id="findPrivilegesForRoles" parameterType="map" resultType="OpusPrivilege">
        <!-- Privileges exiting simultaneously in different roles should be loaded only once -->
        SELECT DISTINCT opusprivilege.*
        FROM opuscollege.opusprivilege
        INNER JOIN opuscollege.opusrole_privilege ON opusrole_privilege.privilegeCode = opusprivilege.code
        WHERE true
        <if test='roles != null and roles.size() > 0'>
            and opusrole_privilege.role IN
            <foreach item="item" collection="roles" open="(" separator="," close=")" >
                #{item}
            </foreach>
        </if>
        AND opusprivilege.lang = #{preferredLanguage}
        ORDER BY opusprivilege.description
    </select>

    <select id="findPrivilegesCodesForRoles" parameterType="map" resultType="String">
        <!-- Privileges exiting simultaneously in different roles should be loaded only once -->
        SELECT DISTINCT opusprivilege.code
        FROM opuscollege.opusprivilege opusprivilege
        INNER JOIN opuscollege.opusrole_privilege ON opusrole_privilege.privilegeCode = opusprivilege.code
        WHERE true
        <if test='roles != null and roles.size() > 0'>
            and opusrole_privilege.role IN
            <foreach item="item" collection="roles" open="(" separator="," close=")" >
                #{item}
            </foreach>
        </if>
        AND opusprivilege.lang = #{preferredLanguage}
    </select>

    <insert id="copyPrivileges">
        INSERT INTO opuscollege.opusrole_privilege (role,privilegeCode)
        SELECT #{destRole}, privilegeCode FROM opuscollege.opusrole_privilege WHERE role = #{sourceRole}
            AND privilegeCode NOT IN (SELECT privilegeCode FROM opuscollege.opusrole_privilege WHERE role = #{destRole})
    </insert>





    <!-- OpusRolePrivilege -->    

    <select id="findOpusRolePrivileges" parameterType="map" resultType="OpusRolePrivilege">
        
        SELECT distinct opusrole_privilege.*  
        
        FROM opuscollege.opusrole_privilege
        
        INNER JOIN opuscollege.opusprivilege ON opusprivilege.code = opusrole_privilege.privilegeCode
        INNER JOIN opuscollege.role ON role.role = opusrole_privilege.role
        
        where true
        
        <if test="privilegeId != null">
            AND opusprivilege.id = #{privilegeId}
        </if>
        <if test="privilegeCode != null">
            AND opusprivilege.code = #{privilegeCode} 
        </if>
<!--         <if test="lang != null"> -->
<!--             AND opusprivilege.lang = #{lang}  -->
<!--             AND role.lang = #{lang} -->
<!--         </if> -->
        <if test="role != null">
            AND opusrole_privilege.role = #{role}
        </if>
        <if test="validFrom != null">
            AND opusrole_privilege.validFrom = #{validFrom}
        </if>
        <if test="validThrough != null">
            AND opusrole_privilege.validThrough = #{validThrough}
        </if>
        ORDER BY opusrole_privilege.role
    </select> 

    <select id="findFullOpusRolePrivilege" parameterType="map" resultType="java.util.HashMap">
        
        SELECT opusrole_privilege.id AS id
              , opusrole_privilege.validFrom AS "validFrom"
              , opusrole_privilege.validThrough AS "validThrough"
              , opusrole_privilege.role AS role
              , opusrole_privilege.active AS active
              , opusprivilege.id AS "privilegeId"
              , opusprivilege.code AS "privilegeCode" 
              , opusprivilege.description AS "privilegeDescription"
              , role.roleDescription AS "roleDescription"
        FROM opuscollege.opusrole_privilege
        INNER JOIN opuscollege.opusprivilege ON opusprivilege.code = opusrole_privilege.privilegeCode AND opusprivilege.lang = #{preferredLanguage}
        INNER JOIN opuscollege.role ON role.role = opusrole_privilege.role AND role.lang = #{preferredLanguage}
        WHERE 
        role.level &gt;= (
            SELECT level FROM opuscollege.role
            WHERE lang = #{preferredLanguage}
            AND role = #{loggedInRole}
        )
        <if test="privilegeId != null">
            AND opusprivilege.id = #{privilegeId}
        </if>
        <if test="privilegeCode != null">
            AND opusrole_privilege.code = #{privilegeCode} 
        </if>
        <if test="role != null">
            AND opusrole_privilege.role = #{role}
        </if>
        <if test="roleId != null">
            AND role.id = #{roleId}
        </if>
        <if test="validFrom != null">
            AND opusrole_privilege.validFrom = #{validFrom}
        </if>
        <if test="validThrough != null">
            AND opusrole_privilege.validThrough = #{validThrough}
        </if>
        
        ORDER BY opusprivilege.code
    </select>

    <insert id="addOpusRolePrivilege" parameterType="OpusRolePrivilege">
            INSERT INTO opuscollege.opusrole_privilege(role, privilegeCode, validFrom,validThrough,active)
            VALUES(#{role}, #{privilegeCode}, #{validFrom},#{validThrough},#{active})
    </insert>    
    
    <update id="updateOpusRolePrivilege" parameterType="OpusRolePrivilege">
            UPDATE opuscollege.opusRole_privilege
            SET active = #{active}
              , validFrom = #{validFrom}
              , validThrough = #{validThrough}
              , "role" = #{role}
            WHERE id = #{id}
    </update>
    
    <delete id="deleteOpusRolePrivilege" parameterType="int">
        DELETE FROM opuscollege.opusrole_privilege WHERE id = #{id}    
    </delete>

	<delete id="deletePrivilegeFromRole" parameterType="map">
		DELETE FROM opuscollege.opusrole_privilege WHERE
		opusrole_privilege.privilegeCode = #{privilegeCode} 
		AND opusrole_privilege.role = #{role}	
    </delete>

     <select id="findOpusUsersAndRoles" parameterType="map" resultType="java.util.HashMap">
    
        SELECT DISTINCT
        OpusUser.id AS "userId",
        Person."surnamefull" AS "surnameFull",
        Person."firstnamesfull" AS "firstNamesFull",
        Person.id AS "personId",
        OpusUser."username" AS "userName",     
        ARRAY(SELECT role FROM opuscollege.opususerrole userrole WHERE userrole.username = opususer.username) AS roles
        
        FROM "opuscollege"."person" person INNER JOIN "opuscollege"."opususer" opususer ON person."id" = opususer."personid"
        INNER JOIN "opuscollege"."opususerrole" opususerrole ON opususer."username" = opususerrole."username"
        INNER JOIN "opuscollege"."role" role ON opususerrole."role" = role."role"
        INNER JOIN "opuscollege"."organizationalunit" organizationalunit ON opususerrole."organizationalunitid" = organizationalUnit.id
        INNER JOIN "opuscollege"."branch" branch ON organizationalunit."branchid"= branch."id"
        INNER JOIN "opuscollege"."institution" institution ON branch."institutionid"= institution."id"
    
        WHERE TRUE     
        <if test='institutionId != null and institutionId != "" and institutionId != "0"'>
            AND institution.id = #{institutionId}
        </if>
        <if test='branchId != null and branchId != "" and branchId != "0"'>
            AND branch.id = #{branchId}
        </if>
        <if test='organizationalUnitId != null and organizationalUnitId != "" and organizationalUnitId != "0"'>
            AND organizationalunit.id in (SELECT id FROM opuscollege.crawl_tree(#{organizationalUnitId}, 0))
        </if>
        <if test="role != null">
            AND opususerrole."role" = #{role}
        </if>
        <if test="userName != null">
            AND opususer."username" = #{userName}
        </if>
        <if test="searchValue != null and searchValue != ''">
              AND 
              (
              opuscollege.remove_diacritics(lower(role)) like opuscollege.remove_diacritics(lower('%' || #{searchValue} || '%'))
              OR opuscollege.remove_diacritics(lower(userName)) like opuscollege.remove_diacritics(lower('%' || #{searchValue} || '%'))
              OR opuscollege.remove_diacritics(lower(institutiondescription)) like opuscollege.remove_diacritics(lower('%' || #{searchValue} || '%'))
              OR opuscollege.remove_diacritics(lower(branchdescription)) like opuscollege.remove_diacritics(lower('%' || #{searchValue} || '%'))
              OR opuscollege.remove_diacritics(lower(organizationalunitdescription)) like opuscollege.remove_diacritics(lower('%' || #{searchValue} || '%'))
              
              )
        </if>

        ORDER BY person.firstnamesfull,person.surnamefull,opususer.username,roles
    
    </select>

    <!-- encrypt the given text; the tablename could be any table it is used 
        like the "dual" table in Oracle. Limit 1: return one row only -->
    <select id="encryptText" parameterType="string" resultType="string">
        select MD5(#{value})
        from opusCollege.opusUser
        limit 1
    </select>

</mapper>