<?xml version="1.0" encoding="UTF-8"?>
<!--
  ***** BEGIN LICENSE BLOCK *****
  Version: MPL 1.1/GPL 2.0/LGPL 2.1
  
  The contents of this file are subject to the Mozilla Public License Version
  1.1 (the "License"); you may not use this file except in compliance with
  the License. You may obtain a copy of the License at
  http://www.mozilla.org/MPL/
  
  Software distributed under the License is distributed on an "AS IS" basis,
  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
  for the specific language governing rights and limitations under the
  License.
  
  The Original Code is Opus-College college module code.
  
  The Initial Developer of the Original Code is
  Center for Information Services, Radboud University Nijmegen.
  Portions created by the Initial Developer are Copyright (C) 2008
  the Initial Developer. All Rights Reserved.
  
  Contributor(s):
    For Java files, see Javadoc @author tags.
  
  Alternatively, the contents of this file may be used under the terms of
  either the GNU General Public License Version 2 or later (the "GPL"), or
  the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
  in which case the provisions of the GPL or the LGPL are applicable instead
  of those above. If you wish to allow use of your version of this file only
  under the terms of either the GPL or the LGPL, and not to allow others to
  use your version of this file under the terms of the MPL, indicate your
  decision by deleting the provisions above and replace them with the notice
  and other provisions required by the GPL or the LGPL. If you do not delete
  the provisions above, a recipient may use your version of this file under
  the terms of any one of the MPL, the GPL or the LGPL.
  
  ***** END LICENSE BLOCK *****
-->

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="org.uci.opus.college.persistence.ExaminationResultMapper"> 

    <resultMap id="ExaminationResultResultMap" type="ExaminationResult">
        <result property="id" column="id"/>
        <result property="examinationId" column="examinationId"/>
        <result property="subjectId" column="subjectId"/>
        <result property="subjectResultId" column="subjectResultId"/>
        <result property="studyPlanDetailId" column="studyPlanDetailId"/>
        <result property="examinationResultDate" column="examinationResultDate" javaType="java.util.Date"/>
        <result property="attemptNr" column="attemptNr"/>
        <result property="mark" column="mark"/>
        <result property="examinationResultCommentId" column="examinationResultCommentId"/>
        <result property="staffMemberId" column="staffMemberId"/>
        <result property="active" column="active"/>
        <result property="passed" column="passed"/>
        <result property="writeWho" column="writeWho"/>
        <result property="writeWhen" column="writeWhen"/>
        <association property="examination" select="org.uci.opus.college.persistence.ExaminationMapper.findExamination" column="examinationId"/>
    </resultMap>
    
    <resultMap id="ExaminationResultHistoryResultMap" type="ExaminationResultHistory" autoMapping="false">
    	<result property="operation" column="operation"/>
    	<result property="writewho" column="writewho"/>
    	<result property="writewhen" column="writewhen" javaType="java.util.Date"/>
    	<result property="mark" column="mark"/>
    	<result property="passed" column="passed"/>
    	<result property="surnameFull" column="surnameFull"/>
    	<result property="firstnamesFull" column="firstnamesFull"/>
    	<result property="examinationResultCommentId" column="examinationresultcommentid"/>
    </resultMap>


    <select id="findExaminationResult" parameterType="int" resultMap="ExaminationResultResultMap">
        select opuscollege.examinationResult.*
        from   opuscollege.examinationResult
        where  id = #{value}
    </select>
    
    <select id="findExaminationResultByParams" parameterType="map" resultMap="ExaminationResultResultMap">
        select  opuscollege.examinationResult.*
        from    opuscollege.examinationResult
        where   examinationId = #{examinationId}
        AND     subjectId = #{subjectId}
        <if test='subjectResultId != null and subjectResultId != "0"'>
            AND   subjectResultId = #{subjectResultId}
        </if>
        AND     studyPlanDetailId = #{studyPlanDetailId}
        AND     attemptNr = #{attemptNr}
    </select>

    <select id="findExaminationResultsForAcademicYear" parameterType="map" resultMap="ExaminationResultResultMap">
        SELECT  opuscollege.examinationResult.*
        FROM    opuscollege.examinationResult
        INNER JOIN opuscollege.studyPlanDetail ON examinationResult.studyPlanDetailId = studyPlanDetail.id
        INNER JOIN opuscollege.subject ON examinationResult.subjectId = studyPlanDetail.id
        WHERE  (examinationResult.examinationId = #{examinationId}
                OR  examinationResult.studyPlanDetailId IN (
                    SELECT studyPlanDetail.id 
                    FROM opuscollege.studyPlanDetail
                    INNER JOIN opuscollege.subjectSubjectBlock ON studyPlanDetail.subjectBlockId = subjectSubjectBlock.subjectBlockId
                    WHERE subjectSubjectBlock.subjectId IN (
                        select examinationResult.subjectId 
                        WHERE examinationResult.examinationId = #{examinationId}
                        )                
                    )
                )
        AND        subject.currentAcademicYearId = #{academicYearId}
        ORDER BY   studyPlanDetailId, examinationResultDate 
    </select>

   <select id="findExaminationResults" parameterType="int" resultMap="ExaminationResultResultMap">
        select opuscollege.examinationResult.*
        from   opuscollege.examinationResult
        where  examinationId = #{value}
        order by examinationId, studyPlanDetailId, attemptNr
    </select>

    <!-- NB: subjectResultId parameter is deprecated -->
    <select id="findExaminationResultsByParams" parameterType="map" resultMap="ExaminationResultResultMap">
        select  opuscollege.examinationResult.*
        from    opuscollege.examinationResult
        inner join opuscollege.studyplandetail on examinationResult.studyPlanDetailId = studyPlanDetail.id
        inner join opuscollege.studyplancardinaltimeunit on studyplandetail.studyplancardinaltimeunitid = studyplancardinaltimeunit.id

        WHERE true
        <if test='studyPlanDetailId != null'>
            AND   examinationResult.studyPlanDetailId = #{studyPlanDetailId}
        </if>
        <if test="studyPlanId != null">
            AND studyplancardinaltimeunit.studyPlanId = #{studyPlanId}
        </if>
        <if test='subjectResultId != null and subjectResultId != "0"'>
            AND   examinationResult.subjectResultId = #{subjectResultId}
        </if>
        <if test='examinationId != null and examinationId != "0"'>
            AND   examinationResult.examinationId = #{examinationId}
        </if>
        <if test='subjectId != null and subjectId != "0"'>
            AND   examinationResult.subjectId = #{subjectId}
        </if>
        ORDER BY attemptNr
    </select>

    <select id="findExaminationResultsForSubject" parameterType="int" resultMap="ExaminationResultResultMap">
        select opuscollege.examinationResult.*
        from   opuscollege.examinationResult
        where  subjectId = #{value}
    </select>

    <!-- find all ExaminationResults for one StudyPlan -->
    <select id="findExaminationResultsForStudyPlan" parameterType="int" resultMap="ExaminationResultResultMap"> 
        select opuscollege.examinationResult.* 
        from opuscollege.examinationResult
        INNER JOIN opuscollege.studyPlanDetail ON examinationResult.studyPlanDetailId = studyPlanDetail.id
        WHERE studyPlanDetail.studyPlanId = #{value}
        AND (
                examinationResult.subjectId IN (
                SELECT examinationResult.subjectId 
                FROM opuscollege.subjectSubjectBlock
                INNER JOIN opuscollege.studyPlanDetail ON studyPlanDetail.subjectBlockId = subjectSubjectBlock.subjectBlockId
                WHERE studyPlanDetail.subjectBlockId IN (
                        select subjectBlock.id 
                        FROM opuscollege.subjectBlock
                        WHERE subjectBlock.cardinalTimeUnitNumber = #{cardinalTimeUnitNumber}
                )
                )
            OR examinationResult.subjectId IN (
                SELECT subjectId 
                FROM opuscollege.studyPlanDetail
                INNER JOIN opuscollege.studyPlanDetail ON studyPlanDetail.subjectId = subjectSubjectBlock.subjectBlockId
                WHERE studyPlanDetail.subjectBlockId IN (
                        select subjectBlock.id 
                        FROM opuscollege.subjectBlock
                        WHERE subjectBlock.cardinalTimeUnitNumber = #{cardinalTimeUnitNumber}
                )
                )
            )
        ORDER BY examinationResult.subjectId, examinationResult.examinationId, examinationResult.subjectResultId, examinationResult.attemptNr          
    </select>

    <!-- find all ExaminationResults for one StudyPlan -->
    <select id="findExaminationResultsForStudyPlanByParams" parameterType="map" resultMap="ExaminationResultResultMap"> 
        select opuscollege.examinationResult.* 
        from opuscollege.examinationResult
        INNER JOIN opuscollege.studyPlanDetail ON examinationResult.studyPlanDetailId = studyPlanDetail.id
        INNER JOIN opuscollege.studyPlanCardinalTimeUnit ON studyPlanDetail.studyPlanCardinalTimeUnitId = studyPlanCardinalTimeUnit.id
        INNER JOIN opuscollege.studyGradeType ON studyPlanCardinalTimeUnit.studyGradeTypeId = studyGradeType.id
        WHERE studyPlanDetail.studyPlanId = #{studyPlanId}
        <if test='currentAcademicYearId != null and currentAcademicYearId != "0"'>
            AND studyGradeType.currentAcademicYearId = #{currentAcademicYearId}
        </if>
         AND (
                examinationResult.subjectId IN (
                    SELECT examinationResult.subjectId 
                    FROM opuscollege.subjectSubjectBlock
                    INNER JOIN opuscollege.studyPlanDetail ON studyPlanDetail.subjectBlockId = subjectSubjectBlock.subjectBlockId
                    WHERE studyPlanDetail.subjectBlockId IN (
                        select subjectBlock.id 
                        FROM opuscollege.subjectBlock
                        <if test='currentAcademicYearId != null and currentAcademicYearId != "0"'>
                            WHERE subjectBlock.currentAcademicYearId = #{currentAcademicYearId}
                        </if>
                    )
                )
            OR examinationResult.subjectId IN (
                SELECT subjectId 
                FROM opuscollege.studyPlanDetail
                WHERE studyPlanDetail.subjectId IN (
                    select subject.id 
                    FROM opuscollege.subject
                        <if test='currentAcademicYearId != null and currentAcademicYearId != "0"'>
                            WHERE subject.currentAcademicYearId = #{currentAcademicYearId}
                        </if>
                    )
                )
        )
        ORDER BY examinationResult.subjectId, examinationResult.examinationId, examinationResult.subjectResultId, examinationResult.attemptNr     
    </select>

    <!-- Careful: Only the combination of studyPlanDetailId and subjectId is unique to a subject, otherwise all results of subjectblock are fetched -->
    <select id="findExaminationResultsForStudyPlanDetailId" parameterType="int" resultMap="ExaminationResultResultMap">
        select  opuscollege.examinationResult.*
        from    opuscollege.examinationResult
        where   studyPlanDetailId = #{value}
        ORDER BY examinationId ASC, subjectResultId ASC, attemptNr ASC
    </select>

    <!-- NB: subjectResultId is deprecated -->
    <select id="findExaminationResultsForSubjectResult" parameterType="int" resultMap="ExaminationResultResultMap">
        select  opuscollege.examinationResult.*
        from    opuscollege.examinationResult
        where   subjectResultId = #{value}
        ORDER BY examinationId ASC, subjectResultId ASC, attemptNr ASC
    </select>

    <select id="findExaminationResultsForStudyPlanDetail" parameterType="map" resultMap="ExaminationResultResultMap">
        select  opuscollege.examinationResult.*
        from    opuscollege.examinationResult
        where   subjectId = #{subjectId}
        <if test='subjectResultId != null and subjectResultId != "0"'>
            AND   subjectResultId = #{subjectResultId}
        </if>
        AND     studyPlanDetailId = #{studyPlanDetailId}
        
        ORDER BY examinationId ASC, subjectResultId ASC, attemptNr ASC
    </select>

    <select id="findActiveExaminationResultsForSubjectResult" parameterType="map" resultMap="ExaminationResultResultMap">
        select  opuscollege.examinationResult.*
        from    opuscollege.examinationResult
        where   subjectId = #{subjectId}
        AND     studyPlanDetailId = #{studyPlanDetailId}
        AND     active = 'Y'
        ORDER BY examinationId ASC, subjectResultId ASC, attemptNr ASC
    </select>

    <select id="findExaminationResultsForSubjectStudyGradeType" parameterType="map" resultMap="ExaminationResultResultMap"> 
        SELECT opuscollege.examinationResult.*
        FROM   opuscollege.examinationResult
        INNER JOIN opuscollege.studyPlanDetail ON examinationResult.studyPlanDetailId = studyPlanDetail.id
        INNER JOIN opuscollege.studyPlanCardinalTimeUnit ON studyPlanDetail.studyPlanCardinalTimeUnitId = studyPlanCardinalTimeUnit.id
        INNER JOIN opuscollege.studyPlan ON studyPlanDetail.studyPlanId = studyPlan.id
        WHERE   studyPlanCardinalTimeUnit.studyGradeTypeId = #{studyGradeTypeId}
        AND     examinationResult.subjectId = #{subjectId}
        OR      examinationResult.studyPlanDetailId IN (
                    SELECT studyPlanDetail.id 
                    FROM opuscollege.studyPlanDetail
                    INNER JOIN opuscollege.studyPlanCardinalTimeUnit ON studyPlanDetail.studyPlanCardinalTimeUnitId = studyPlanCardinalTimeUnit.id
                    INNER JOIN opuscollege.studyPlan ON studyPlanDetail.studyPlanId = studyPlan.id
                    INNER JOIN opuscollege.subjectSubjectBlock ON studyPlanDetail.subjectBlockId = subjectSubjectBlock.subjectBlockId
                    WHERE studyPlanCardinalTimeUnit.studyGradeTypeId = #{studyGradeTypeId}
                    AND subjectSubjectBlock.subjectId = #{subjectId}                
                )
        ORDER BY examinationResult.subjectId, examinationResult.examinationId, examinationResult.subjectResultId      
    </select>

    <select id="findExaminationResultsForSubjectBlockStudyGradeType" parameterType="map" resultMap="ExaminationResultResultMap"> 
        SELECT opuscollege.examinationResult.*
        FROM   opuscollege.examinationResult
        INNER JOIN opuscollege.studyPlanDetail ON examinationResult.studyPlanDetailId = studyPlanDetail.id
        INNER JOIN opuscollege.studyPlanCardinalTimeUnit ON studyPlanDetail.studyPlanCardinalTimeUnitId = studyPlanCardinalTimeUnit.id
        INNER JOIN opuscollege.studyPlan ON studyPlanDetail.studyPlanId = studyPlan.id
        WHERE   studyPlanCardinalTimeUnit.studyGradeTypeId = #{studyGradeTypeId}
        AND     (
                studyPlanDetail.subjectBlockId = #{subjectBlockId}
        OR      examinationResult.studyPlanDetailId IN (
                    SELECT studyPlanDetail.id 
                    FROM opuscollege.studyPlanDetail
                    INNER JOIN opuscollege.studyPlan ON studyPlanDetail.studyPlanId = studyPlan.id
                    INNER JOIN opuscollege.studyPlanCardinalTimeUnit ON studyPlanDetail.studyPlanCardinalTimeUnitId = studyPlanCardinalTimeUnit.id
                    INNER JOIN opuscollege.subjectSubjectBlock ON studyPlanDetail.subjectBlockId = subjectSubjectBlock.subjectBlockId
                    WHERE studyPlanCardinalTimeUnit.studyGradeTypeId = #{studyGradeTypeId}
                    AND subjectSubjectBlock.subjectBlockId = #{subjectBlockId}                
                )
        )
        ORDER BY examinationResult.subjectId, examinationResult.examinationId     
    </select>

    <insert id="addExaminationResult" parameterType="ExaminationResult">
        insert into opuscollege.ExaminationResult
        ( examinationId
        , subjectId
        , subjectResultId
        , studyPlanDetailId
        , examinationResultDate
        , attemptNr
        , mark
        , examinationResultCommentId
        , staffMemberId
        , active
        , passed
        , writeWho
        ) values ( 
        #{examinationId}
        , #{subjectId}
        , #{subjectResultId}
        , #{studyPlanDetailId}
        , #{examinationResultDate}
        , #{attemptNr}
        , #{mark}
        , #{examinationResultCommentId}
        , #{staffMemberId}
        , #{active}
        , #{passed}
        , #{writeWho}
        )
        <selectKey keyProperty="id" resultType="int">
            SELECT currVal('opuscollege.examinationresultseq')
        </selectKey>
    </insert>

    <insert id="addExaminationResultHistory" parameterType="ExaminationResult">
        insert into audit.examinationResult_hist
        ( operation
        , writeWho
        <!--  , writeWhen: is written automatically-->
        , id
        , examinationId
        , subjectId
        , subjectResultId
        , studyPlanDetailId
        , examinationResultDate
        , attemptNr
        , mark
        , examinationResultCommentId
        , staffMemberId
        , active
        , passed
        ) values (
          'I'
        , #{writeWho}
        , #{id}
        , #{examinationId}
        , #{subjectId}
        , #{subjectResultId}
        , #{studyPlanDetailId}
        , #{examinationResultDate}
        , #{attemptNr}
        , #{mark}
        , #{examinationResultCommentId}
        , #{staffMemberId}
        , #{active}
        , #{passed}
        )
    </insert>

    <update id="updateExaminationResult" parameterType="ExaminationResult">
        update  opuscollege.examinationResult
        set     examinationId       = #{examinationId}
        ,       subjectId           = #{subjectId}
        ,       subjectResultId     = #{subjectResultId}
        ,       studyPlanDetailId   = #{studyPlanDetailId}
        ,       examinationResultDate = #{examinationResultDate}
        ,       attemptNr           = #{attemptNr}
        ,       mark                = #{mark}
        ,       examinationResultCommentId = #{examinationResultCommentId}
        ,       staffMemberId       = #{staffMemberId}
        ,       active              = #{active}
        ,       passed              = #{passed}
        ,       writeWho            = #{writeWho}
        <!--  , writeWhen: is written automatically-->
        where   id = #{id}
    </update>

    <insert id="updateExaminationResultHistory" parameterType="ExaminationResult">
        insert into audit.examinationResult_hist
        ( operation
        , writeWho
        <!--  , writeWhen: is written automatically-->
        , id
        , examinationId
        , subjectId
        , subjectResultId
        , studyPlanDetailId
        , examinationResultDate
        , attemptNr
        , mark
        , examinationResultCommentId
        , staffMemberId
        , active
        , passed
        ) values (
          'U'
        , #{writeWho}
        , #{id}
        , #{examinationId}
        , #{subjectId}
        , #{subjectResultId}
        , #{studyPlanDetailId}
        , #{examinationResultDate}
        , #{attemptNr}
        , #{mark}
        , #{examinationResultCommentId}
        , #{staffMemberId}
        , #{active}
        , #{passed}
        )
    </insert>

    <delete id="deleteExaminationResult" parameterType="int">
        delete from opuscollege.ExaminationResult
        where  id = #{value}
    </delete>

    <insert id="deleteExaminationResultHistory" parameterType="ExaminationResult">
        insert into audit.examinationResult_hist
        ( operation
        , writeWho
        <!--  , writeWhen: is written automatically-->
        , id
        , examinationId
        , subjectId
        , subjectResultId
        , studyPlanDetailId
        , examinationResultDate
        , attemptNr
        , mark
        , staffMemberId
        , active
        , passed
        ) values (
          'D'
        , #{writeWho}
        , #{id}
        , #{examinationId}
        , #{subjectId}
        , #{subjectResultId}
        , #{studyPlanDetailId}
        , #{examinationResultDate}
        , #{attemptNr}
        , #{mark}
        , #{staffMemberId}
        , #{active}
        , #{passed}
        )
    </insert>

    <!-- find all examinationResult for a specific subjectblock -->
    <select id="findExaminationResultsForSubjectBlock" parameterType="int" resultMap="ExaminationResultResultMap"> 
        select opuscollege.examinationResult.* 
        from opuscollege.examinationResult
        INNER JOIN opuscollege.studyPlanDetail ON examinationResult.studyPlanDetailId = studyPlanDetail.id
        WHERE studyPlanDetail.subjectBlockId = #{value}
        AND (
            examinationResult.subjectId IN (
                SELECT studyPlanDetail.subjectId 
                FROM opuscollege.subjectSubjectBlock
                INNER JOIN opuscollege.studyPlanDetail ON studyPlanDetail.subjectBlockId = subjectSubjectBlock.subjectBlockId
                WHERE studyPlanDetail.subjectBlockId = #{value}
             )
             <!-- OR examinationResult.subjectId IN (
                SELECT studyPlanDetail.subjectId
                FROM opuscollege.subjectBlockSubjectBlock
                INNER JOIN opuscollege.studyPlanDetail ON studyPlanDetail.subjectBlockId = subjectBlockSubjectBlock.subjectBlockIdParent
                WHERE studyPlanDetail.subjectBlockId = #{value}
             )
             OR examinationResult.subjectId IN (
                SELECT studyPlanDetail.subjectId
                FROM opuscollege.subjectBlockSubjectBlock
                INNER JOIN opuscollege.studyPlanDetail ON studyPlanDetail.subjectBlockId = subjectBlockSubjectBlock.subjectBlockIdChild
                WHERE studyPlanDetail.subjectBlockId = #{value}
             ) -->
         )
         ORDER BY examinationResult.examinationId     
    </select>

    <!-- find all examinationResult for a specific subjectsubjectblock -->
    <select id="findExaminationResultsForSubjectSubjectBlock" parameterType="int" resultMap="ExaminationResultResultMap">

        select examinationResult.* from opuscollege.examinationResult
        INNER JOIN opuscollege.studyplandetail ON examinationResult.studyplandetailid = studyplandetail.id
        INNER JOIN opuscollege.subjectSubjectBlock ON studyplandetail.subjectBlockId = subjectSubjectBlock.subjectBlockId
            AND examinationResult.subjectid = subjectSubjectBlock.subjectid
        WHERE subjectSubjectBlock.id = #{value}
        ORDER BY examinationResult.examinationId         

    </select>
    
    <select id="findExaminationResultHistory" parameterType="map" resultMap="ExaminationResultHistoryResultMap">
		select  DISTINCT
		   examinationresult_hist.operation,
		   examinationresult_hist.writewho,
		   examinationresult_hist.writewhen,
		   examinationresult_hist.mark,
		   examinationresult_hist.passed,
		   examinationresult_hist.examinationresultcommentid,
		   person.surnamefull AS surnamefull,
		   person.firstnamesfull AS firstnamesfull
		    
		FROM audit.examinationresult_hist
		INNER JOIN opuscollege.examination on examinationresult_hist.examinationid = examination.id
		INNER JOIN opuscollege.opususer ON split_part(examinationresult_hist.writewho, ':', 2)::int = opususer.id
		INNER JOIN opuscollege.person on opususer.personid = person.id
		INNER JOIN opuscollege.studyplandetail studyplandetail ON examinationresult_hist.studyplandetailid = studyplandetail.id
		INNER JOIN opuscollege.studyplan ON studyplandetail.studyplanid = studyplan.id
		
		WHERE examination.id=#{examinationId} and studyPlanDetail.id = #{studyPlanDetailId}
		ORDER BY examinationresult_hist.writewhen DESC
	</select>

</mapper>
