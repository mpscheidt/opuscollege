<?xml version="1.0" encoding="UTF-8"?><!--
  ***** BEGIN LICENSE BLOCK *****
  Version: MPL 1.1/GPL 2.0/LGPL 2.1
  
  The contents of this file are subject to the Mozilla Public License Version
  1.1 (the "License"); you may not use this file except in compliance with
  the License. You may obtain a copy of the License at
  http://www.mozilla.org/MPL/
  
  Software distributed under the License is distributed on an "AS IS" basis,
  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
  for the specific language governing rights and limitations under the
  License.
  
  The Original Code is Opus-College college module code.
  
  The Initial Developer of the Original Code is
  Center for Information Services, Radboud University Nijmegen.
  Portions created by the Initial Developer are Copyright (C) 2008
  the Initial Developer. All Rights Reserved.
  
  Contributor(s):
    For Java files, see Javadoc @author tags.
  
  Alternatively, the contents of this file may be used under the terms of
  either the GNU General Public License Version 2 or later (the "GPL"), or
  the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
  in which case the provisions of the GPL or the LGPL are applicable instead
  of those above. If you wish to allow use of your version of this file only
  under the terms of either the GPL or the LGPL, and not to allow others to
  use your version of this file under the terms of the MPL, indicate your
  decision by deleting the provisions above and replace them with the notice
  and other provisions required by the GPL or the LGPL. If you do not delete
  the provisions above, a recipient may use your version of this file under
  the terms of any one of the MPL, the GPL or the LGPL.
  
  ***** END LICENSE BLOCK *****
--><!--Converted at: Wed Aug 05 10:28:44 CEST 2015-->
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="org.uci.opus.college.persistence.AcademicYearMapper">

    <resultMap id="AcademicYearResultMap" type="AcademicYear">
        <result property="id" column="id"/>
        <result property="description" column="description"/>
        <result property="startDate" column="startDate"/>
        <result property="endDate" column="endDate"/>
        <result property="nextAcademicYearId" column="nextAcademicYearId"/>
    </resultMap>

    <select id="findAllAcademicYears" resultType="AcademicYear">
        SELECT  *
        FROM    opuscollege.academicYear
        ORDER   BY lower(description) DESC
    </select>
    
    <select id="findAcademicYearsByMaxYear" parameterType="map" resultType="AcademicYear">
        SELECT  *
        FROM    opusCollege.academicYear
        <if test="year != null">
        where   description  &lt;=  #{year}
        </if>
        ORDER   BY lower(description) DESC
    </select>

	<select id="findAcademicYearById" resultType="AcademicYear">
        SELECT  *
        FROM    opuscollege.academicYear
        WHERE id = #{value}
    </select>

    <select id="findAcademicYears" parameterType="map" resultType="AcademicYear">
       SELECT         
        academicYear.*
        FROM  opuscollege.academicYear
        WHERE true
        
        <if test='searchValue != null and searchValue != ""'>
            and ( opuscollege.remove_diacritics(lower(academicYear.description)) LIKE opuscollege.remove_diacritics(lower('%' || #{searchValue} || '%'))
               OR CAST(academicYear.startDate AS TEXT)  LIKE lower('%' || #{searchValue} || '%')
               OR CAST(academicYear.endDate AS TEXT)  LIKE lower('%' || #{searchValue} || '%')
                  )
        </if>
        
        ORDER BY academicyear.description DESC
    </select>

    <!-- find one academic year (see also findAcademicYearById) -->
    <select id="findAcademicYear" parameterType="int" resultMap="AcademicYearResultMap"> 
        SELECT *
        FROM   opuscollege.academicYear
        WHERE  id = #{value}
    </select>
    
    <delete id="deleteAcademicYear" parameterType="int">
        DELETE FROM opuscollege.academicyear
        WHERE  id = #{value}
    </delete>

	<insert id="addAcademicYear" parameterType="AcademicYear">
        
        INSERT INTO opuscollege.academicYear(
        	description
        	,startDate
        	,endDate
            ,nextAcademicYearId)
        	
        	VALUES(
        	#{description}
        	,#{startDate}
        	,#{endDate}
            ,#{nextAcademicYearId})

        <selectKey keyProperty="id" resultType="int">
            SELECT currVal('opuscollege.academicYearSeq')
        </selectKey>        
    </insert>

	<update id="updateAcademicYear" parameterType="AcademicYear">
        UPDATE opuscollege.academicYear SET
        	description = #{description}
        	,startDate = #{startDate}
        	,endDate = #{endDate}
            ,nextAcademicYearId = #{nextAcademicYearId}

		WHERE id = #{id}        	
    </update>
    
    <select id="findRequestAdmissionNumberOfSubjectsToGrade" parameterType="java.util.Date" resultType="int">
        select  appConfigAttributeValue
        from    opusCollege.appConfig
        where   appConfigAttributeName = 'numberOfSubjectsToGrade'
        and     startDate  &lt;=  #{date}
        and     (endDate  IS NULL OR 
                (endDate  &gt;=  #{date} AND endDate  &lt;  DATE(#{date}) + interval '1 year')
                )
                 
    </select>

    <select id="findLastAcademicYear" parameterType="map" resultType="AcademicYear">
        select * from opuscollege.academicyear
        inner join opuscollege.studygradetype on academicyear.id = studygradetype.currentacademicyearid 
        inner join opuscollege.studyplancardinaltimeunit on studygradetype.id = studyplancardinaltimeunit.studygradetypeid 
        where true
        <if test='studyPlanId != null and studyPlanId != "" and studyPlanId != "0"'>
            and studyPlanId = #{studyPlanId}  
        </if>
        order by academicyear.description desc
        limit 1
    </select>
    
    <select id="findDependencies" parameterType="map" resultType="java.util.HashMap">
    	
    	SELECT
            (SELECT COUNT(*) FROM opuscollege.AdmissionRegistrationConfig WHERE academicYearId = #{academicYearId}) AS "AdmissionRegistrationConfigs",
			(SELECT COUNT(*) FROM opuscollege.EndGrade WHERE academicYearId = #{academicYearId}) AS "EndGrades",
			(SELECT COUNT(*) FROM opuscollege.RequestAdmissionPeriod WHERE academicYearId = #{academicYearId}) AS "RequestAdmissionPeriods",
			(SELECT COUNT(*) FROM opuscollege.StudyGradeType WHERE currentAcademicYearId = #{academicYearId}) AS "StudyGradeTypes",
			(SELECT COUNT(*) FROM opuscollege.Subject WHERE currentAcademicYearId = #{academicYearId}) AS "Subjects",
			(SELECT COUNT(*) FROM opuscollege.SubjectBlock WHERE currentAcademicYearId = #{academicYearId}) AS "SubjectBlocks",
			(SELECT COUNT(*) FROM opuscollege.Thesis WHERE startAcademicYearId = #{academicYearId}) AS "Thesis"
    	
    
    </select>
    
    <select id="findAcademicYearOfStudyGradeType" parameterType="int" resultType="AcademicYear">
        select academicYear.*
        from   opusCollege.academicYear
        ,      opusCollege.studyGradeType
        where  academicYear.id = studyGradeType.currentAcademicYearId
        and    studyGradeType.id = #{value}
    </select>


    <select id="findAcademicYearsInStudyPlan" parameterType="map" resultType="AcademicYear">
		SELECT DISTINCT  academicyear.*
		FROM
		"opuscollege"."studyplandetail" studyplandetail 
		INNER JOIN "opuscollege"."studyplan" studyplan ON studyplandetail."studyplanid" = studyplan."id"
		INNER JOIN "opuscollege"."student" student ON student.studentid = studyplan.studentid
		INNER JOIN  "opuscollege"."person" person ON person.id = student.personid
		INNER JOIN opuscollege.studyPlanCardinalTimeUnit ON studyPlanDetail.studyPlanCardinalTimeUnitId = studyPlanCardinalTimeUnit.id
		INNER JOIN "opuscollege"."studygradetype" studygradetype ON studyPlanCardinalTimeUnit."studygradetypeid" = studygradetype."id"
		INNER JOIN "opuscollege"."study" study ON studygradetype."studyid" = study."id"
		INNER JOIN "opuscollege"."academicyear" academicyear ON academicyear.id = studygradetype.currentAcademicYearId 
		INNER JOIN "opuscollege"."organizationalunit" ON study.organizationalunitid = organizationalunit.id
		INNER JOIN "opuscollege"."branch" branch ON organizationalunit."branchid" = branch."id"
		INNER JOIN "opuscollege"."institution" institution ON branch."institutionid" = institution."id"
		LEFT OUTER JOIN "opuscollege"."subjectsubjectblock" ON studyplandetail."subjectblockid" = subjectsubjectblock."subjectblockid"

		WHERE person.active = 'Y' 
		AND institution.institutionTypeCode = #{institutionTypeCode}
      
        <if test='institutionId != null and institutionId != "0"'>
                AND institution."id" = #{institutionId}
        </if>
        <if test='branchId != null and branchId != "0"'>
              AND branch."id" = #{branchId}
        </if>
        <if test='organizationalUnitId != null and organizationalUnitId != "0"'>
              AND organizationalunit.id in (SELECT id FROM opuscollege.crawl_tree(#{organizationalUnitId}, 0))
        </if>
        <if test='studyId != null and studyId != "0"'>
                AND study."id" = #{studyId}
        </if>
        <if test='studyPlanId != null and studyPlanId != "0"'>
                AND studyplandetail.studyPlanId = #{studyPlanId} 
        </if>
        <if test='subjectId != null and subjectId != "0"'>
                AND (studyplandetail."subjectid" = #{subjectId} 
                OR subjectsubjectblock.subjectid = #{subjectId}
                )
        </if>
    </select>

</mapper>