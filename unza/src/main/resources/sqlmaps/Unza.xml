<?xml version="1.0" encoding="UTF-8"?>
<!--
  ***** BEGIN LICENSE BLOCK *****
  Version: MPL 1.1/GPL 2.0/LGPL 2.1
  
  The contents of this file are subject to the Mozilla Public License Version
  1.1 (the "License"); you may not use this file except in compliance with
  the License. You may obtain a copy of the License at
  http://www.mozilla.org/MPL/
  
  Software distributed under the License is distributed on an "AS IS" basis,
  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
  for the specific language governing rights and limitations under the
  License.
  
  The Original Code is Opus-College unza module code.
  
  The Initial Developer of the Original Code is
  Center for Information Services, Radboud University Nijmegen.
  Portions created by the Initial Developer are Copyright (C) 2008
  the Initial Developer. All Rights Reserved.
  
  Contributor(s):
    For Java files, see Javadoc @author tags.
  
  Alternatively, the contents of this file may be used under the terms of
  either the GNU General Public License Version 2 or later (the "GPL"), or
  the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
  in which case the provisions of the GPL or the LGPL are applicable instead
  of those above. If you wish to allow use of your version of this file only
  under the terms of either the GPL or the LGPL, and not to allow others to
  use your version of this file under the terms of the MPL, indicate your
  decision by deleting the provisions above and replace them with the notice
  and other provisions required by the GPL or the LGPL. If you do not delete
  the provisions above, a recipient may use your version of this file under
  the terms of any one of the MPL, the GPL or the LGPL.
  
  ***** END LICENSE BLOCK *****
-->
<!DOCTYPE sqlMap PUBLIC "-//ibatis.apache.org//DTD SQL Map 2.0//EN" "http://ibatis.apache.org/dtd/sql-map-2.dtd">

<sqlMap namespace="Unza">
    <typeAlias type="org.uci.opus.unza.domain.FinancialRequest" alias="FinancialRequest" />
    <!--
    Find current highest student code running number for given facultyCode and year
    Format: 2 digits year + 5 digits running number + 1 check digit
    -->
    <select id="findHighestStudentCodeRunningNumber" parameterClass="map" resultClass="String"> 
        select MAX(SUBSTR (student.studentcode, 3, 5)) FROM opuscollege.student
        where studentCode ILIKE #year# || '______'
    </select>
    
   <select id="findFinancialRequest" parameterClass="String" resultClass="FinancialRequest"> 
        select * FROM opuscollege.financialRequest
        where financialRequestId = #value#
        and statusCode != 4
    </select>
    
   <select id="findFinancialRequests" resultClass="FinancialRequest"> 
        select * FROM opuscollege.financialRequest
        where statusCode != 4 order by timestampReceived
    </select>
     
    <select id="findFinancialRequestsBySelection" parameterClass="map" resultClass="FinancialRequest"> 
        select * FROM opuscollege.financialRequest
        where statusCode = statusCode 
        <isNotEqual property="statusCode" compareValue="-1">
            and   statusCode = #statusCode#        
        </isNotEqual>
        <isNotEqual property="errorCode" compareValue="-1">
            and errorCode = #errorCode#       
        </isNotEqual>
        <isNotNull property="studentCode" >
            and studentCode = #studentCode#       
        </isNotNull>        
      <isNotNull property="fromReceivedDate">
            and timestampreceived &gt; #fromReceivedDate#
         </isNotNull>
        <isNotNull property ="untilReceivedDate">
            and timestampreceived  &lt; #untilReceivedDate#
         </isNotNull> 
        <isNotNull property ="financialRequestId">
            and financialrequestId = #financialRequestId#
         </isNotNull>           
       order by timestampReceived
    </select>  
        
    <select id="findHighestFinancialRequestVersion" parameterClass="String" resultClass="int"> 
        select MAX(requestVersion) FROM opuscollege.financialRequest
        where statusCode != 4 and financialRequestId = #value#
    </select>
    
    <select id="findHighestFinancialRequest" parameterClass="String" resultClass="FinancialRequest"> 
        select * FROM opuscollege.financialRequest where requestVersion =
        select MAX(requestVersion) FROM opuscollege.financialRequest
        where financialRequestId = #value#
    </select> 
       
    <insert id="addFinancialRequest" parameterClass="FinancialRequest">
        INSERT INTO
            opuscollege.financialRequest (
                requestId,       
                financialRequestId,   
                statusCode,      
                requestString,   
                timestampReceived,  
                requestVersion, 
                timestampModified, 
                errorCode,
                processedToFinanceTransaction,
                errorReportedToFinancialSystem,
                studentCode,
                requestTypeId               ) values (
                #requestId#
                ,#financialRequestId#
                ,#statusCode#
                ,#requestString#
                ,#timestampReceived#
                ,#requestVersion#
                ,#timestampModified#
                ,#errorCode#
                ,#processedToFinanceTransaction#
                ,#errorReportedToFinancialSystem#
                ,#studentCode#
                ,#requestTypeId#
            )
        <selectKey keyProperty="id" resultClass="int">
                SELECT currVal('opuscollege.financialRequestSeq')
        </selectKey> 
    </insert>

    <insert id="addFinancialRequestHistory" parameterClass="FinancialRequest">
        INSERT INTO
            audit.financialRequest_hist (
                operation
                ,writeWho
        <!--  , writeWhen: is written automatically-->
                ,id
                ,requestId,       
                financialRequestId,   
                statusCode,      
                requestString,   
                timestampReceived,  
                requestVersion, 
                timestampModified, 
                errorCode,
                processedToFinanceTransaction,
                errorReportedToFinancialSystem,
                requestTypeId               
            ) values (
                'I'
                ,#writeWho#
                ,#id#
                ,#requestId#
                ,#financialRequestId#
                ,#statusCode#
                ,#requestString#
                ,#timestampReceived#
                ,#requestVersion#
                ,#timestampModified#
                ,#errorCode#
                ,#processedToFinanceTransaction#
                ,#errorReportedToFinancialSystem#
                ,#requestTypeId#
            )
    </insert>

    <update id="updateFinancialRequest" parameterClass="FinancialRequest">
        UPDATE  opuscollege.financialRequest
        SET     requestId               = #requestId#
                ,financialRequestId     = #financialRequestId#
                ,statusCode             = #statusCode#
                ,requestString          = #requestString#
                ,timestampReceived      = #timestampReceived#
                ,requestVersion         = #requestVersion# 
                ,timestampModified      = #timestampModified#
                ,errorCode              = #errorCode#
                ,processedToFinanceTransaction  = #processedToFinanceTransaction#
                ,errorReportedToFinancialSystem = #errorReportedToFinancialSystem#
                ,studentCode              = #studentCode#
                ,requestTypeId          = #requestTypeId#
        WHERE   id = #id#
    </update>    
    
       <insert id="updateFinancialRequestHistory" parameterClass="FinancialRequest">
        INSERT INTO
            audit.financialRequest_hist (
                operation
                ,writeWho
        <!--  , writeWhen: is written automatically-->
                ,id
                ,requestId,       
                financialRequestId,   
                statusCode,      
                requestString,   
                timestampReceived,  
                requestVersion, 
                timestampModified, 
                errorCode,
                processedToFinanceTransaction,
                errorReportedToFinancialSystem,
                requestTypeId               
            ) values (
                'U'
                ,#writeWho#
                ,#id#
                ,#requestId#
                ,#financialRequestId#
                ,#statusCode#
                ,#requestString#
                ,#timestampReceived#
                ,#requestVersion#
                ,#timestampModified#
                ,#errorCode#
                ,#processedToFinanceTransaction#
                ,#errorReportedToFinancialSystem#
                ,#requestTypeId#
            )
    </insert>

    <select id="findHighestSponsorInvoiceNumber" parameterClass="String" resultClass="String"> 
        select MAX(invoiceNumber) FROM opuscollege.sch_sponsorInvoice
        where invoiceNumber ILIKE #prefix# || '%'
    </select>
    
    <select id="findHighestSponsorReceiptNumber" parameterClass="String" resultClass="String"> 
        select MAX(receiptNumber) FROM opuscollege.sch_sponsorPayment
        where receiptNumber ILIKE #prefix# || '%'
    </select>
    
</sqlMap>
